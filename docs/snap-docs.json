{"name":"Setup","route":"/start-setup","price":0,"description":"## Setup\n\n\n## Prerequisites\n\n- npm v7\n\n- node v14+\n\n## Snapfu\n\n_To follow the way of Snap - you must have strong Snap-fu._\n\nSnapfu is a CLI interface for creating a Snap project from a template. You do not need to utilize Snapfu to develop using Snap packages, but it does simplify the process.\n\n### Install\n\n```sh\nnpm install -g snapfu\n```\n\n\n### Login\n\nSnapfu will prompt you to authenticate with Github.\n\n```sh\nsnapfu login\n```\n\n### Initialize new project\n\nInitialize a new project using Snapfu:\n\n```sh\nsnapfu init [projectname]\ncd [projectname]\n```\n\nYou will be asked for your Site ID, which you find in the [Searchspring Management Console](https://manage.searchspring.net)\n\nThen select your desired framework, such as Preact. \n\nThis will create a new project with git repo.\n\n### Install project dependencies\n\n```sh\nnpm install\n```\n\n## Development\n\nAfter initializing a Snapfu project, it will contain a template ready for you to use. \n\n```sh\nnpm run dev\n```\n\nThe local server will run at [https://localhost:3333](https://localhost:3333) and serves the contents of the `/public` directory\n\nThe development bundle will be served from [https://localhost:3333/dist/bundle.js](https://localhost:3333/dist/bundle.js)\n\nThere are two ways we can develop and integration using the bundle:\n\n### Snapfu extension \n\n[Snapfu extension](https://github.com/searchspring/snapfu-extension-chrome)\n\nVisit the website you are developing for. Click the extension to enable it and set the mode to `local`, then press `Save`.\n\nThe page will reload and will load the local development bundle [https://localhost:3333/dist/bundle.js](https://localhost:3333/dist/bundle.js) onto the current website.\n\nThe page will automatically reload upon saving any code modifications while `npm run dev` is running.\n\n### Local mockup\n\nAlternatively, you can create a local mockup `index.html` file within the `/public` directory that includes the bundle linked. The mockup can then be viewed at [https://localhost:3333](https://localhost:3333)\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<title>Snap</title>\n\t</head>\n\t<body>\n\t\t<div id=\"searchspring-header\"></div>\n\t\t<div id=\"searchspring-content\"></div>\n\t\t<div id=\"searchspring-sidebar\"></div>\n\t</body>\n\n\t<script src=\"dist/bundle.js\"></script>\n</html>\n```\n\n## Publishing\n\n```sh\ngit commit -am \"Hello, snapfu\"\ngit push\n```\n\nThe bundle will automatically be built from the `production` branch and deployed to this URL:\n\n`https://snapui.searchspring.io/[your_site_id]/bundle.js`\n\nBuilds on different branch names will be deployed to:\n\n`https://snapui.searchspring.io/[your_site_id]/[branch]/bundle.js`\n\nYou can now view this integration on your site from any Chrome browser using the SearchSpring extension.","image":"","sku":"sku/start-setup","id":"/start-setup","categoryHierarchy":"Getting Started > Setup"}
{"name":"Preact","route":"/start-preact","price":0,"description":"## Snap Preact\n\nThe [@searchspring/snap-preact](#/package-preact) package is an abstraction layer for Preact that provides a config based interface for creating a Searchspring integration quickly. Underneath the hood it utilizes all of the core Snap packages. If you wish to create a Snap integration using core packages individually (hard mode), see the Advanced section.\n\nIf you are not using Snapfu to start with a template, you will need to start by adding Snap to your project.\n\n```bash\nnpm install --save @searchspring/snap-preact\n```\n\n```typescript\nimport { Snap } from '@searchspring/snap-preact';\n```","image":"","sku":"sku/start-preact","id":"/start-preact","categoryHierarchy":"Getting Started > Preact"}
{"name":"Configuration","route":"/start-preact-config","price":0,"description":"## Configuration\n\nLets define our config. The config that is provided to Snap will create and return controllers that are specified in the config. In this example, we will be creating a Search and Autocomplete controller.\n\n```typescript\nconst config = {\n\turl: {\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'query' }\n\t\t\t}\n\t\t}\n\t},\n\tclient: {\n\t\tglobals: {\n\t\t\tsiteId: 'xxxxxx',\n\t\t},\n\t},\n\tcontrollers: {\n\t\tsearch: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'search',\n\t\t\t\t},\n\t\t\t\ttargeters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-content',\n\t\t\t\t\t\tcomponent: () => Content,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-sidebar',\n\t\t\t\t\t\tcomponent: () => Sidebar,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tautocomplete: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'autocomplete',\n\t\t\t\t\tselector: 'input.searchspring-ac',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\ttrending: {\n\t\t\t\t\t\t\tlimit: 5,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttargeters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: 'input.searchspring-ac',\n\t\t\t\t\t\tcomponent: () => Autocomplete,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\nLets go over a few things.\n\n`config.url` is optional and contains a [`UrlTranslator` config](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url) object that is passed to the core [@searchspring/snap-url-manager](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager) package used by all controllers. This parameter configuration will be applied to all controllers created via Snap, but can be specified per controller for specific customization.\n\n`config.client` is required and contains a config object that is passed to the core [@searchspring/snap-client](https://github.com/searchspring/snap/tree/main/packages/snap-client) package. This service handles the network requests to our APIs to retrieve data to be displayed.\n\n`config.client.globals` specifies base query parameters to the API; these are parameters that will ALWAYS be included on every request. At the bare minimum, `siteId` is required and can be obtained in the [Searchspring Management Console](https://manage.searchspring.net/)\n\n`config.controllers` specifies all of the controllers that we wish to create. In this this example we are creating a Search and Autocomplete controller. In addition, Finder and Recommendation services can also be specified.\n\n### Search\n\nLets look at the Search controller that we are creating.\n\nThe `config` object contains all controller configurations. The most notable property here is the required `id` with a given value of `'search'`. This will be the name of the search controller that we can then interface with the return of the `new Snap()` instance via the `getController` method. In snap-preact controllers are created only as needed (typically when a targeter has found a target), their creation is an asynchronous process. The `getController` method will return a promise that will resolve to the controller object requested immediately after its creation.\n\nFor example:\n\n```typescript\nconst snap = new Snap(config);\nsnap.getController('search').then((search) => {\n\t// do things with controller\n});\n```\n\nIf multiple controllers are needed at the same time, usage of the `getControllers` method is necessary. The `getControllers` method returns a promise that resolves to an array of controllers in the order requested by the parameters. The promise only resolves when ALL of the controllers have been created - if a controller is specified that is never created the promise will never resolve. For this reason this method should only be used when all controllers are needed simultaneously.\n\n```typescript\nconst snap = new Snap(config);\nsnap.getControllers('search', 'autocomplete').then(([search, autocomplete]) => {\n\t// do things with controllers\n});\n```\n\nWe also have a `targeters` array of DomTargeter `targeter` configuration objects. Each object defines an entry point on the page where a component will be rendered. \n\n`targeter.selector` specifies the DOM selector to target\n\n`targeter.component` specifies a function that returns a reference to the component to render at the target selector. \n\n`targeter.hideTarget` boolean that specifies if the target node should be hidden before the component is mounted and rendered. It is recommended to enable this to prevent flashy behaviour. \n\n`targeter.props` (optional) convenient way of passing additional props to the component, by default we pass `controller`\n\n`targeter.onTarget` (optional) callback that fires after a target is found\n\n`targeter.name` (optional) name to give the targeter for later reference using `controller.targeters`\n\nIn our example, we are rendering a `<Content>` component into `<div id=\"searchspring-content\">` and the `<Sidebar>` component into `<div id=\"searchspring-sidebar\">`\n\n\n\n### Autocomplete\n\nWe're also creating an Autocomplete controller in a similar function.\n\nOne notable thing to mention as you may see a duplicate `selector` property in both the `config` and `targeter`.\n\nThe `config.selector` specifies the `<input/>` element(s) to attach events to that respond to Autocomplete actions. This supports a selector that targets many elements. \n\nThe `targeter.selector` specifies the DOM node where the `targeter.component` will be rendered into.\n\nHowever in our example, since they are both the same value, the Autocomplete component will rendered as a child DOM node below the `<input/>` element that is currently focused. \n\n","image":"","sku":"sku/start-preact-config","id":"/start-preact-config","categoryHierarchy":"Getting Started > Preact > Configuration"}
{"name":"Controller Props","route":"/start-preact-controller-props","price":0,"description":"## Controller Props\n\nFor each targeted element, the corresponding controller that created it will be passed along to the component via the `controller` prop.\n\nLets go over our `Content` component. This is considered a root level component since it is being rendered onto the page using a targeter.\n\nWe'll want to create a `ControllerProvider` such that any subcomponents can have a reference to the controller via its props (as long as it is using the cooresponding `withController` consumer). The [@searchspring/snap-preact-components](https://github.com/searchspring/snap/tree/main/packages/snap-preact-components) package contains a `ControllerProvider` that we can utilize.\n\n\n```jsx\nimport { h, Fragment, Component } from 'preact';\nimport { observer } from 'mobx-react';\nimport { ControllerProvider } from '@searchspring/snap-preact-components';\nimport { Results, NoResults } from './Results';\n\n@observer\nexport class Content extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\n\t\treturn (\n\t\t\tcontroller.store.loaded && (\n\t\t\t\t<ControllerProvider controller={controller}>\n\t\t\t\t\t{\n\t\t\t\t\t\tcontroller.store.pagination.totalResults > 0 ? (<Results />) : (<NoResults />)\n\t\t\t\t\t}\n\t\t\t\t</ControllerProvider>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\nThen from any subcomponent such as the `Result` component in this example, we'll need to add the `@withController` decorator to access our controller via props. The `@withController` decorator should be placed before any other decorators.\n\n```jsx\nimport { h, Fragment, Component } from 'preact';\nimport { observer } from 'mobx-react';\nimport { withController, InlineBanner, Result } from '@searchspring/snap-preact-components';\n\n@withController\n@observer\nexport class Results extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst { results } = controller.store;\n\n\t\treturn (\n\t\t\t<ul class=\"ss__results\">\n\t\t\t\t{results.map((result) => (\n\t\t\t\t\t<li class=\"ss__result\" key={result.id}>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tbanner: <InlineBanner banner={result} />,\n\t\t\t\t\t\t}[result.type] || <Result result={result} />}\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n```\n\n\n## Reactivity \n\nEach controller has a `store` property. This is a MobX store created from the core [@searchspring/snap-store-mobx](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx) package and we will be rendering its data in our components. \n\nThe MobX store contains many observable properties that are reactive to changes such as user interaction (ie. collapsing a facet) or fetching data (ie. pagination). In order to react to these store changes the `@observer` decorator must be added to our components.\n\nIf you are creating functional components you would use this as a function wrapping your component.\n\n```jsx\nimport { h, Fragment } from 'preact';\nimport { observer } from 'mobx-react';\nimport { withController, InlineBanner, Result } from '@searchspring/snap-preact-components';\n\nexport const Results = observer(withController((props) => {\n\tconst controller = props.controller;\n\tconst { results } = controller.store;\n\n\treturn (\n\t\t<ul class=\"ss__results\">\n\t\t\t{results.map((result) => (\n\t\t\t\t<li class=\"ss__result\" key={result.id}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tbanner: <InlineBanner banner={result} />,\n\t\t\t\t\t}[result.type] || <Result result={result} />}\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t)\n}));\n```","image":"","sku":"sku/start-preact-controller-props","id":"/start-preact-controller-props","categoryHierarchy":"Getting Started > Preact > Controller Props"}
{"name":"Displaying Data","route":"/start-preact-displaying-data","price":0,"description":"## Displaying Data\n\nAt this point you are ready to start building components that render data from the controller's store. Here are a few common store properties and suggested usage in components. If you have used Snapfu to start with a template, these component examples will already be included.\n\n## All Stores\n\nAll of the following properties are available on all stores (Search, Autocomplete, Finder, & Recommendations)\n\n### controller.store.loaded\n\nThe `loaded` property will be true when the store has been loaded with data and is available to be consumed. This property is recommended to conditionally render a component.\n\n### controller.store.loading\n\nThe `loading` property will be true is a network request is in progress. This property is recommended to conditionally render a loading status (ie. spinning icon or loading bar)\n\n### controller.store.custom\n\nSee [`custom` property](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Abstract)\n\n## Search Store\n\nThe following properties are specific to a Search Store via a Search Controller.\n\n\n### SearchController.store.merchandising\n\nThe `merchandising` property contains merchandising redirects and banner content. It is recommended to utlizing the `<Banner/>` component from `@searchspring/snap-preact-components` to display the various merchandising banners.\n\nThe available banner types include: `header`, `banner`, `footer`, `left`, `inline`\n\nFor inline banners, the `<InlineBanner/>` component should be used instead. An example of this usage can be found in the 'store.results' section below.\n\n```jsx\nimport { Banner } from '@searchspring/snap-preact-components';\n\n@observer\nexport class Content extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst { store } = controller;\n\t\tconst { pagination, merchandising } = store;\n\n\t\treturn (\n\t\t\tstore.loaded && (\n\t\t\t\t<ControllerProvider controller={controller}>\n\t\t\t\t\t<div class=\"ss__content\">\n\t\t\t\t\t\t<Banner content={merchandising.content} type=\"header\" />\n\t\t\t\t\t\t<Banner content={merchandising.content} type=\"banner\" />\n\t\t\t\t\t\t<SearchHeader />\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpagination.totalResults > 0 \n\t\t\t\t\t\t\t? (<Results />) : \n\t\t\t\t\t\t\t(<NoResults />)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<Pagination />\n\t\t\t\t\t\t<Banner content={merchandising.content} type=\"footer\" />\n\t\t\t\t\t</div>\n\t\t\t\t</ControllerProvider>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\n### SearchController.store.search\n\nThe `search` property contains information about the current query, typically displayed above results and used in combination with the `store.pagination` data.\n\n```jsx\n@withController\n@observer\nexport class SearchHeader extends Component {\n\trender() {\n\t\tconst { controller } = this.props;\n\t\tconst { store } = controller;\n\t\tconst { pagination, search } = store;\n\t\tconst originalQuery = search.originalQuery;\n\n\t\treturn (\n\t\t\tstore.loaded && (\n\t\t\t\t<div class=\"ss__search-header\">\n\t\t\t\t\t{pagination.totalResults ? (\n\t\t\t\t\t\t<h1 class=\"ss__search-header--results\">\n\t\t\t\t\t\t\t{`Showing `}\n\t\t\t\t\t\t\t{pagination.multiplePages && <span class=\"ss__search-header__count-range\">{` ${pagination.begin} - ${pagination.end} of `}</span>}\n\t\t\t\t\t\t\t<span class=\"ss__search-header__count-total\">{pagination.totalResults}</span>\n\t\t\t\t\t\t\t{` result${pagination.totalResults == 1 ? '' : 's'}`}\n\t\t\t\t\t\t\t{search?.query && (\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t{` for `}\n\t\t\t\t\t\t\t\t\t<span class=\"ss__search-header__query\">\"{search.query.string}\"</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tpagination.totalResults === 0 && (\n\t\t\t\t\t\t\t<h1 class=\"ss__search-header--noresults\">\n\t\t\t\t\t\t\t\t{search?.query ? (\n\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\tNo results for <span class=\"ss__search-header__query\">\"{search.query.string}\"</span> found.\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<span>No results found.</span>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\n\t\t\t\t\t{originalQuery && (\n\t\t\t\t\t\t<div class=\"ss__oq\">\n\t\t\t\t\t\t\tSearch instead for \"<a href={originalQuery.url.href}>{originalQuery.string}</a>\"\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\n### SearchController.store.pagination\n\nThe `pagination` property is not only used for information about the current query, but also contains everything needed for handling pagination of a query that yields multiple pages. Invoking the `getPages` method will retrieve the specified number of page objects. For more about the pagination store, checkout the [Search Controller docs](#/package-controller-search).\n\n```jsx\n@withController\n@observer\nexport class Pagination extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst {\n\t\t\tstore: { pagination },\n\t\t} = controller;\n\t\tconst pages = pagination.getPages(5);\n\n\t\treturn (\n\t\t\t<div class=\"ss__pagination\">\n\t\t\t\t{pagination.previous && (\n\t\t\t\t\t<span class=\"ss__pagination__prev\">\n\t\t\t\t\t\t<a {...pagination.previous.url.link} title=\"Previous\">\n\t\t\t\t\t\t\tPrev\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\n\t\t\t\t{pages.map((page) => (\n\t\t\t\t\t<span key={page.key} class={`ss__pagination__page ${page.active ? 'ss__pagination__page--current' : ''}`}>\n\t\t\t\t\t\t<a {...page.url.link}>{page.number}</a>\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\n\t\t\t\t{pagination.next && (\n\t\t\t\t\t<span class=\"ss__pagination__next\">\n\t\t\t\t\t\t<a {...pagination.next.url.link} title=\"Next\">\n\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n### SearchController.store.sorting\n\nThe `sorting` property contains sorting options applicable to the current query. Typically used to render a `<select>` dropdown of sorting options. \n\nSorting settings can be configured in the [Searchspring Management Console](https://manage.searchspring.net/)\n\n```jsx\n@withController\n@observer\nexport class SortBy extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst { sorting } = controller.store;\n\n\t\treturn (\n\t\t\tsorting.length !== 0 && (\n\t\t\t\t<div class=\"ss__sorting\">\n\t\t\t\t\t<label for=\"ss__sort--select\">Sort</label>\n\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"ss__sort--select\"\n\t\t\t\t\t\tid=\"ss__sort--select\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tconst selectedOption = sorting.options.filter((option) => option.value == e.target.value).pop();\n\t\t\t\t\t\t\tselectedOption && selectedOption.url.go();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{sorting.options.map((option) => (\n\t\t\t\t\t\t\t<option value={option.value} selected={option.value === sorting.current.value}>\n\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\n### SearchController.store.results\n\nThe `results` property contains an array of result objects for the current page.\n\nEach result object contains the following notable properties:\n\n`result.type` will be 'product' or 'banner' (inline banner)\n\n`result.mappings.core` core attributes configured in the [Searchspring Management Console](https://manage.searchspring.net/)\n\n`result.attributes` remaining attributes\n\n`result.custom` an empty object that is not modified by core Snap packages. This is available for you to modify and store custom data to be rendered. See [`custom` property](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Abstract)\n\nNote: if you will be creating a custom Result component, be sure to include intellisuggest product click tracking. Available via `controller.track.product.click()` as seen in the example below. This should be invoked `onClick` or `onMouseDown` on each Result.\n\n```jsx\n@withController\n@observer\nexport class Results extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst { results } = controller.store;\n\n\t\treturn (\n\t\t\t<ul class=\"ss__results\">\n\t\t\t\t{results.map((result) => (\n\t\t\t\t\t<li class=\"ss__result\" key={result.id}>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tbanner: <InlineBanner banner={result} />,\n\t\t\t\t\t\t}[result.type] || <Result result={result} />}\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\n@withController\n@observer\nclass Result extends Component {\n\trender() {\n\t\tconst { result } = this.props;\n\t\tconst {\n\t\t\tattributes,\n\t\t\tmappings: { core },\n\t\t} = result;\n\t\tconst intellisuggest = (e) => controller.track.product.click(e, result);\n\n\t\treturn (\n\t\t\tresult && (\n\t\t\t\t<div>\n\t\t\t\t\t<a href={core.url} onClick={intellisuggest}>\n\t\t\t\t\t\t{core.name}\n\t\t\t\t\t</a>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Price value={core.price} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\n### SearchController.store.facets\n\nThe `facets` property contains an array of facet objects for the current query.\n\nEach result object contains the following notable properties:\n\n`facet.collapsed` facet collapse state. Facets can be configured to start collapsed by default in the [Searchspring Management Console](https://manage.searchspring.net/)\n\n`facet.toggleCollapse` a method that toggles the collapse state for this facet\n\n`facet.clear` a method to remove the facet if it is currently active\n\n`facet.label` the facet label to display (ie. Price, Size, Brand)\n\n`facet.field` the raw facet field name\n\n`facet.display` the facet display type - used to conditionally render different facet components. Available display types: `list` (default), `grid`, `palette`, `hierarchy`, `slider`. Facet display types can be configured in the [Searchspring Management Console](https://manage.searchspring.net/)\n\nThe example below displays a custom `FacetOptionsList` component for facets with a display type of `list`.\n\nThe `@searchspring/snap-preact-components` component library includes the following components that can be imported or used as a reference: `FacetListOptions`, `FacetGridOptions`, `FacetPaletteOptions`, `FacetHierarchyOptions`, `FacetSlider`\n\n`facet.type` the facet type - Available facet types: `range`, `value`, `range-buckets`. \n\nFacets that contain a `type` value of `range` will not contain any `values` as this is typically used as a Slider. Instead, the facet will include `range.low`, `range.high`, `active.low`, and `active.high` properties.\n\nFacets with a `type` value of `value` or `range-buckets` will contain the following properties:\n\n`facet.search.input` facet search within - setting this will dynamically filter the facet `values` array to only include values that match the `facet.search.input` substring\n\n`facet.overflow.setLimit` method to set the number of values to display before overflow occurs\n\n`facet.overflow.toggle` method to toggle overflow of a facet, typically invoked `onClick` event of a facet 'show more' button\n\n`facet.refinedValues` facet values that have been limitied if any overflow or search within is active; this should be used to render facet values from components\n\n`facet.values` original facet values - it is not recommended to directly render facet values using this in your components - `facet.refinedValues` should be used instead - however, if you are using an `afterStore` event to reference facet values, `facet.values` should be used\n\n```jsx\n@withController\n@observer\nexport class Facets extends Component {\n\trender() {\n\t\tconst { facets } = this.props.controller.store;\n\n\t\treturn (\n\t\t\tfacets.length !== 0 && (\n\t\t\t\t<div class=\"ss__facets\">\n\t\t\t\t\t{facets.map((facet) => (\n\t\t\t\t\t\t<Facet facet={facet} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t}\n}\n\n@withController\n@observer\nexport class Facet extends Component {\n\trender() {\n\t\tconst { facet } = this.props;\n\n\t\treturn (\n\t\t\tfacet && (\n\t\t\t\t<div class=\"ss__facet\">\n\t\t\t\t\t<h5\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tfacet.toggleCollapse();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{facet.label}\n\t\t\t\t\t</h5>\n\n\t\t\t\t\t<div class={`ss__facet--field-${facet.field} ss__facet--display-${facet.display} ${facet.collapsed ? 'ss__facet--collapsed' : ''}`}>\n\t\t\t\t\t\t<div class=\"collapsible-content__inner\">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\tgrid: <div>grid component</div>,\n\t\t\t\t\t\t\t\tpalette: <div>palette component</div>,\n\t\t\t\t\t\t\t\thierarchy: <div>hierarchy component</div>,\n\t\t\t\t\t\t\t\tslider: <FacetSlider facet={facet} />,\n\t\t\t\t\t\t\t}[facet.display] || <FacetOptionsList facet={facet} />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t);\n\t}\n}\n\n@observer\nclass FacetOptionsList extends Component {\n\trender() {\n\t\tconst facet = this.props.facet;\n\t\tconst values = facet.refinedValues;\n\n\t\treturn (\n\t\t\t<ul class=\"ss__facet-options-list\">\n\t\t\t\t{values.map((value) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li class={`ss__facet-options-list__option ${value.filtered ? 'ss__facet-options-list__option--active' : ''}`}>\n\t\t\t\t\t\t\t<a {...value.url.link} title={`Remove filter ${value.label}`}>\n\t\t\t\t\t\t\t\t{value.label}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n```\n\n\n### SearchController.store.filters\n\nThe `filters` property contains an array of filters that are currently applied to the query.\n\nTypically used to display a filter summary with options to remove filters.\n\n```jsx\n@withController\n@observer\nexport class FilterSummary extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst {\n\t\t\tstore: { filters },\n\t\t} = controller;\n\n\t\treturn (\n\t\t\tfilters.length !== 0 && (\n\t\t\t\t<ul class=\"ss__filters\">\n\t\t\t\t\t{filters.map((filter) => (\n\t\t\t\t\t\t<li class=\"ss__filters__filter\">\n\t\t\t\t\t\t\t<a {...filter.url.link} title={`Remove filter ${filter.label}`}>\n\t\t\t\t\t\t\t\t{filter.label}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)\n\t\t);\n\t}\n}\n```\n\n\n## Autocomplete Store\n\nIt is recommended to utlizing the `<Autocomplete/>` component from `@searchspring/snap-preact-components` to display Autocomplete.\n\nThe following properties are specific to an Autocomplete Store via an Autocomplete Controller.\n\n### AutocompleteController.store.merchandising\n\nSee `SearchController.store.merchandising` section above.\n\n### AutocompleteController.store.search\n\nThe `search` property contains information about the current query. However unlike SearchController.store.search, AutocompleteController.store.search does not contain a `didYouMean` query. \n\n\n### AutocompleteController.store.facets\n\nSee `SearchController.store.facets` section above.\n\nIn addition, each facet value will contain a `preview` method that should be invoked on the `onFocus` event of a facet value. This method will lock the current facets such that when the store is updated with the filtered results, the original facets do not get replaced with the new facets from the filtered query. \n\n### AutocompleteController.store.filters\n\nSee `SearchController.store.filters` section above.\n\n### AutocompleteController.store.results\n\nSee `SearchController.store.results` section above.\n\n### AutocompleteController.store.terms\n\nThe `terms` property contains an array of autocomplete terms that are relevant to the query. Each term contains a `preview` method that should be invoked on the `onFocus` event of a term value. This method will lock the current terms and unlock the previous facets (if changing terms with a facet filter applied) such that when the store is updated with the results for the new term, the original terms do not change.\n\n### AutocompleteController.store.trending\n\nThe `trending` property contains an array of trending `terms`. Trending terms are not relevant to the current query and are generated from collected reporting data. It is recommended to display trending terms as a starting point when the `<input/>` is focused and does not yet contain a value. Trending terms must be enabled via settings in the AutocompleteController config.\n\n\n### AutocompleteController.store.pagination\n\nSee `SearchController.store.pagination` section above.\n\n### AutocompleteController.store.sorting\n\nSee `SearchController.store.sorting` section above.\n","image":"","sku":"sku/start-preact-displaying-data","id":"/start-preact-displaying-data","categoryHierarchy":"Getting Started > Preact > Displaying Data"}
{"name":"Events","route":"/start-preact-events","price":0,"description":"## Snap Events\n\nLets look at how to tie into various Snap events by utilizing middleware and plugins. To learn more details about middleware, and execution order of it, checkout the core [@searchspring/snap-event-manager](https://github.com/searchspring/snap/tree/main/packages/snap-event-manager) package.\n\nThe Snap instance that we create will return a `controllers` object with all of the requested controllers specified in the config. \n\nThere are two ways we can attach events to our controllers. Using the config, or directly on the controller. \n\n\n## Config Middleware\n\nOn the config we can specify middleware via `on` or `plugins` attributes.\n\n### middleware\n\nThe `middleware` property is an object that has event name(s) as the key and and array of the middleware functions as the values.\n\nThe value can be a single function or an array of functions if attaching multiple middleware to a single event. \n\n```typescript\nconst initMiddleware = async(eventData, next) => {\n\tconsole.log(\"runs on init\", eventData);\n\tawait next();\n}\n\nconst afterSearchMiddlewareOne = async(eventData, next) => {\n\tconsole.log(\"runs on afterSearch\", eventData);\n\tawait next();\n}\n\nconst afterSearchMiddlewareTwo = async(eventData, next) => {\n\tconsole.log(\"runs on afterSearch, after afterSearchMiddlewareOne\", eventData);\n\tawait next();\n}\n\nconst config = {\n\tclient: {\n\t\tglobals: {\n\t\t\tsiteId: 'xxxxxx',\n\t\t},\n\t},\n\tcontrollers: {\n\t\tsearch: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'search',\n\t\t\t\t\tmiddleware: {\n\t\t\t\t\t\tinit: initMiddleware,\n\t\t\t\t\t\tafterSearch: [\n\t\t\t\t\t\t\tafterSearchMiddlewareOne,\n\t\t\t\t\t\t\tafterSearchMiddlewareTwo\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n\n### plugins\n\nThe `plugins` property is an array of arrays of functions and optional function parameters that are used to attach functionality to controllers. Parameters can optionally be passed to the functions as shown with the `paramPlugin` below:\n\n```typescript\nconst plugin = (controller) => {\n\tcontroller.on('init', async(eventData, next) => {\n\t\tconsole.log(\"runs on init\", eventData);\n\t\tawait next();\n\t});\n}\n\nconst paramPlugin = (controller, ...params) => {\n\tcontroller.on('afterStore', async(eventData, next) => {\n\t\tconsole.log(\"runs on afterStore\", eventData, params);\n\t\tawait next();\n\t});\n}\n\nconst config = {\n\tclient: {\n\t\tglobals: {\n\t\t\tsiteId: 'xxxxxx',\n\t\t},\n\t},\n\tcontrollers: {\n\t\tsearch: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'search',\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\t[ plugin ],\n\t\t\t\t\t\t[ paramPlugin, 'param1', 'param2' ]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n## Controller Events\n\nOn the controller we can attach middleware via `on` or `plugin` methods.\n\nWe can attach events to our controllers after they have been created by a Snap instance via the `getController` method. This method returns a promise that resolves to the requested controller object.\n\nLets use the `config` from above. Since our search controller has an `id` of `'search'`, we can reference it as follows:\n\n```typescript\nconst snap = new Snap(config);\nsnap.getController('search').then((search) => {\n\tconsole.log(\"Search Controller: \", search);\n});\n```\n\nWe can now attach middleware events in the following methods:\n\n### controller.on\n\n```typescript\nsnap.getController('search').then((search) => {\n\tsearch.on('afterSearch', async(eventData, next) => {\n\t\tconsole.log(\"runs on afterSearch\", eventData);\n\t\tawait next();\n\t});\n});\n```\n\n### controller.plugin\n\n```typescript\nsnap.getController('search').then((search) => {\n\tsearch.plugin((controller) => {\n\t\tcontroller.on('afterStore', async(eventData, next) => {\n\t\t\tconsole.log(\"runs on afterStore\", eventData);\n\t\t\tawait next();\n\t\t});\n\t});\n});\n\n```\n\nNext we will attach a plugin that takes additional parameters. This could be useful for sending contextual data into your plugin.\n\n```typescript\nconst paramPlugin = (controller, ...params) => {\n\t// params = [ 'param1', 'param2' ]\n\tcontroller.on('afterStore', async(eventData, next) => {\n\t\tconsole.log(\"runs on afterStore\", eventData);\n\t\tawait next();\n\t});\n}\n\nsnap.getController('search').then((search) => {\n\tsearch.plugin(paramPlugin, 'param1', 'param2');\n});\n```\n\n## Available Events\n\n## Search Events\n\n### init\n- Called with `eventData` = { controller }\n- Called automatically with first `search()` of the controller or invoked by a call to the `init` controller method\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Invokes `window.location.replace()` if API response contains merchandising redirects AND if `config.settings.redirects.merchandising = true` (default)\n- Invokes `window.location.replace()` to redirect to product detail page if API response returned a single product AND `config.settings.redirects.singleResult = true` (default)\n- Sets `controller.store.loading = false`\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in Mobx store\n\n### track.product.click\n- Called with `eventData` = { controller, event, result, trackEvent } \n- Always invoked after `track.product.click()` method has been invoked\n- Allows for adding custom product click events (ie. Google Analytics)\n\n\n## Autocomplete Events\n\n### init\n- Called with `eventData` = { controller }\n- Called automatically with first `search()` of the controller or invoked by a call to the `init` controller method\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n- Cancels search if input doesn't match current urlManager input state\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in Mobx store\n\n### focusChange\n- Called with `eventData` = { controller }\n- Invoked when a new input element has been focused\n\n\n## Finder Events\n\n### init\n- Called with `eventData` = { controller }\n- Called automatically with first `search()` of the controller or invoked by a call to the `init` controller method\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in Mobx store\n- no operation\n\n## Recommendation Events\n\n### init\n- Called with `eventData` = { controller }\n- Called automatically with first `search()` of the controller or invoked by a call to the `init` controller method\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n- Cancels search if input doesn't match current urlManager input state\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in Mobx store\n\n### track.product.click\n- Called with `eventData` = { controller, event, result, trackEvent } \n- Always invoked after `track.product.click()` method has been invoked\n- Allows for adding custom product click events (ie. Google Analytics)\n\n### track.product.impression\n- Called with `eventData` = { controller, result, trackEvent } \n- Always invoked after `track.product.impression()` method has been invoked\n\n### track.product.render\n- Called with `eventData` = { controller, result, trackEvent } \n- Always invoked after `track.product.render()` method has been invoked\n\n### track.click\n- Called with `eventData` = { controller, event, trackEvent } \n- Always invoked after `track.click()` method has been invoked\n\n### track.impression\n- Called with `eventData` = { controller, trackEvent } \n- Always invoked after `track.impression()` method has been invoked\n\n### track.render\n- Called with `eventData` = { controller, trackEvent } \n- Always invoked after `track.render()` method has been invoked\n","image":"","sku":"sku/start-preact-events","id":"/start-preact-events","categoryHierarchy":"Getting Started > Preact > Events"}
{"name":"Advanced","route":"/advanced","price":0,"description":"## Advanced Snap Usage\n\nIf a controller or service is needed with configuration outside of what is permited by the Snap abstraction layer, one can be created by following the docs in this section.\n\nIt is recommended to use the Snap abstraction layer packages whenever possible - these packages quickly create Snap controllers using a config based interface. Underneath the hood the Snap abstraction packages utilize all of the core Snap packages that will be outlined here.\n\n### Snap abstraction Packages\n[@searchspring/snap-preact](https://github.com/searchspring/snap/tree/main/packages/snap-preact)","image":"","sku":"sku/advanced","id":"/advanced","categoryHierarchy":"Getting Started > Advanced"}
{"name":"Installation","route":"/advanced-installation","price":0,"description":"## Installation\n\n```shell\nnpm install --save @searchspring/snap-client @searchspring/snap-url-manager @searchspring/snap-event-manager @searchspring/snap-profiler @searchspring/snap-logger @searchspring/snap-tracker @searchspring/snap-toolbox @searchspring/snap-controller @searchspring/snap-store-mobx\n```\n\n```typescript\nimport { Client } from '@searchspring/snap-client';\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\nimport { DomTargeter } from '@searchspring/snap-toolbox';\nimport { SearchController, AutocompleteController, FinderController } from '@searchspring/snap-controller';\nimport { SearchStore, AutocompleteStore, FinderStore } from '@searchspring/snap-store-mobx';\n```\n","image":"","sku":"sku/advanced-installation","id":"/advanced-installation","categoryHierarchy":"Getting Started > Advanced > Installation"}
{"name":"Client","route":"/advanced-client","price":0,"description":"## Snap Client\nNext, let's define Snap Client as it is required for all Snap controller instances. Typically the Client is shared across all Snap controllers.\n\n```typescript\nconst client = new Client(globals);\n```\n\nThe Snap Client requires `ClientGlobals` for instantiation.\n\n### Global Config\nThe `ClientGlobals` object can be used to set client search parameters that will apply to all requests made with the client (and subsequently any controllers using the client as a service). Typically only the `siteId` will be set here, but could be used for setting globally utilized background filters and/or sorts as well.\n\nYou can find your Searchspring `siteId` in the [Searchspring Management Console](https://manage.searchspring.net) and define it directly:\n\n```typescript\nconst globals = {\n\tsiteId: 'a1b2c3',\n};\n```\n","image":"","sku":"sku/advanced-client","id":"/advanced-client","categoryHierarchy":"Getting Started > Advanced > Client"}
{"name":"Tracker","route":"/advanced-tracker","price":0,"description":"## Snap Tracker\nThe Snap Tracker, like the Client, is required for all Snap controller instances and is shared across all Snap controllers.\n\n```typescript\nconst tracker = new Tracker(globals);\n```\n\nThe Snap Tracker requires `TrackerGlobals` for instantiation.\n\n### Global Config\nThe `TrackerGlobals` object requires only a `siteId`.\n\nYou can find your Searchspring `siteId` in the [Searchspring Management Console](https://manage.searchspring.net) and define it directly:\n\n```typescript\nconst globals = {\n\tsiteId: 'a1b2c3',\n};\n```","image":"","sku":"sku/advanced-tracker","id":"/advanced-tracker","categoryHierarchy":"Getting Started > Advanced > Tracker"}
{"name":"Search","route":"/advanced-search","price":0,"description":"<h2 id=\"SearchTypicalUsage\">Search</h2>\n\nTo set up Search using Snap, we'll need to create a `SearchController` instance, which requires `SearchControllerConfig` and `ControllerServices` objects to instantiate. For more details see the [`SearchController docs`](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Search).\n\n### Config (SearchControllerConfig)\nLets define a `SearchControllerConfig` object:\n```typescript\nconst searchConfig = {\n\tid: 'search',\n\tglobals: {\n\t\tfilters: [],\n\t},\n\tsettings: {\n\t\tredirects: {\n\t\t\tmerchandising: true,\n\t\t\tsingleResult: true,\n\t\t},\n\t\tfacets: {\n\t\t\ttrim: true,\n\t\t}\n\t},\n};\n```\n\n\n### Category Pages / Background Filters\nOptionally, apply filters from the page's content to the SearchControllerConfig `globals.filters` property. The controller globals are similar to the client globals in that all search requests will include the parameters specified. This can be used to configure category/brand pages, or other special filtering to apply to the current page's search requests.\n\nFor example, if a global variable `snapConfig` exists on the page (must be defined prior to our Snap script):\n\n```html\n<script>\n\tconst snapConfig = {\n\t\tshopper: {\n\t\t\tid: 'shopper@emailprovider.com'\n\t\t},\n\t\tcategory: {\n\t\t\tname: 'Shirts',\n\t\t\tvalue: 'Clothing/Shirts'\n\t\t}\n\t}\n</script>\n```\n\n```typescript\nif (snapConfig?.category) {\n\tsearchConfig.globals.filters.push({\n\t\ttype: 'value',\n\t\tbackground: true,\n\t\tfield: 'categories_hierarchy',\n\t\tvalue: snapConfig.category.value,\n\t});\n}\n```\n\n\n### ControllerServices\nThe `ControllerServices` object contains all of the controller's dependencies.\n\nNote that the `UrlManager` is created separately because it is a shared dependency; it is also a service needed for the `SearchStore`. The `UrlManager` is utilizing the `UrlTranslator` which will use `'q'` as the default URL query parameter. This can be overwritten to use `'search_query'` by providing a `parameters.core.query` [config](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url) such as in this example:\n\n```typescript\nconst searchUrlManager = new UrlManager(new UrlTranslator({ parameters: core: { query: { name: 'search_query' } } }), reactLinker);\nconst searchControllerServices = {\n\tclient,\n\tstore: new SearchStore(searchConfig, { urlManager, searchUrlManager }),\n\turlManager: searchUrlManager,\n\teventManager: new EventManager(),\n\tprofiler: new Profiler(),\n\tlogger: new Logger(),\n\ttracker\n}\n```\n\nNote: `client` and `tracker` are shared services and are defined in previous steps.\n\n### Instantiation\nWith the `SearchControllerConfig` and `ControllerServices` defined, we can now create an instance of a `SearchController`.\n\n```typescript\nconst searchController = new SearchController(searchConfig, searchControllerServices);\n```\n\n<h3 id=\"SearchMiddleware\">Middleware</h3>\n\nNow that our `SearchController` is instantiated (using `searchController` variable), we can optionally attach middleware to hook into various events. There are two ways of doing this, using the Controller's `on` or `plugin` methods.\n\n#### via `on` method:\n\n```typescript\nsearchController.on('afterStore', async ({ controller }, next) => {\n\tcontroller.log.debug('store', controller.store.toJSON());\n\tawait next();\n})\n```\n\n#### via `plugin` method (to attach groups of middleware):\n\n```typescript\nconst middleware = (controller) => {\n\tcontroller.on('init', async({ controller }, next) => {\n\t\tcontroller.log.imageText({\n\t\t\turl: 'https://searchspring.com/wp-content/themes/SearchSpring-Theme/dist/images/favicons/favicon.svg',\n\t\t\ttext: 'snap integration initialized',\n\t\t\tstyle: `color: ${controller.log.colors.indigo}; font-weight: bold;`,\n\t\t});\n\n\t\tawait next();\n\t});\n\t// log the store\n\tcontroller.on('afterStore', async({ controller }, next) => {\n\t\tcontroller.log.debug('store', controller.store.toJSON());\n\t\tawait next();\n\t});\n};\n\nsearchController.plugin(middleware);\n```\n\n<h3 id=\"SearchDomTargeter\">DomTargeter</h3>\n\n`DomTargeter` is a utility for rending components in specified DOM targets. The following example shows how to use the DomTargeter with a `SearchController` and passing that controller as a prop to a `Content` component (not shown). It uses the Preact render function to render the component after the target has been found.\n\nFor further usage and documentation, see [DomTargeter](https://github.com/searchspring/snap/tree/main/packages/snap-toolbox/src/DomTargeter).\n\n```typescript\nconst contentTarget = new DomTargeter(\n\t[\n\t\t{\n\t\t\tselector: '#searchspring-content', // CSS selector for element to render component into\n\t\t},\n\t],\n\t(target, elem) => {\n\t\t// run search after finding target\n\t\tcontroller.search();\n\t\trender(<Content controller={searchController} />, elem);\n\t}\n);\n```\n\n### Initialize\nOptionally initialize the controller by invoking its `init` method. This will subscribe to any `UrlManager` state changes and fire the `init` event and any attached middleware. This will happen automatically when invoking the `search` method for the first time.\n\n```typescript\nsearchController.init();\n```\n\n### Perform Search\n\nInvoking the SearchController `search` method will perform a search. In this example, this is being done after the Domtargeter finds the element selector `#searchspring-content`. Simultaneously the `Content` component will be rendered into the element selector.\n","image":"","sku":"sku/advanced-search","id":"/advanced-search","categoryHierarchy":"Getting Started > Advanced > Search"}
{"name":"Autocomplete","route":"/advanced-autocomplete","price":0,"description":"## Autocomplete\nTo set up Autocomplete using Snap, we'll need to create a `AutocompleteController` instance, which requires `AutocompleteControllerConfig` and `ControllerServices` objects to instantiate. For more details see the [`AutocompleteController docs`](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Autocomplete).\n\n### Config (AutocompleteControllerConfig)\nLets define an `AutocompleteControllerConfig` object:\n\n```typescript\nconst autocompleteConfig = {\n\tid: 'autocomplete',\n\tselector: '#search_query',\n\tglobals: {\n\t\tsuggestions: {\n\t\t\tcount: 4,\n\t\t},\n\t\tpagination: {\n\t\t\tpageSize: 6,\n\t\t},\n\t},\n\tsettings: {\n\t\tinitializeFromUrl: true,\n\t\tsyncInputs: false,\n\t\tfacets: {\n\t\t\ttrim: true\n\t\t},\n\t},\n}\n```\n\n### Autocomplete Controller Services\nThe `ControllerServices` object contains all of the controller's dependencies. Note the difference between SearchController's ControllerServices is the different store. Here we are using `AutocompleteStore`\n\nNote that the `UrlManager` is utilizing the `UrlTranslator` which will use `'q'` as the URL query parameter. This can be overwritten to use `'search_query'` by providing a by providing a `parameters.core.query` [config](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url) such as in this example:\n\n```typescript\nconst autocompleteUrlManager = new UrlManager(new UrlTranslator({ parameters: core: { query: { name: 'search_query' } } }), reactLinker).detach();\nconst autocompleteControllerServices = {\n\tclient,\n\tstore: new AutocompleteStore(autocompleteConfig, { urlManager: autocompleteUrlManager }),\n\turlManager: new UrlManager(new UrlTranslator({ queryParameter: 'search_query' }), reactLinker),\n\teventManager: new EventManager(),\n\tprofiler: new Profiler(),\n\tlogger: new Logger(),\n\ttracker\n}\n```\n\nThe translator type should be the same between Autocomplete and Search Controllers in order for compatible URLs to be generated.\n\nNote: `client` and `tracker` are shared services and are defined in previous steps.\n\n### Instantiation\nWith the `AutocompleteControllerConfig` and `ControllerServices` defined, we can now create an instance of a `AutocompleteController`.\n\n```typescript\nconst autocompleteController = new AutocompleteController(autocompleteConfig, autocompleteControllerServices);\n```\n\n### Middleware\nAutocomplete supports middleware to hook into various events using `plugin` and `on` methods. See [Search Middlewear](https://github.com/searchspring/snap/blob/main/docs/SEARCH.md) for usage\n\n\n### DomTargeter\nSimilar to Search DomTargeter, the following example shows how to use the DomTargeter with an `AutocompleteController` and passing that controller as a prop to a `Autocomplete` component (not shown). After the target has been found it injects a new element ('.ss-ac-target') and then uses the Preact render function to render the component into the newly created element.\n\nFor further usage and documentation, see [DomTargeter](https://github.com/searchspring/snap/tree/main/packages/snap-toolbox/src/DomTargeter).\n\n```typescript\nnew DomTargeter(\n\t[\n\t\t{\n\t\t\tselector: autocompleteController.config.selector, // input element that we are binding to\n\t\t\tinject: {\n\t\t\t\taction: 'after', // injecting an element after the input\n\t\t\t\telement: (target, origElement) => {\n\t\t\t\t\tconst acContainer = document.createElement('div');\n\t\t\t\t\tacContainer.id = 'ss-ac-target';\n\t\t\t\t\tacContainer.addEventListener('click', (e) => {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t});\n\t\t\t\t\treturn acContainer;\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\t(target, injectedElem, inputElem) => {\n\t\t// bind to config selector\n\t\tautocompleteController.bind();\n\t\trender(<Autocomplete controller={autocompleteController} input={inputElem} />, injectedElem);\n\t}\n);\n```\n\n### Initialize\nOptionally initialize the controller by invoking its `init` method. This will subscribe to any `UrlManager` state changes and fire the `init` event and any attached middleware. This will happen automatically when invoking the `search` method for the first time.\n\n```typescript\nautocompleteController.init();\n```\n\n### Bind inputs\n\nInvoking the AutocompleteController `bind` method will bind the controller instance to all selector elements found. In this example, this occurs in the DomTargeter callback method (`onTarget`) when a selector is found.\n","image":"","sku":"sku/advanced-autocomplete","id":"/advanced-autocomplete","categoryHierarchy":"Getting Started > Advanced > Autocomplete"}
{"name":"Finder","route":"/advanced-finder","price":0,"description":"## Finder\nTo set up a product Finder using Snap, we'll need to create a `FinderController` instance, which requires `FinderControllerConfig` and `ControllerServices` objects to instantiate. For more details see the [`FinderController docs`](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Finder).\n\n### Config (FinderControllerConfig)\nThere are two types of Finder configurations, a Hierarchy and Non-Hierarchy. The difference is the type of field being used and how it is configured in the Searchspring Management Console.\n\n#### Hierarchy Config\nTo use a Hierarchy configuration, ensure that the config's `fields` array contain a single entry, and that the field is of type `hierarchy` in the Searchspring Management Console. Here is an example of a Hierarchy `FinderControllerConfig` object:\n\n```typescript\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search'\n\tfields: [{\n\t\tfield: 'ss_tire',\n\t\tlabel: 'Wheel Finder',\n\t\tlevels: ['Year', 'Make', 'Model', 'Wheel Size']\n\t}]\n}\n```\n\n#### Non-Hierarchy Config\nTo use a Non-Hierarchy configuration, multiple `fields` are specified. All fields must have a `type` or `value` and NOT `hierarchy`. Facet types can be configured in the Searchspring Management Console. Here is an example of a Non-Hierarchy `FinderControllerConfig` object:\n\n```typescript\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search',\n\tfields: [\n\t\t{ \n\t\t\tfield: 'custom_wheel_size',\n\t\t\tlabel: 'Size'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_wheel_width',\n\t\t\tlabel: 'Width'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_wheel_bolt_pattern',\n\t\t\tlabel: 'Bolt Pattern'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_color',\n\t\t\tlabel: 'Color'\n\t\t}\n\t]\n};\n```\n\nNote: When using fields that are not of hierarchy type, `levels` are not required.\n\n### ControllerServices\nThe `ControllerServices` object contains all of the controller's dependencies.\n\nNote that the `UrlManager` is created separately because it is a shared dependency; it is also a service needed for the `FinderStore`. The `UrlManager` is utilizing the `UrlTranslator` which will use `'q'` as the default URL query parameter. This can be overwritten to use `'search_query'` by providing a `parameters.core.query` [config](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url) such as in this example:\n\n```typescript\nconst finderUrlManager = new UrlManager(new UrlTranslator({ parameters: core: { query: { name: 'search_query' } } }), reactLinker).detach(0);\nconst finderControllerServices = {\n\tclient,\n\tstore: new FinderStore(finderConfig, { urlManager: finderUrlManager }),\n\turlManager: finderUrlManager,\n\teventManager: new EventManager(),\n\tprofiler: new Profiler(),\n\tlogger: new Logger(),\n\ttracker\n}\n```\n\nNote: `client` and `tracker` are shared services and are defined in previous steps.\n\n### Instantiation\nWith the `FinderControllerConfig` and `ControllerServices` defined, we can now create an instance of a `FinderController`.\n\n```typescript\nconst finderController = new FinderController(finderConfig, finderControllerServices);\n```\n\n### Middleware\nFinders support middleware to hook into various events using `plugin` and `on` methods. See [Search Middlewear](https://github.com/searchspring/snap/blob/main/docs/SEARCH.md) for usage.\n\n\n### DomTargeter\nSimilar to Search DomTargeter, the following example shows how to use the DomTargeter with a `FinderController` and passing that controller as a prop to a `Finder` UI component (not shown). It uses the Preact render function to render the component after the target has been found.\n\nFor further usage and documentation, see [DomTargeter](https://github.com/searchspring/snap/tree/main/packages/snap-toolbox/src/DomTargeter).\n\n```typescript\nconst finderTarget = new DomTargeter(\n\t[\n\t\t{\n\t\t\tselector: '#finder-target-selector', // CSS selector for element to render component into\n\t\t},\n\t],\n\tasync (target, elem) => {\n\t\t// await search after target element is found\n\t\tawait finderController.search();\n\n\t\trender(<Finder controller={finderController} />, elem);\n\t}\n);\n```\n\n### Initialize\nOptionally initialize the controller by invoking its `init` method. This will subscribe to any `UrlManager` state changes and fire the `init` event and any attached middleware. This will happen automatically when invoking the `search` method for the first time.\n\n```typescript\nfinderController.init();\n```\n\n### Search\nAfter the controller has been initialized, the search method must be invoked for the finder to fetch its initial data. In the example above, this is being invoked in the DomTargeter.\n\n```typescript\nfinderController.search();\n```\n\n### Find\nAfter selection(s) have been made, the user will click on a 'Find' button. This click event should invoke the `find` method of the Finder controller which will redirect to the specified `url` in the config with it's selection parameters attached.\n\n```typescript\nfinderController.find();\n```\n","image":"","sku":"sku/advanced-finder","id":"/advanced-finder","categoryHierarchy":"Getting Started > Advanced > Finder"}
{"name":"Integration","route":"/advanced-integration","price":0,"description":"## Integration\n\nWhen development has concluded the bundle is ready to be placed on a development or production site.\n\n```html\n<script src=\"https://snapui.searchspring.io/[your_site_id]/bundle.js\"></script>\n```\n\nThe bundle should be included in the `<head>` tag, ideally near the top of the node, and should not have a 'defer' or 'async' attribute. This is important for to start fetching results as soon as possible and to hide targeted elements that contain content - this prevents a flash of content replacement.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n\n\t<meta name=\"referrer\" content=\"no-referrer-when-downgrade\">\n\t<script src=\"https://snapui.searchspring.io/[your_site_id]/bundle.js\"></script>\n</head>\n<body>\n\t<div id=\"searchspring-content\">content that would show</div>\n</body>\n</html>\n\n```\n\nThe \"referrer\" `meta` tag is necessary for enabling branch overrides in the URL (?branch=branchname). This functionality is only currently possible with Searchspring maintained Snap repositories.\n```\n<meta name=\"referrer\" content=\"no-referrer-when-downgrade\">\n```","image":"","sku":"sku/advanced-integration","id":"/advanced-integration","categoryHierarchy":"Getting Started > Integration"}
{"name":"Troubleshooting","route":"/troubleshooting","price":0,"description":"## Troubleshooting\n\nHere are a few common gotchas. If you do not find what you're looking for here or have a question, we invite you to start a [discussion](https://github.com/searchspring/snap/discussions) or [report an issue](https://github.com/searchspring/snap/issues)\n\n### Target element is not present prior to Snap instantiation.\nIf you attempt to render a snap component using a DomTargeter before the target element exists on the page, the target will not be found and the rendering inside of the `onTarget` callback will not occur. Re-targetting can be manually invoked in these cases. \n\n```typescript\nsearchPageTargeter.retarget();\n```\n\n### Some middleware isn't executing at all\nMost likely middleware that was attached prior to the one failing to execute failed to call the `await next()` function. This is required to allow other middleware to process the event data.","image":"","sku":"sku/troubleshooting","id":"/troubleshooting","categoryHierarchy":"Getting Started > Troubleshooting"}
{"name":"Preact","route":"/package-preact","price":0,"description":"# Snap Preact\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-preact\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-preact.svg?style=flat\"></a>\n\nSnap Preact is an abstraction layer that provides a config based interface for creating a Searchspring integration quickly.\n\n\n## Installation\n\nTo install the `snap-preact` package and it's dependencies:\n\n```bash\nnpm install --save @searchspring/snap-preact\n```\n\n## Instantiation\n\n```typescript\nimport { Snap } from '@searchspring/snap-preact';\n\nconst snap = new Snap(config);\n```\n\n## Configuration\nA configuration object provided to Snap will determin the services that will be created. \n\nFull example:\n\n```typescript\nconst config = {\n\turl: {\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'search' },\n\t\t\t},\n\t\t},\n\t},\n\tclient: {\n\t\tglobals: {\n\t\t\tsiteId: 'xxxxxx',\n\t\t},\n\t},\n\tcontrollers: {\n\t\tsearch: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'search',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tredirects: {\n\t\t\t\t\t\t\tmerchandising: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-content',\n\t\t\t\t\t\tcomponent: () => Content,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-sidebar',\n\t\t\t\t\t\tcomponent: () => Sidebar,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tautocomplete: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'autocomplete',\n\t\t\t\t\tselector: 'input.searchspring-ac',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\ttrending: {\n\t\t\t\t\t\t\tlimit: 5,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: 'input.searchspring-ac',\n\t\t\t\t\t\tcomponent: () => Autocomplete,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n### config.client\nA single client instance will be created and shared across all services using the provided config. \n\nSee [@searchspring/snap-client](https://github.com/searchspring/snap/tree/main/packages/snap-client) documentation for full client config options.\n\n```typescript\nconst config = {\n\tclient: {\n\t\tglobals: {\n\t\t\tsiteId: 'xxxxxx'\n\t\t}\n\t}\n}\n```\n\n### config.instantiators\nThe `instantiators` object must be defined if any Recommendation controllers have also been defined via `config.controllers.recommendation`\n\n```typescript\nconst config = {\n\tinstantiators: {\n\t\trecommendation: {\n\t\t\tcomponents: {\n\t\t\t\tStandard: () => Standard\n\t\t\t},\n\t\t\tconfig: {\n\t\t\t\tbranch: BRANCHNAME,\n\t\t\t\tbatched: true\n\t\t\t},\n\t\t\tselector: '',\n\t\t\tservices: {}\n\t\t}\n\t},\n\tcontrollers: {\n\t\trecommendation: []\n\t}\n}\n```\n\n`recommendation.components` - required mapping of recommendation components.\n\n`recommendation.config.branch` - required current git branch name. Defined via webpack during bundle build:\n\n```typescript\nconst webpack = require('webpack');\nconst childProcess = require('child_process');\nconst branchName = childProcess.execSync('git rev-parse --abbrev-ref HEAD').toString().trim();\n\nmodule.exports = {\n\tplugins: [\n\t\tnew webpack.DefinePlugin({\n\t\t\tBRANCHNAME: `\"${branchName}\"`,\n\t\t}),\n\t],\n}\n```\n\n`recommendation.config.batched` - optional boolean (default: `true`) to batch multiple recommendations into a single network request\n\n`recommendation.selector` - optional selector to target recommendation instances if using a non-standard installation. Default selector: `script[type=\"searchspring/recommend\"]`\n\n`recommendation.services` - optional object of `ControllerServices` \n\n\n\n### config.url\nThe `url` object contains the config provided to each [`UrlTranslator`](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url) created by Snap Preact.\n\n```typescript\nconst config = {\n\turl: {\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'search' },\n\t\t\t\tpage: { name: 'p' }\n\t\t\t},\n\t\t},\n\t},\n}\n```\n\n### config.controllers\nThe `controllers` object contains a list of controllers to create for each controller type. \n\nAvailable controllers:\n\n- [SearchController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Search) \n- [AutocompleteController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Autocomplete)\n- [FinderController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Finder)\n- [RecommendationController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Recommendation)\n\n```typescript\nconst config = {\n\tcontrollers: {\n\t\tsearch: [],\n\t\tautocomplete: [],\n\t\tfinder: [],\n\t\trecommendation: [],\n\t}\n}\n```\n\nEach array entry contains an object with the following properties:\n\n`config` - required controller config for the corresponding controller. See Controller specific documentation for all available configuration options.\n\n`targets` - optional array of Target objects. Targets thats have been found will have the corresponding controller provided to the target component `controller` prop and the controller's `search` method invoked.\n\n```typescript\ntype ExtendedTarget = {\n\tselector: string;\n\tinject?: {\n\t\taction: 'before' | 'after' | 'append' | 'prepend' | 'replace';\n\t\telement: Element | ((target: Target, element: Element) => Element);\n\t};\n\thideTarget?: boolean;\n\temptyTarget?: boolean;\n\tname?: string;\n\tcomponent?: () => Promise<RootComponent> | RootComponent;\n\tprops?: unknown;  // additional props to pass to the component\n\tonTarget?: OnTarget;  // additional scripts to execute when target is found\n\tprefetch?: boolean;  // run controller search before finding targets\n}\n```\n\n`services` - optional object of `ControllerServices` to be used for this controller in place of the default services\n\n`url` - optional `UrlTranslator` config object to be used with the `UrlManager` for this controller\n\n\nAn example creating a SearchController:\n\n```typescript\nconst config = {\n\tcontrollers: {\n\t\tsearch: [\n\t\t\t{\n\t\t\t\tconfig: {\n\t\t\t\t\tid: 'search',\n\t\t\t\t},\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-content',\n\t\t\t\t\t\tcomponent: () => Content,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tselector: '#searchspring-sidebar',\n\t\t\t\t\t\tcomponent: () => Sidebar,\n\t\t\t\t\t\thideTarget: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tservices: {}\n\t\t\t}\n\t\t]\n\t}\n}\n```\nThe controller config `id` will be the name of the controller that you will then interface from the return of creating the `new Snap()` instance via the `controllers` object. \n\nFor example, if using the `config` example above:\n\n```typescript\nconst snap = new Snap(config);\nconst { search } = snap.controllers;\n```\n\n## properties\n\nAfter instantiating an instance of Snap, the following properties can be accessed. \n\n### config\nA reference to the config that was provided.\n\n### logger\nA reference to the shared [@searchspring/snap-logger](https://github.com/searchspring/snap/tree/main/packages/snap-logger) instance used by each controller.\n\n### client\nA reference to the shared [@searchspring/snap-client](https://github.com/searchspring/snap/tree/main/packages/snap-client) instance used by each controller.\n\n### tracker\nA reference to the shared [@searchspring/snap-tracker](https://github.com/searchspring/snap/tree/main/packages/snap-tracker) instance used by each controller.\n\n### controllers\nAn object containing all controllers that have been created. \n\n\n### recommendations\nA reference to `RecommendationInstantiator` instance if creating recommendation instances.\n\n\n## polyfills\n\nSnap Preact provides various polyfills to ensure legacy browser support.\n\n```typescript\nimport { polyfills } from '@searchspring/snap-preact';\n\npolyfills.then(() => {\n\timport('./index');\n})\n```\n","image":"","sku":"sku/package-preact","id":"/package-preact","categoryHierarchy":"Packages > Preact"}
{"name":"Instantiators","route":"/package-preact-instantiator","price":0,"description":"# Instantiators\n\n## RecommendationInstantiator\nThe `RecommendationInstantiator` class handles the targetting and creation of recommendation controllers from querying the DOM.\n\n\n### controllers\n\nThe `controllers` property contains an object of all recommendation instance that has been found on the page. Each instance will have its own `RecommendationController` instance created and added to the `controllers` object. \n\nAll controllers can be accessed via the `controllers` object where the key is the id of the controller that was created. The controller id is generated based on the `profile` attribute and it's occurance count (starting at 0.) It follows the following format: \n\n```typescript\nid: `recommend_${tag + (profileCount[tag] - 1)}`,\n```\n\nFor example, if the page contains the following single recommendation instance:\n\n```html\n<script type=\"searchspring/personalized-recommendations\" profile=\"trending\"></script>\n```\n\nThe controller id would be `recommend_trending0` and can be accesed as follows:\n\n```typescript\nimport { Snap } from '@searchspring/snap-preact';\n\nconst snap = new Snap(config);\nconst recommendations = snap.recommendations;\nconst controllers = recommendations.controllers;\nconst { recommend_trending0 } = controllers;\n\nconsole.log(\"recommend_trending0\", recommend_trending0)\n```\n\n### client\n\nA reference to the shared [@searchspring/snap-client](https://github.com/searchspring/snap/tree/main/packages/snap-client) instance used by each controller.\n\n\n### tracker\n\nA reference to the shared [@searchspring/snap-tracker](https://github.com/searchspring/snap/tree/main/packages/snap-tracker) instance used by each controller.\n\n\n### logger\n\nA reference to the shared [@searchspring/snap-logger](https://github.com/searchspring/snap/tree/main/packages/snap-logger) instance used by each controller.\n\n\n### config\n\nA reference to the `config.instantiators.recommendation` config object as part of the config that was provided to Snap.\n\n### uses\n\nA reference to any middleware added from invoking `RecommendationInstantiator.use()`\n\n### plugins\n\nA reference to any middleware added from invoking `RecommendationInstantiator.plugin()`\n\n### middleware\n\nA reference to any middleware added from invoking `RecommendationInstantiator.on()`\n\n\n","image":"","sku":"sku/package-preact-instantiator","id":"/package-preact-instantiator","categoryHierarchy":"Packages > Preact > Instantiators"}
{"name":"Controller","route":"/package-controller","price":0,"description":"# Snap Controller\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\nThe heart of controlling Search, Autocomplete, & Finder functionality. The Controller is responsible for tying various Snap services together.\n\n\n## Dependencies\n\nSnap Controller is a top-level package that requires the following dependencies as services:\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-client\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-client.svg?style=flat\"></a> [@searchspring/snap-client](https://github.com/searchspring/snap/tree/main/packages/snap-client)\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-store-mobx\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-store-mobx.svg?style=flat\"></a> [@searchspring/snap-store-mobx](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx)\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-url-manager\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-url-manager.svg?style=flat\"></a> [@searchspring/snap-url-manager](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager)\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-event-manager\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-event-manager.svg?style=flat\"></a> [@searchspring/snap-event-manager](https://github.com/searchspring/snap/tree/main/packages/snap-event-manager)\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-profiler\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-profiler.svg?style=flat\"></a> [@searchspring/snap-profiler](https://github.com/searchspring/snap/tree/main/packages/snap-profiler)\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-logger\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-logger.svg?style=flat\"></a> [@searchspring/snap-logger](https://github.com/searchspring/snap/tree/main/packages/snap-logger)\n\n## Installation\n\nTo install the `snap-controller` package and it's services:\n\n```bash\nnpm install --save @searchspring/snap-controller @searchspring/snap-client @searchspring/snap-store-mobx @searchspring/snap-url-manager @searchspring/snap-event-manager @searchspring/snap-profiler @searchspring/snap-logger\n```\n\n\n## Instantiation\nEach `Controller` must be passed a configuration object as the first parameter to the constructor, and a services object (dependencies) as the second. The contents of these objects will depend on which type of `Controller` is being instantiated. For example, a `SearchController` would usually be paired with a `SearchStore` service, and would take a `SearchControllerConfig` configuration object.\n\nThe complete example below shows how a `SearchController` could be instatiated, initialized and searched:\n\n```typescript\nimport { Client } from '@searchspring/snap-client';\nimport { SearchStore } from '@searchspring/snap-store-mobx';\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\nimport { SearchController } from '@searchspring/snap-controller';\n\nconst configuration = {\n\tid: 'search'\n};\n\nconst urlManager = new UrlManager(new UrlTranslator());\nconst services = {\n\tclient: new Client({ siteId: 'abc123' }),\n\tstore: new SearchStore(configuration, { urlManager }),\n\turlManager,\n\teventManager: new EventManager(),\n\tprofiler: new Profiler(),\n\tlogger: new Logger(),\n\ttracker: new Tracker(),\n}\n\nconst controller = new SearchController(configuration, services);\ncontroller.init();\ncontroller.search();\n```\n\n## Configuration\nThe configuration object provided during instantiation provides a way of configuring the controller for different behavior. Each controller type (`SearchController`, `AutocompleteController`, `FinderController`, etc...) has default configurations that can be modified with the instantiation configuration object. At minimum an `id` attribute is required for identifying controllers. The `id` should be unique to each *instance* of a controller.\n## Services\nAlong with a configuration, each controller is passed a collection of services during instantiation. These services are then used by the controller and made available via controller methods. Sometimes controllers might share a reference to a service (the `client` service for example), but in most cases a controller will have it's own instance of a service. Some services (like the `SearchStore`) share services with the controller (in the example above, the `UrlManager` is shared).\n\n```typescript\n{ client, store, urlManager, eventManager, profiler, logger }\n```\n### client\nThe `client` service makes the requests to the API when the controller `search` method is called. The response is passed onto the `store` service. This service is exposed as `controller.client`.\n\n### store\nThis service mutates the API responses and adds convenience functions for common functionality. The `store` data is then used by the UI components for display. This service is exposed as `controller.store`.\n### urlManager\n`urlManager` is responsible for updating the page URL when interacting with UI components. The type of translator passed into the `UrlManager` constructor will determine the types of URLs generated. This service is exposed as `controller.urlManager`.\n### eventManager\nMiddleware provide an opportunity to hook into these events they occur. Middleware are attached to events, and these events are managed by the `eventManager`. This service is exposed as `controller.eventManager`.\n\n### profiler\nControllers may need to know how long a certain event took, the `profiler` service provides the means to track this information. This service is exposed as `controller.profiler`.\n\n### logger\nThe `logger` service provides logging functionality to a controller. Each controller logs when errors in middleware and when controller events occur. The logger is responsible for sending this information to the developer console. In addition the logger may provide additional emoji or colors to use. This service is exposed as `controller.log`.\n\n## Initialization\nInvoking the `init` method is required to subscribe to changes that occur in the UrlManager. It also fires the `init` event which executes attached middleware. This can be fired manually as needed; if it was not manually fired it will happen automatically on the first call to the controller `search` method.\n\n```typescript\ncontroller.init();\n```\n\n## Searching\nThe `search` method of a controller will run the search that is expected by leveraging the `client` service to make the request; the subsequent response will be passed to the `store` service.\n\nMost controllers will provide a means of manipulating the request and response using `beforeSearch` and `afterSearch` events respectively. Read on for details about events.\n\n```typescript\ncontroller.search();\n```\n\n## Stores\nDifferent controller types will utilize different Snap Stores (typically of the same name). Each `store` will provide different properties and methods for its unique purposes. See the documentation for more details.\n\n## Events\nEach controller will fire various events. Some of the event names are shared between controllers for consistency (ex: `beforeSearch`, `afterSearch`, `afterStore`); however the attaching of middleware and execution of it must remain separate. This is why a new `EventManager` instance is created for each controller. Middleware are attached to events via the `on` method and the functions should almost always end with `await next()` unless purposefully preventing the next attached middleware from executing.\n\n```typescript\ncontroller.on('init', async (eventData, next) => {\n\tconst { controller } = eventData;\n\n\tcontroller.log.debug('init event has occurred');\n\n\tawait next();\n});\n```\n\nNote: Groups of middleware (plugins) can be attached using the `plugin` method.\n\nThe data available within a middleware (first parameter) is determined by what gets passed into the `fire` method. For existing events on the controller, the `fire` method is already being called when appropriate to the event, and the `eventData` will typically be an object containing a reference to the controller and any other details that may be of importance to the particular event. Custom events can be created as needed; but keep in mind that any middleware tied to the event should be bound (using `on` or `plugin`) prior to the execution of the `fire` method.\n\n```typescript\ncontroller.eventManager.fire('customEventName', { thing1: 'one', thing2: 2 });\n```\n\nSee the EventManager documentation for more details.\n\n## Environment\nA controller's environment is initialized at build time, and is used to control certain runtime behavior. For example, a `production` build will supress most logs while a `development` build will show them all.\n## Logging\nThe logger provides a clear way of outputting details like profile data or errors to the developer console. A `production` build will supress most logs while a `development` build will show them all. The environment is automatically determined, but can be toggled during runtime by setting it to either `development` or `production`.\n\n```typescript\ncontroller.environment = 'development';\n```\n\nThe use of `console.log()` is discouraged. Logging should be done via controller instance to help debug and navigate the sea of console logs. Each controller will output the `id` for easily deciphering which controller made the log.\n\n```typescript\ncontroller.log.warn('THIS IS A WARNING!');\n```\n\nMany logs are supressed depending on a development `environment` of the controller instance. The Logger documentation provides more details about the various methods, colors and emoji available.\n\n## Controller Types\nEach `Controller` has a unique configuration and set of default events; it may also provide additional methods for specific functionality.\n\n### Abstract\nThe base class for all controllers.\n\n### Autocomplete\nUsed for autocomplete searches.\n\n### Finder\nA specialized controller used for building custom product finders.\n\n### Recommendation\nThe standard controller used for recommendation profiles.\n\n### Search\nThe standard controller used on search pages and PLPs.","image":"","sku":"sku/package-controller","id":"/package-controller","categoryHierarchy":"Packages > Controller"}
{"name":"Abstract","route":"/package-controller-abstract","price":0,"description":"# AbstractController\n\nThe `AbstractController` is used as the base class for all Snap controllers. As it is an abstract class, it must be extended by a subclass and cannot be instantiated.\n\n## AbstractControllerConfig\nThe required configuration for all controllers is an `id`. This identifier should be unique to identify various instantiated controllers from each other.\n\n| option | description | default value | required | \n|---|---|:---:|:---:|\n| id | unique identifier for this controller | ➖ | ✔️ |\n\n<br>\n\n```typescript\nconst abstractConfig = {\n\tid: 'abstract',\n};\n```\n## Instantiate\n`AbstractController` cannot be instantiated and must be extended by a subclass.\n\n## id\nAttribute set by the controller config.\n\n## type\nAttribute set by the extending class.\n\n## environment\nThis is both a getter and a setter. Allows for setting an environment level which is used internally to hide certain logs. Possible values: `production` or `development` (LogMode enum)\n\n## initialized\nThis is a getter that will return a boolean to determine if the `init` method has been invoked.\n\n## targeters\nAn object containing all of the DomTargeter objects that are linked to this controller. Targeters can be added via the `addTargeter` method, or created via the `createTargeter` method. Targets are keyed by the first target's `name` or `selector`\n\n## retarget\nThis method is used to invoke the `retarget` method each of the `targeters` entries.\n\n## addTargeter\nThis method will add a given target (DomTargeter instance) to the `targeters` object if it does not already exist. \n\n## createTargeter\nThis method given the same parameters as DomTargeter, will create a new target (DomTargeter instance) and also invoke `addTargeter` to add the target to the `targeters` object.\n\n## search\nThis is an abstract method that must be defined in the subclass.\n\n## on\nThis method is used to attach event middleware. Each controller defines it's own events, this method provides a means to attach to them.\n\n```typescript\ncontroller.on('init', async(eventData, next) => {\n\teventData.controller.log.debug('initialized!');\n\tawait next();\n});\n```\n\n## plugin\nModification or extension of functionality as well as attaching groups of event middleware can be done using the `plugin` method. Plugin functions can be passed additional parameters if needed.\n\n```typescript\nconst paramPlugin = (controller, ...params) => {\n\t// params = [ 'param1', 'param2' ]\n\tcontroller.on('init', async({ controller }, next) => {\n\t\tcontroller.log.debug('initialized!');\n\t\tawait next();\n\t});\n}\n\ncontroller.plugin(paramPlugin, 'param1', 'param2');\n```\n\n## use\nThe `use` method is a convenient way of attaching both middleware and plugins via a config.\n\n```\nconst initMiddleware = async(eventData, next) => {\n\teventData.controller.log.debug('initialized!');\n\tawait next();\n}\n\nconst plugin = (controller) => {\n\tcontroller.on('init', async({ controller }, next) => {\n\t\tcontroller.log.debug('initialized!');\n\t\tawait next();\n\t});\n}\n\nconst paramPlugin = (controller, ...params) => {\n\t// params = [ 'param1', 'param2' ]\n\tcontroller.on('init', async({ controller }, next) => {\n\t\tcontroller.log.debug('initialized!');\n\t\tawait next();\n\t});\n}\n\ncontroller.use({\n\tmiddleware: {\n\t\tinit: [ initMiddleware ]\n\t},\n\tplugins: [\n\t\t[ plugin ],\n\t\t[ paramPlugin, 'param1', 'param2' ]\n\t]\n});\n```\n\n## Events\n\n### init\n- Called with `eventData` = { controller }\n- Always invoked by a call to the `init` controller method","image":"","sku":"sku/package-controller-abstract","id":"/package-controller-abstract","categoryHierarchy":"Packages > Controller > Abstract"}
{"name":"Autocomplete","route":"/package-controller-autocomplete","price":0,"description":"# AutocompleteController\n\nThe `AutocompleteController` is used when making queries to the API `autocomplete` endpoint. It can also bind events to DOM elements to handle user input of queries.\n\n## AutocompleteControllerConfig\n\n| option | description | default value | required | \n|---|---|:---:|:---:|\n| id | unique identifier for this controller | ➖ | ✔️ |\n| selector | css selector for input elements that DOM events should be bound to | ➖ | ✔️ |\n| action | optional way to override the form action or provide one when it does not exist | ➖ |   |\n| globals | keys defined here will be passed to the [API request](https://snapi.kube.searchspring.io/api/v1/) (can overwrite global config)| ➖ |   |\n| settings.initializeFromUrl | initialize the controller with query parameter from URL (pre-fill input with current search) | true |   |\n| settings.syncInputs | if the selector targets multiple inputs, the value of those inputs will be synced | true |   |\n| settings.facets.trim | facets that do not change results will be removed | true |   |\n| settings.trending.limit | when set, trending (popular) queries will be fetched and made available in the trending store | ➖ |   |\n\n<br>\n\n```typescript\nconst autocompleteConfig = {\n\tid: 'autocomplete',\n\tselector: '#searchInput',\n\tsettings: {\n\t\tsyncInputs: true\n\t},\n};\n```\n\n## Instantiate\n`AutocompleteController` requires an `AutocompleteControllerConfig` and `ControllerServices` object and is paired with an `AutocompleteStore`. The `AutocompleteStore` takes the same config, and shares the `UrlManager` service with the controller.\n\n```typescript\nimport { AutocompleteController } from '@searchspring/snap-controller';\nimport { Client } from '@searchspring/snap-client';\nimport { AutocompleteStore } from '@searchspring/snap-store-mobx';\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\n\nconst autocompleteUrlManager = new UrlManager(new UrlTranslator(), reactLinker).detach();\nconst autocompleteController = new AutocompleteController(autocompleteConfig, {\n\t\tclient: new Client(globals, clientConfig),\n\t\tstore: new AutocompleteStore(autocompleteConfig, { urlManager: autocompleteUrlManager }),\n\t\turlManager: autocompleteUrlManager,\n\t\teventManager: new EventManager(),\n\t\tprofiler: new Profiler(),\n\t\tlogger: new Logger(),\n\t\ttracker: new Tracker(),\n\t}\n));\n```\n\n## Initialize\nInvoking the `init` method is required to subscribe to changes that occur in the UrlManager. This is typically done automatically prior to calling the first `search`.\n\n```typescript\nautocompleteController.init();\n```\n\n## Bind\n<!-- TODO: set/test link to DomTargeter -->\nInvoking the `bind` method is required to attach event listeners to each input specified as `selector` in the `AutocompleteControllerConfig`.\n\n```typescript\nautocompleteController.bind();\n```\n\n## Unbind\n<!-- TODO: set/test link to DomTargeter -->\nInvoking the `unbind` method will remove attached event listeners previously attached by the `bind` method.\n\n```typescript\nautocompleteController.unbind();\n```\n\n## Search\nThis will invoke a search request to Searchspring's search API and populate the store with the response. This should be automatically called by the DOM event binding that occurs when the `bind` method (see above) is invoked.\n\n```typescript\nautocompleteController.search();\n```\n\n## Events\n### init\n- Called with `eventData` = { controller }\n- Done once automatically before the first search - or manually invoked by calling `init`\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n- Cancels search if input doesn't match current urlManager input state\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in mobx store\n\n### focusChange\n- Called with `eventData` = { controller }\n- Invoked when an input has been focused\n\n### beforeSubmit\n- Called with `eventData` = { controller, input }\n- Invoked prior to submission of autocomplete search","image":"","sku":"sku/package-controller-autocomplete","id":"/package-controller-autocomplete","categoryHierarchy":"Packages > Controller > Autocomplete"}
{"name":"Finder","route":"/package-controller-finder","price":0,"description":"# FinderController\n\nThe `FinderController` should be used for building product finders. It makes queries to the API `search` endpoint.\n\n\n## FinderControllerConfig\n\n| option | description | default value | required | \n|---|---|:---:|:---:|\n| id | unique identifier for this controller | ➖ | ✔️ |\n| url | URL to be redirected to upon clicking finder's 'find' button | ➖ | ✔️ |\n| globals | keys defined here will be passed to the [API request](https://snapi.kube.searchspring.io/api/v1/) (can overwrite global config)| ➖ |   |\n| fields | an array of finder field configurations | ➖ | ✔️ |\n| fields.field | required field name | ➖ | ✔️ |\n| fields.label | optional finder label | ➖ |   |\n| fields.levels | optional finder selection levels (hierarchy only) | ➖ |   |\n\n<br>\n\n<h3 id=\"HierarchyConfig\">Hierarchy Config</h3>\nSpecifying `levels` will display a dropdown for each hierarchy level. Finders that use hierarchy fields will enforce selecting dropdowns in order by disabling the following dropdowns\n\n```typescript\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search',\n\tfields: [\n\t\t{\n\t\t\tfield: 'ss_tire',\n\t\t\tlabel: 'Wheel Finder',\n\t\t\tlevels: ['Year', 'Make', 'Model', 'Wheel Size']\n\t\t},\n\t]\n};\n```\n\nOptionally if `levels` are not defined, a single dropdown will be displayed on the initial load. Each selection will dynamically append additional dropdowns until there are no more available selections\n\n```typescript\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search',\n\tfields: [\n\t\t{\n\t\t\tfield: 'ss_tire'\n\t\t}\n\t]\n};\n```\n\n<h3 id=\"NonHierarchyConfig\">Non-Hierarchy Config</h3>\nIf using fields that are not of hierarchy type, `levels` are not required\n\n```typescript\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search',\n\tfields: [\n\t\t{ \n\t\t\tfield: 'custom_wheel_size' \n\t\t\tlabel: 'Size'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_wheel_width' \n\t\t\tlabel: 'Width'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_wheel_bolt_pattern' \n\t\t\tlabel: 'Bolt Pattern'\n\t\t}, \n\t\t{ \n\t\t\tfield: 'custom_color'\n\t\t\tlabel: 'Color'\n\t\t}\n\t]\n};\n```\n\n## Instantiate\n`FinderController` requires a `FinderControllerConfig` and `ControllerServices` object and is paired with a `FinderStore`. The `FinderStore` takes the same config, and shares the `UrlManager` service with the controller.\n\n```typescript\nimport { FinderController } from '@searchspring/snap-controller';\nimport { Client } from '@searchspring/snap-client';\nimport { FinderStore } from '@searchspring/snap-store-mobx';\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\n\nconst finderUrlManager = new UrlManager(new UrlTranslator(), reactLinker).detach(0);\nconst finderController = new FinderController(finderConfig, {\n\t\tclient: new Client(globals, clientConfig),\n\t\tstore: new FinderStore(finderConfig, { urlManager: finderUrlManager }),\n\t\turlManager: finderUrlManager,\n\t\teventManager: new EventManager(),\n\t\tprofiler: new Profiler(),\n\t\tlogger: new Logger(),\n\t\ttracker: new Tracker(),\n\t}\n));\n```\n## Initialize\nInvoking the `init` method is required to subscribe to changes that occur in the UrlManager. This is typically done automatically prior to calling the first `search`.\n\n```typescript\nfinderController.init();\n```\n\n## Search\nThis will invoke a search request to Searchspring's search API and populate the store with the response. This should be called initially and after finder selections have been made.\n\n```typescript\nfinderController.search();\n```\n\n## Find\nAfter selection(s) have been made, the user will click on a 'Find' button. This click event should invoke the `find` method of the `FinderController` which will redirect to the specified `url` in the config, along with its selection data.\n\n```typescript\nfinderController.find();\n```\n\n## Reset\nThis mthod should be invoked to 'reset' or remove all finder selections. This will also clear out any persisted selection storage data.\n\n```typescript\nfinderController.reset();\n```\n\n## Events\n### init\n- Called with `eventData` = { controller }\n- Done once automatically before the first search - or manually invoked by calling `init`\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in mobx store\n- no operation","image":"","sku":"sku/package-controller-finder","id":"/package-controller-finder","categoryHierarchy":"Packages > Controller > Finder"}
{"name":"Recommendation","route":"/package-controller-recommendation","price":0,"description":"# RecommendationController\n\nThe `RecommendationController` is used when making queries to the API `recommend` endpoint. It can also bind events to DOM elements to handle user input of queries.\n\n## RecommendationControllerConfig\n\n| option | description | default value | required | \n|---|---|:---:|:---:|\n| id | unique identifier for this controller | ➖ | ✔️ |\n| tag | unique name of the recommendations profile | ➖ | ✔️ |\n| realtime | update recommendations if cart contents change (requires attribute tracking) | ➖ |   |\n| batched | batch multiple recommendations into a single network request | true |   |\n| globals | keys defined here will be passed to the [API request](https://snapi.kube.searchspring.io/api/v1/) (can overwrite global config)| ➖ |   |\n\n<br>\n\n```typescript\nconst recommendationConfig = {\n\tid: 'recommend',\n\ttag: 'trending',\n};\n```\n\n## Instantiate\n`RecommendationController` requires an `RecommendationControllerConfig` and `ControllerServices` object and is paired with an `RecommendationStore`. The `RecommendationStore` takes the same config, and shares the `UrlManager` service with the controller.\n\n```typescript\nimport { RecommendationController } from '@searchspring/snap-controller';\nimport { Client } from '@searchspring/snap-client';\nimport { RecommendationStore } from '@searchspring/snap-store-mobx';\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\n\nconst recommendationUrlManager = new UrlManager(new UrlTranslator(), reactLinker).detach(0);\nconst recommendationController = new RecommendationController(recommendationConfig, {\n\t\tclient: new Client(globals, clientConfig),\n\t\tstore: new RecommendationsStore(recommendationConfig, { urlManager: recommendationUrlManager }),\n\t\turlManager: recommendationUrlManager,\n\t\teventManager: new EventManager(),\n\t\tprofiler: new Profiler(),\n\t\tlogger: new Logger(),\n\t\ttracker: new Tracker(),\n\t}\n));\n```\n\n## Initialize\nInvoking the `init` method is required to subscribe to changes that occur in the UrlManager. This is typically done automatically prior to calling the first `search`.\n\n```typescript\nrecommendationController.init();\n```\n\n## Events\n### init\n- Called with `eventData` = { controller }\n- Done once automatically before the first search - or manually invoked by calling `init`\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Sets `controller.store.loading = false`\n- Cancels search if input doesn't match current urlManager input state\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in mobx store\n\n### track.product.click\n- Called with `eventData` = { controller, event, result, trackEvent } \n- Always invoked after `track.product.click()` method has been invoked\n- Allows for adding custom product click events (ie. Google Analytics)\n\n### track.product.impression\n- Called with `eventData` = { controller, result, trackEvent } \n- Always invoked after `track.product.impression()` method has been invoked\n\n### track.product.render\n- Called with `eventData` = { controller, result, trackEvent } \n- Always invoked after `track.product.render()` method has been invoked\n\n### track.click\n- Called with `eventData` = { controller, event, trackEvent } \n- Always invoked after `track.click()` method has been invoked\n\n### track.impression\n- Called with `eventData` = { controller, trackEvent } \n- Always invoked after `track.impression()` method has been invoked\n\n### track.render\n- Called with `eventData` = { controller, trackEvent } \n- Always invoked after `track.render()` method has been invoked\n","image":"","sku":"sku/package-controller-recommendation","id":"/package-controller-recommendation","categoryHierarchy":"Packages > Controller > Recommendation"}
{"name":"Search","route":"/package-controller-search","price":0,"description":"# SearchController\n\nThe `SearchController` is used when making queries to the API `search` endpoint.\n\n## SearchControllerConfig\n\n| option | description | default value | required | \n|---|---|:---:|:---:|\n| id | unique identifier for this controller | ➖ | ✔️ |\n| globals | keys defined here will be passed to the [API request](https://snapi.kube.searchspring.io/api/v1/) (can overwrite global config)| ➖ |   |\n| settings.redirects.merchandising | enable merchandising redirects | true |   |\n| settings.redirects.singleResult | enable redirect to product detail page if search yields 1 result count | true |   |\n| settings.facets.pinFiltered | selected facet options move to the top of the options array | true |   |\n| settings.facets.trim | facets that do not change results will be removed | true |   |\n| settings.infinite | enable infinite scrolling by setting to empty object | ➖ |   |\n| settings.infinite.backfill | number of pages allowed for backfill | ➖ |   |\n\n<br>\n\n```typescript\nconst searchConfig = {\n\tid: 'search',\n\tglobals: {\n\t\tpagination: {\n\t\t\tpageSize: 12\n\t\t}\n\t}\n};\n```\n## Instantiate\n`SearchController` requires a `SearchControllerConfig` and `ControllerServices` object and is paired with a `SearchStore`. The `SearchStore` takes the same config, and shares the `UrlManager` service with the controller.\n\n```typescript\nimport { SearchController } from '@searchspring/snap-controller';\nimport { Client } from '@searchspring/snap-client';\nimport { SearchStore } from '@searchspring/snap-store-mobx';\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nimport { EventManager } from '@searchspring/snap-event-manager';\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\nimport { Tracker } from '@searchspring/snap-tracker';\n\nconst searchUrlManager = new UrlManager(new UrlTranslator(), reactLinker);\nconst searchController = new SearchController(searchConfig, {\n\tclient: new Client({ siteId: 'abc123' }),\n\tstore: new SearchStore(searchConfig, { urlManager: searchUrlManager }),\n\turlManager: searchUrlManager,\n\teventManager: new EventManager(),\n\tprofiler: new Profiler(),\n\tlogger: new Logger(),\n\ttracker: new Tracker(),\n});\n```\n\n## Initialize\nInvoking the `init` method is required to subscribe to changes that occur in the UrlManager. This is typically done automatically prior to calling the first `search`.\n\n```typescript\nsearchController.init();\n```\n\n## Search\nThis will invoke a search request to Searchspring's search API and populate the store with the response.\n\n```typescript\nsearchController.search();\n```\n\n## Infinite\nWhen `config.settings.infinite` is defined and `store.pagination.next()` is invoked, the next page will be fetched and its result set will be appended to the existing result set. \n\nIf the page has been reloaded, the results will be reset to page 1.\n\n```typescript\nconst searchConfig = {\n\tid: 'search',\n\tglobals: {\n\t\tpagination: {\n\t\t\tpageSize: 12\n\t\t}\n\t},\n\tsettings: {\n\t\tinfinite: {}\n\t}\n};\n```\n\n### Backfill\nIf `config.settings.infinite.backfill` is specified, any page reloads when paginated up to the specified value will fetch previous pages to backfill. Note that each page that is backfilled will invoke a request to the search API and your billing quota will reflect this. It is not recommended to set this value above `5`\n\n```typescript\nconst searchConfig = {\n\tid: 'search',\n\tglobals: {\n\t\tpagination: {\n\t\t\tpageSize: 12\n\t\t}\n\t},\n\tsettings: {\n\t\tinfinite: {\n\t\t\tbackfill: 5\n\t\t}\n\t}\n};\n```\n\nFor example, if `config.settings.infinite.backfill` contains a value of `5` and the user has paginated to page `4` and reloads the page, `4` pages of results will be shown. However, if the user has paginated to page `6` or above and reloads the page, only page `1` results will be shown. \n\n\n### Infinite Scrolling\nBy default when using the infinite configuration, additional pages are appended when `store.pagination.next()` is invoked. To automatically request the next page when the user has scrolled to the bottom, an `useIntersection` hook along with a `useRef` attached to an element below the results can be used to invoke `pagination.next.url.go({ history: 'replace' })` when the element comes into the viewport. \n\n```jsx\nimport { h, Fragment, Component } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { observer } from 'mobx-react';\nimport { ControllerProvider, useIntersection, Results } from '@searchspring/snap-preact-components';\n\n@observer\nexport class Content extends Component {\n\trender() {\n\t\tconst controller = this.props.controller;\n\t\tconst {\n\t\t\tstore: { pagination, merchandising, loading },\n\t\t} = controller;\n\n\t\tconst infinite = useRef(null);\n\t\tconst atBottom = pagination.totalResults > 0 ? useIntersection(infinite, '50px') : false;\n\t\tif (atBottom && pagination.next && !loading) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tpagination.next.url.go({ history: 'replace' });\n\t\t\t})\n\t\t}\n\t\treturn (\n\t\t\t<ControllerProvider controller={controller}>\n\t\t\t\t<Results results={store.controller.results}>\t\t\n\t\t\t\t<div style={{ display: loading ? 'none' : 'block' }} ref={infinite}></div>\n\t\t\t</ControllerProvider>\n\t\t);\n\t}\n}\n\n```\n\n## Events\n\n### init\n- Called with `eventData` = { controller }\n- Done once automatically before the first search - or manually invoked by calling `init`\n\n### beforeSearch\n- Called with `eventData` = { controller, request }\n- Always invoked before an API request is made \n- Sets `controller.store.loading = true`\n\n### afterSearch\n- Called with `eventData` = { controller, request, response }\n- Always invoked after an API request is made \n- Invokes `window.location.replace()` if API response contains merchandising redirects AND if `config.settings.redirects.merchandising = true` (default)\n- Invokes `window.location.replace()` to redirect to product detail page if API response returned a single product AND `config.settings.redirects.singleResult = true` (default)\n- Sets `controller.store.loading = false`\n\n### afterStore\n- Called with `eventData` = { controller, request, response }\n- Always invoked after data has been stored in mobx store\n\n### track.product.click\n- Called with `eventData` = { controller, event, result, trackEvent } \n- Always invoked after `track.product.click()` method has been invoked\n- Allows for adding custom product click events (ie. Google Analytics)\n","image":"","sku":"sku/package-controller-search","id":"/package-controller-search","categoryHierarchy":"Packages > Controller > Search"}
{"name":"Client","route":"/package-client","price":0,"description":"# Snap Javascript Client\n\nSimple Javascript client for communicating with the Searchspring Snap API.\n\n## Quick Links\n\n[Snap API docs](https://snapi.kube.searchspring.io/api/v1/) - Search & Autocomplete API documentation\n\n[Snapi Explorer](https://searchspring.github.io/snapi-explorer/) - a tool for making requests to Searchspring's API\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-client\n```\n\n## Import\n```typescript\nimport { Client } from '@searchspring/snap-client';\n```\n\n## Global Config\nClient is constructed with `globals`.  \n\nGlobals are API parameters that will be applied to all searches requested by the client. This will typically contain just the *siteId*; but could also include global filters, background filters, sorts, or merchandising segments.\n\n`siteId` (required)\n\n```typescript\nconst globals = {\n\tsiteId: 'a1b2c3'\n};\n```\n\nAny other keys defined here will be passed to the API request\n\nFor a full list of parameters please see the [Snap API docs](https://snapi.kube.searchspring.io/api/v1/)\n\nFor example, with background filter:\n\n```typescript\nconst globals = {\n\tsiteId: 'a1b2c3',\n  filters: [{\n    field: 'stock_status',\n    value: 'yes',\n    type: 'value',\n    background: true\n  }]\n};\n```\n\n## Client Config\nObject required for all controllers\n\n```typescript\nexport type ClientConfig = {\n  meta?: {\n\t\tapi?: SnapApiConfig;\n\t\tcache?: CacheConfig;\n\t};\n\tsearch?: {\n\t\tapi?: SnapApiConfig;\n\t\tcache?: CacheConfig;\n\t};\n\tautocomplete?: {\n\t\tapi?: SnapApiConfig;\n\t\tcache?: CacheConfig;\n\t};\n\trecommend?: {\n\t\tapi?: SnapApiConfig;\n\t\tcache?: CacheConfig;\n\t};\n\tsuggest?: {\n\t\tapi?: SnapApiConfig;\n\t\tcache?: CacheConfig;\n\t};\n};\n\nexport type CacheConfig = {\n\tenabled?: boolean;\n\tttl?: number;\n\tmaxSize?: number;\n\tpurgeable?: boolean;\n};\n\nexport type SnapApiConfig = {\n\torigin?: string;\n};\n\n```\n\n## Controller usage\nSnap Client is a dependency of Snap Controller and it is recommended to use the Controller's `search` method to perform a search. \n\n\n\n## Cache usage\nEach requester in the Snap Client has its own cache settings, which can be configured via the `ClientConfig` under `cache`. Settings include: \n\n  `enabled`: to opt out - Defaults to `true`, \n\n  `ttl`: to adjust how long the requests are stored (in ms) - Defaults to `300000`,\n\n  `maxSize`: to adjust the maximum size of the cache allowed to be stored in localStorage (in kb - Defaults to `200`,\n\n  `purgeable`: to allow auto purging of the requests from localstorage when maxSize is hit, based on time remaining to expiration.  - Defaults to `true` with the exception of `meta`,\n\n\n## Standalone usage\n```typescript\nconst client = new Client(globals, clientConfig);\n\nconst results = await client.search({\n  search: {\n    query: {\n      string: 'dress'\n    }\n  }\n});\n```\n\n## `search` method\nMakes a request to the Searchspring Search API and returns a promise.  \n\n```typescript\nconst client = new Client(globals, clientConfig);\n\nconst results = await client.search({\n  search: {\n    query: {\n      string: 'dress'\n    }\n  }\n});\n```\n\n## `autocomplete` method\nMakes a request to the Searchspring Autocomplete API and returns a promise.  \n\n```typescript\nconst client = new Client(globals, clientConfig);\n\nconst results = await client.autocomplete({\n  suggestions: {\n    count: 5\n  },\n  search: {\n    query: {\n      string: 'yellw',\n      spellCorrection: true\n    }\n  }\n});\n```\n\n## `meta` property\nThe meta property contains the metadata related to the siteId that the client was instantiated with. This data is to be used together with search results. Metadata contains site configuration like facet and sorting information.\n\nNote that the `search` method sets the `meta` property, therefore it must be called before attempting to access the `meta` property.\n\n```typescript\nconst client = new Client(globals, clientConfig);\n\nconst results = await client.search({\n  search: {\n    query: {\n      string: 'dress'\n    }\n  }\n});\n\nconst meta = client.meta;\n```\n","image":"","sku":"sku/package-client","id":"/package-client","categoryHierarchy":"Packages > Client"}
{"name":"Store","route":"/package-storeMobx","price":0,"description":"# Snap MobX Store\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-store-mobx\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-store-mobx.svg?style=flat\"></a>\n\nManagement of Snap state using Mobx.\n\n## Dependency\n\nSnap Store MobX is a dependency of [@searchspring/snap-controller](https://github.com/searchspring/snap/tree/main/packages/snap-controller) <a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Dependencies\n\nSnap Store MobX requires the following dependencies as services:\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-url-manager\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-url-manager.svg?style=flat\"></a> [@searchspring/snap-url-manager](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager)\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-store-mobx\n```\n\n## Import\n```typescript\nimport { AbstractStore, SearchStore, AutocompleteStore, FinderStore, RecommendationStore, StorageStore } from '@searchspring/snap-store-mobx';\n```\n\n## Controller usage\n\nSnap Store MobX is a dependency of Snap Controller which will handle store changes as needed. As such, it is recommended to use methods of the controller to access and update the store.\n\n\n## Standalone usage\n\n```typescript\nimport { SearchStore } from '@searchspring/snap-store-mobx'\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst searchConfig = {\n\tid: 'search',\n\tglobals: {\n\t\tpagination: {\n\t\t\tpageSize: 12\n\t\t}\n\t}\n};\n\nconst store = new SearchStore(searchConfig, { urlManager: new UrlManager(new UrlTranslator()) });\n\nstore.update(data);\n\n// log the store\nconsole.log(store.toJSON());\n```","image":"","sku":"sku/package-storeMobx","id":"/package-storeMobx","categoryHierarchy":"Packages > Store"}
{"name":"Abstract","route":"/package-storeMobx-abstract","price":0,"description":"# AbstractStore\n\n`SearchStore`, `AutocompleteStore`, and `FinderStore` extend `AbstractStore`. Therefore, the following methods and properties are available in all Stores.\n\n## `update` method\nUpdate the store's properties with `data` object that has been retrieved from Searchspring's Search API.\n\n```typescript\nconst store = new SearchStore();\n\nstore.update(data)\n```\n\n## `toJSON` method\nConverts store to JSON object for easier debugging.\n\n```typescript\nconsole.log(store.toJSON())\n```\n\n## `custom` property\nThe `custom` property is an empty object that is not utilized by any core Snap functionallity however is available for you to use as a store with data created in [Snap Events](https://github.com/searchspring/snap/tree/main/packages/snap-event-manager). It is suggested to be used for any custom functionallity that Snap does not handle natively (ie. keeping track of a list/grid view state)\n\nThe `custom` object is an observable property that can be accessed in your components to be rendered, however setting properties directly on the object will not retain its reactivity.\n\nThe following example will still have the `view` property available in your components, however will **NOT** yield a component rerender if its data has changed. \n\n```typescript\nconst middleware = (controller) => {\n    controller.store.custom.view = {\n        value: 'grid',\n        toggle: function () {\n            if (this.value == 'list') {\n                this.value = 'grid';\n            } else {\n                this.value = 'list';\n            }\n        },\n    };\n};\n```\n\nIn order for properties to be observable, the `custom` object must set directly each time.\n\n```typescript\nconst middleware = (controller) => {\n    controller.store.custom = {\n        view: {\n            value: 'grid',\n            toggle: function () {\n                if (this.value == 'list') {\n                    this.value = 'grid';\n                } else {\n                    this.value = 'list';\n                }\n            },\n        };\n    }\n};\n```\n\nOR defined in advanced:\n\n```typescript\nconst middleware = (controller) => {\n    controller.store.custom = { view: undefined }\n    controller.store.custom.view = {\n        value: 'grid',\n        toggle: function () {\n            if (this.value == 'list') {\n                this.value = 'grid';\n            } else {\n                this.value = 'list';\n            }\n        },\n    }\n};\n```\n\nIf you wish to add additional properties further in your logic, the previous properties can be spread when setting the object.\n\n```typescript\nconst middleware = (controller) => {\n    controller.store.custom = { ...controller.store.custom, isActive: true }\n};\n```\n\n\n## `loaded` property\nBoolean that is set to `true` once the store has determined that something of importance has loaded (depends on the specific store).\n\n## `loading` property\nBoolean that the controller will set to `true` before an API request is made. Value is updated to `false` after an API request has completed.","image":"","sku":"sku/package-storeMobx-abstract","id":"/package-storeMobx-abstract","categoryHierarchy":"Packages > Store > Abstract"}
{"name":"Autocomplete","route":"/package-storeMobx-autocomplete","price":0,"description":"# AutocompleteStore\nThe autocomplete store is meant to hold the suggest and search API response and associated state. It extends the AbstractStore and the recommend response by adding several additional properties and methods to make working with the data easier.\n\n```typescript\nimport { AutocompleteStore } from '@searchspring/snap-store-mobx'\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst autocompleteConfig = {\n\tid: 'autocomplete',\n\tselector: '#searchInput',\n\tsettings: {\n\t\tsyncInputs: true\n\t},\n};\n\nconst autocompleteUrlManager = new UrlManager(new UrlTranslator()).detach();\nconst store = new AutocompleteStore(autocompleteConfig, { urlManager: autocompleteUrlManager });\n\nstore.update(data);\n\nconsole.log(store.toJSON());\n```\n\n## `updateTrendingTerms` method\nUsed to update the store with trending terms data\n\n## `setService` method\nUsed to update any services on the store\n\n## `reset` method\nReset store to the initial state by clearing data and locks\n\n```typescript\nstore.reset()\n```\n\n## `resetTerms` method\nSets all term suggestions to inactive\n\n## `resetTrending` method\nSets all trending term suggestions to inactive\n\n## `meta` property\nThe meta property is an object containing the meta data retrieved from the Searchspring [Meta API](https://snapi.kube.searchspring.io/api/v1/#tag/Meta)\n\n## `state` property\nContains autocomplete lock state\n\nA \"lock\" refers to a locked state of a certain component of autocomplete. There are two lock components of autocomplete:\n\n`state.locks.terms` - this becomes locked when a term's `preview` method is called, resulting in the terms not changing while the user interacts with the facets and results for the locked term. Without locking, Autocomplete API requests from user interaction would cause the terms to change unexpectedly\n\n`state.locks.facets`, similar to the terms lock, this prevents facets from changing when interacting with other facets\n\n<!-- TODO: explain locks better? -->\n\n\n### `locks` property\nThe `locks` object contains two properties:\n\n- `terms` property contains a Lock object\n\n- `facets` property contains a Lock object\n\n### `focusedInput` property\nContains a reference to the current focused `HTMLInputElement`\n\n### `input` property\nContains the currently focused input value being searched\n\n### `url` property\nContains a reference to the [UrlManager](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager) that was linked using the `link` method\n\n## `Lock` object\nA `Lock` object contains a private boolean state. The initial state can be defined in the constructor, default is `false`\n\n### `reset` method\nSets lock state to the original starting state when the Lock was constructed\n\n### `lock` method\nSets lock state to `true`\n\n### `unlock` method\nSets lock state to `false`\n\n### `locked` getter\nBoolean `true` if the Lock state is locked\n\n```typescript\nlet lock;\nlock = new Lock()\nconsole.log(lock.locked) // false\n\nlock = new Lock(false)\nconsole.log(lock.locked) // false\nlock.lock()\nconsole.log(lock.locked) // true\nlock.reset();\nconsole.log(lock.locked) // false\n\nlock = new Lock(true)\nconsole.log(lock.locked) // true\nlock.unlock()\nconsole.log(lock.locked) // false\nlock.reset();\nconsole.log(lock.locked) // true\n```\n\n## `storage` property\nContains a reference to the [StorageStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Storage)\n\n<!-- TODO: update link -->\n\n## `merchandising` property\nContains redirect and banner merchandising data that the Search API returned. See [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `merchandising` property\n\n## `search` property\nContains an object with the following properties:\n\n`query` - query that was searched\n\n`originalQuery` - Original query if spell correction occurred\n\n## `terms` property\nAn array of `Term` objects.\n\n## `trending` property\nAn array of trending `Term` objects.\n\n## `Term` object\nEach `Term` object corresponds to a term returned from the Autocomplete API and/or Suggest API\n\n### `active` property\nBoolean set to `true` when the term is active, such when invoking the `preview` method\n\n### `value` property\nTerm text value\n\n### `url` property\nSet to an instance of UrlManager for the term\n\n### `preview` method\nQuery API for the term that was previewed and displays results.\nThis will also lock the term state, and unlock facets state. \n\n\n## `facets` property\nAn array of facets. See [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `facets` property\n\nIn addition to all the search facets functionally, the Autocomplete facets will have an added `preview` method\n\n### `preview` method\nSee [terms.preview](#AutocompletePreview) for `facets.preview` usage\n\n\n## `filters` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `filters` property\n\n## `results` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `results` property\n\n## `pagination` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `pagination` property\n\n## `sorting` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `sorting` property","image":"","sku":"sku/package-storeMobx-autocomplete","id":"/package-storeMobx-autocomplete","categoryHierarchy":"Packages > Store > Autocomplete"}
{"name":"Finder","route":"/package-storeMobx-finder","price":0,"description":"# FinderStore\nThe finder store is meant to hold the API response and associated selection state. It extends the AbstractStore and the search response by adding several additional properties and methods to make working with the data easier.\n\n```typescript\nimport { FinderStore } from '@searchspring/snap-store-mobx'\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst finderConfig = {\n\tid: 'finder',\n\turl: '/search',\n\tfields: [\n\t\t{\n\t\t\tfield: 'ss_tire',\n\t\t\tlabel: 'Wheel Finder',\n\t\t\tlevels: ['Year', 'Make', 'Model', 'Wheel Size']\n\t\t},\n\t]\n};\n\nconst finderUrlManager = new UrlManager(new UrlTranslator()).detach(0);\nconst store = new FinderStore(finderConfig, { urlManager: finderUrlManager });\n\nstore.update(data);\n\nconsole.log(store.toJSON());\n```\n\n## `meta` property\nThe meta property is an object containing the meta data retrieved from the Searchspring [Meta API](https://snapi.kube.searchspring.io/api/v1/#tag/Meta)\n\n## `pagination` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `pagination` property\n\n## `selections` property\nAn array of `Selection` and `SelectionHierarchy` objects. Each object represents a finder dropdown selection.\n\nBoth object types will have the following properties:\n\n### `select` method\nThe `select` method should be invoked when a selection has been made, such as in the onChange event of a `<select>` element\n\n```jsx\n{selections.map((selection) => {\n\t<select onChange={(e) => {\n\t\tselection.select(e.target.value)\n\t}}>\n\t\t{selection.values.map((value) => {\n\t\t\t<option value={value}>{value}</option>\n\t\t})}\n\t</select>\n})}\n```\n\n```typescript\nconst value = selections[0].values[0]\nselections[0].select(value)\n```\n\n### `config` property\n\nA reference to the selection config object that was provided to the [FinderController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Finder)\n\n### `data` property\nA reference to the data stored in the [StorageStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Storage) for this selection\n\n### `storage` property\nA reference to the [StorageStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Storage)\n\n### `controller` property\nA reference to the [FinderController](https://github.com/searchspring/snap/tree/main/packages/snap-controller/src/Finder)\n\n### `type` property\nInherited from `facet.type` of the facet name that was provided in the config\n\n### `field` property\nInherited from `facet.field` of the facet name that was provided in the config\n\n### `filtered` property\nInherited from `facet.filtered` of the facet name that was provided in the config\n\n### `collapse` property\nInherited from `facet.collapse` of the facet name that was provided in the config\n\n### `display` property\nInherited from `facet.display` of the facet name that was provided in the config\n\n### `label` property\nInherited from `facet.label` of the facet name that was provided in the config\n\n### `multiple` property\nInherited from `facet.multiple` of the facet name that was provided in the config\n\n### `id` property\nA reference to the `id` property on the config \n\n### `disabled` property\nBoolean set to `true` if this selection is disabled. A `Selection` object will be disabled if it does not contain any values. A `SelectionHierarchy` object will be disabled to enforce the user selects dropdowns in hierarchical order, or there are no further selections available\n\n### `selected` property\nContains the value of the selection that was made. \n\n### `custom` property\n\nSee [`custom` property](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Abstract)","image":"","sku":"sku/package-storeMobx-finder","id":"/package-storeMobx-finder","categoryHierarchy":"Packages > Store > Finder"}
{"name":"Recommendation","route":"/package-storeMobx-recommendation","price":0,"description":"# RecommendationStore\nThe recommendation store is meant to hold the recommend and profile API response and associated state. It extends the AbstractStore and the recommend response by adding several additional properties and methods to make working with the data easier.\n\n```typescript\nimport { RecommendationStore } from '@searchspring/snap-store-mobx'\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst recommendationConfig = {\n\tid: 'recommendation',\n\ttag: 'also-bought'\n};\n\nconst recommendationUrlManager = new UrlManager(new UrlTranslator()).detach(0);\nconst store = new RecommendationStore(recommendationConfig, { urlManager: recommendationUrlManager });\n\nstore.update(data);\n\nconsole.log(store.toJSON());\n```\n\n## `reset` method\nReset store to the initial state by clearing data\n\n```typescript\nconst store = new RecommendationStore();\n\nstore.reset()\n```\n\n## `profile` property\nContains an object with the following properties:\n\n`tag` - the profile unique tag (set in SMC)\n\n`placement` - location of the profile on a site (set in SMC)\n\n`display` - object containing details regarding the template and any template parameters\n## `results` property\nSee [SearchStore](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Search) `results` property","image":"","sku":"sku/package-storeMobx-recommendation","id":"/package-storeMobx-recommendation","categoryHierarchy":"Packages > Store > Recommendation"}
{"name":"Search","route":"/package-storeMobx-search","price":0,"description":"# SearchStore\nThe search store is meant to hold the search API response and associated state. It extends the AbstractStore and the search response by adding several additional properties and methods to make working with the data easier.\n\n## `meta` property\nThe meta property is an object containing the meta data retrieved from the Searchspring [Meta API](https://snapi.kube.searchspring.io/api/v1/#tag/Meta). The majority of this data is used elsewhere in constructing other SearchStore data like 'sorting' and 'facets'.\n\n## `merchandising` property\n\nContains redirect and banner merchandising data returned by the Search API.\n\n`merchandising.redirect` - merchandising redirect URL\n\n`merchandising.content` - merchandising banner object that has `ContentType` key and value containing an array of single or more banners.\n\n```typescript\nenum ContentType {\n\tHEADER = 'header',\n\tBANNER = 'banner',\n\tFOOTER = 'footer',\n\tLEFT = 'left',\n\tINLINE = 'inline',\n}\n```\n\n## `search` property\nContains information about the query that was requested from the Search API.\n\n`search.query` - Query object - query that was searched\n\n`search.didYouMean` - Query object - suggested query when no results are found\n\n`search.originalQuery` - Query object - original query if spell correction occurred\n\n### Query object\nAn Query object contains the respective query `string` and generated query `url`.\n\n```typescript\n{\n\tstring: 'dress',\n\turl: '/?q=dress'\n}\n```\n\nAn example in JSX:\n\n```jsx\n{\n\tsearch?.originalQuery && \n\t<div>\n\t\tSearch instead for \"<a href={ search.originalQuery.url }>{ search.originalQuery.string }</a>\"\n\t</div>\n}\n```\n\n## `facets` property\n\nContains an array of facet objects pertaining to the current query. The facet objects will be a superset of the API response with several helper funcitons and properties added on.\n\nAll facets contain the following base properties:\n\n```typescript\n{\n\ttype: 'range',\n\tfield: 'ss_price',\n\tfiltered: false,\n\tcustom: {},\n\tcollapse: false,\n\tdisplay: 'slider',\n\tlabel: 'Price',\n\tstorage: {},\n}\n```\n\n### `type` property\n\nThe type property will be one of three values:\n\n#### `value` type\nThis is the default facet type.\n\n#### `range` type\nRange facets can only apply to a field that contains all numerical values. It is typically seen in use for price sliders.\n\nIn addition to the base properties, facets of type `range` will contain the following properties:\n\n```typescript\n{\n\tstep: 5,\n\trange: {\n\t\tlow: 0,\n\t\thigh: 0\n\t},\n\tactive: {\n\t\tlow: 0,\n\t\thigh: 0\n\t},\n\tformatSeparator: '',\n\tformatValue: ''\n}\n```\n\n#### `range-buckets` type\nSimilar to value facets, with the added ability to group values into \"buckets\".\n\nFor example, a price facet with a range-buckets type would typically be used to create the following groups:\n```\nLess than $10\n$10 - $20\n$20 - $50\n$50 and up\n```\n\n### `field` property\n\nContains the field name, ie. 'ss_price'.\n\n### `filtered` property\n\nIf any of the facet's values have been filtered, the facet `filtered` property will be `true`.\n\n### `custom` property\nSee [`custom` property](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Abstract)\n\nExample inside of a `SearchController` middleware:\n\n```typescript\ncntrlr.on('afterStore', async ({ controller }, next) => {\n\tcontroller.store.facets.forEach(facet => {\n\t\tfacet.custom = { description: `Choose a ${facet.label}...`}\n\t})\n\tawait next();\n});\n\ncntrlr.on('afterStore', async ({ controller }, next) => {\n\tconst colorFacet = controller?.store?.facets.filter((facet) => facet.field == 'color_family').pop();\n\tcolorFacet?.values.forEach((value) => {\n\t\tvalue.custom = {\n\t\t\tcolorImage: `www.storfront.com/images/swatches/${value.value}.png`,\n\t\t};\n\t});\n\n\tawait next();\n});\n```\n\n### `collapse` property\n\nCollapse state that will contain an initial state that can be defined in the Searchspring Management Console, or toggled programmatically using `toggleCollapse()`.\n\n\n### `display` property\nContains the facet display type as configured in the Searchspring Management Console.\n\n```typescript\nenum FacetDisplay {\n\tGRID = 'grid',\n\tPALETTE = 'palette',\n\tLIST = 'list',\n\tSLIDER = 'slider',\n\tHIERARCHY = 'hierarchy',\n}\n```\n\n### `label` property\nContains the facet label as configured in the Searchspring Management Console.\n\n### `storage` property\nThis is a reference to the `StorageStore` instance that is used to store the current facet state for `collapse` and `overflow`; this preserves these states as additional API queries are made (think faceting, pagination, etc...). The `SearchStore` automatically manages this stored state.\n\n### `step` property\nOnly applicable to facets where `type` is `range`.\n\nThe step value is calculated by the API based on the min and max values of the range. It is typically used to set the step attribute of an input element:\n\n```jsx\n<input type=\"range\" step={facet.step} min={facet.active.low} max={facet.active.high} />\n```\n\n### `range` property\nOnly applicable to facets where `type` is `range`.\n\nContains an object with `low` and `high` properties. This represents the absolute low and high that are available.\n\n### `active` property\nOnly applicable to facets where `type` is `range`.\n\nContains an object with `low` and `high` properties. This represents the currently 'active' or filtered low and high values.\n\n### `formatSeparator` property\nOnly applicable to facets where `type` is `range`.\n\nThe text to separate `min` and `max` values. Typically set to `-` and is configured in the Searchspring Management Console.\n\n\n### `formatValue` property\nOnly applicable to facets where `type` is `range`.\n\nA [printf format string](https://en.wikipedia.org/wiki/Printf_format_string) for how to format numerical values.\n\nConfigurable in the Searchspring Management Console and typically set to `$%01.2f`.\n\nFor example, `9.99` with a formateValue of `$%01.2f` will be formatted to `$9.99`.\n\n### `values` property\nOnly applicable to facets where `type` is `value` or `range-buckets`.\n\nContains an array of facet value objects for this facet.\n\n#### `values` object with facet type `value`\n\nIf the facet `display` property is `hierarchy`, the object will contain the following properties:\n\n`level` - numerical hierarchy level, set to `0` if no hierarchy selections have been selected yet\n\n`history` - boolean set to true if the value's level is less than or equal to the filtered level\n\nOtherwise, If the facet `display` property is `palette`, `list`, or `slider`, the object will contain the following properties:\n\n`label` - inherited from facet\n\n`count` - inherited from facet\n\n`filtered` - inherited from facet\n\n`value` - inherited from facet\n\n`custom` - inherited from facet\n\n`url` - generated URL for this value\n\n#### `values` object for type `range-buckets`\nObject will contain the following properties:\n\n`label` - inherited from facet\n\n`count` - inherited from facet\n\n`filtered` - inherited from facet\n\n`low` - inherited from facet\n\n`high` - inherited from facet\n\n`custom` - inherited from facet\n\n`url` - generated URL for this value\n\n\n### `search` property\nOnly applicable to facets where `type` is `value` or `range-buckets`\n\nAn object with a single key:\n\n`input` - search term to filter values\n\nTypical usage is to use this with a search input for each facet, allowing a user to filter a large list of facet values.\n\n\n### `multiple` property\n\nOnly applicable to facets where `type` is `value` or `range-buckets`\n\nFacet `multiple` can be configured per facet in the Searchspring Management Console to the following values:\n\n`single` - a facet can only contain a single active selection at any given time\n\n`or` - a facet can have multiple active selections and the filtered results will contain a result set that matches any selections. For example, selecting a 'shoe size' facet value of '12' and '12.5' will yield results containing any shoe size of '12' or '12.5'\n\n`and` - a facet can have multiple active selections and the filtered results will contain a result set that matches all selected values. For example, selecting a 'color' facet value of 'red' and 'pink' will yield results that contain both a 'color' of 'red' and 'pink' variants\n\n```typescript\nenum FacetMultiple {\n\tSINGLE = 'single',\n\tOR = 'or',\n\tAND = 'and',\n}\n```\n\n\n### `overflow` property\nOnly applicable to facets where `type` is `value` or `range-buckets`\n\nFacet overflow state to handle the 'show more' facet functionality. \n\n#### `enabled` property\nBoolean containing the overflow active state\n\n#### `limited` property\nBoolean containing the saved overflow active state from StorageStore. This allows the state to be remembered across page navigation via StorageStore.\n\n#### `limit` property\nNumber of values to display before overflow occurs\n\n#### `remaining` property\nNumber of values remaining in the overflow.  `remaining = values.length - overflow.limit`\n\n#### `setLimit` function\nSet limit value. This is the number of values to display before the remaining values overflow\n\n```typescript\nfacet.overflow.setLimit(10)\n```\n\n#### `toggle` function\nToggles collapse state. \n\nTypical usage would be to invoke `toggle` when the 'show more/less' is clicked.\n\n```typescript\nfacet.overflow.toggle()\n```\n\n#### `calculate` function\nRecalculates overflow state. Is also invoked when `setLimit` or `toggle` has been invoked.\n\n\n## `filters` property\n\nContains an array of filter object for the refined query requested to the Search API\n\n### `filter` type `range` object\nFilter objects that contain a filter `type` of `range`, will have the following properties:\n\n`facet` - an object containing the following properties: `field` - facet field name & `label` - facet label\n\n`value` - an object containing the following properties: `low` - facet low value & `high` - facet high value & `label` - facet label\n\n`label` - value label is prepended with facet label, ie. `` `${filter.facet.label}: ${filter.value.label}` ``\n\n`url` - generated URL for this value\n\n### `filter` type `value` or `range-buckets` object\nFilter objects that contain a filter `type` of `value` or `range-buckets`, will have the following properties:\n\n`facet` - an object containing the following properties: `field` - facet field name & `label` - facet label\n\n`value` - an object containing the following properties: `value` - facet value & `label` - facet label\n\n`label` - value label is prepended with facet label, ie. `` `${filter.facet.label}: ${filter.value.label}` ``\n\n`url` - generated URL for this value\n\n\n## `results` property\n\nContains an array of products that matched the query to the Search API. This will also include any merchandising inline banners.\n\n### `type` property\nThe `type` property has two possible values:\n\n- `product` - a product entry\n\n- `banner` - an inline banner entry\n\n### `id` property\nInternal product id.\n\nIf `type` is `banner`, id will be set to `` `ssid-${banner.config.position.index}` ``\n\n### `attributes` property\nOnly applicable to results with `type` of `product` or `child`\nProduct attributes object. Will contain all attributes that have been indexed and enabled in the Searchspring Management Console\n\n```json\n\"attributes\": {\n\t\"intellisuggestData\": \"eJwrTs4tNM9jYGBw1nV00Q031DW0MLMMYDAEQmMDBhMTMwOG9KLMFACyXAiS\",\n\t\"intellisuggestSignature\": \"25f3b12a880fa4342274c97a9c105f0736c026e71b12ca0a7b297e357b099b7d\",\n\t\"ss_insights_quadrant\": \"Best Performer\",\n\t\"gross_margin\": \"70\",\n\t\"ss_product_type\": \"Dress\",\n\t\"keywords\": [\n\t\t\"off the shoulder\",\n\t\t\"striped\",\n\t\t\"stripes\",\n\t\t\"stripe\",\n\t\t\"open shoulder\",\n\t\t\"open back\",\n\t\t\"preppy\",\n\t\t\"seersucker\",\n\t\t\"white\",\n\t\t\"white dress\",\n\t\t\"white\",\n\t\t\"summer\",\n\t\t\"spring\"\n\t],\n\t\"color\": [\n\t\t\"White\",\n\t\t\"Navy\",\n\t\t\"Cream\"\n\t],\n\t\"dress_length_name\": \"Mini\",\n\t\"multi_colors\": \"yes\",\n\t\"pattern\": \"Stripe\",\n\t\"description\": \"Are you Stripe Out of ideas for what to wear this weekend on that trip you've got coming up with your friends? Afraid you'll be the odd one out and everyone else will be all cute and trendy and there you'll be ... not trendy and wearing the same old things you've been wearing on this annual getaway for years? Lucky for you, here's the dress you've been searching for. Doesn't matter what else you pack (it does, you'll want to continue to shop with us, we were just being nice) this is the piece that will set you apart from everyone else (that is absolutely true, you will be a Goddess among women). Take that, bad fashion moments of the past! Striped dress features 3/4 sleeve bell sleeves with a partially elastic/open back. Model is wearing a small. • 97% Cotton 3% Spandex • Machine Wash Cold • Lined • Made in the USA\",\n\t\"title\": \"Stripe Out White Off-The-Shoulder Dress\",\n\t\"ss_clicks\": \"4141\",\n\t\"saturation\": \"low\",\n\t\"color_family\": [\n\t\t\"White\"\n\t],\n\t\"sales_rank\": \"4461\",\n\t\"ss_sale_price\": \"48\",\n\t\"season\": \"Summer\",\n\t\"ss_category_hierarchy\": [\n\t\t\"Shop By Trend\",\n\t\t\"All Dresses\",\n\t\t\"All Dresses&gt;Casual Dresses\",\n\t\t\"Shop By Trend&gt;Spring Preview\",\n\t\t\"All Dresses&gt;Shop by Color\",\n\t\t\"All Dresses&gt;Print Dresses\",\n\t\t\"Gifts for Her\",\n\t\t\"Shop By Trend&gt;Off The Shoulder Trend\",\n\t\t\"Gifts for Her&gt;Gifts Under $50\",\n\t\t\"All Dresses&gt;Shop by Color&gt;White Dresses\"\n\t],\n\t\"on_sale\": \"No\",\n\t\"condition\": \"New\",\n\t\"product_type\": [\n\t\t\"All Dresses &gt; Shop by Color &gt; White Dresses\",\n\t\t\"All Dresses &gt; Shop by Color\",\n\t\t\"All Dresses &gt; Print Dresses\",\n\t\t\"Shop By Trend &gt; Off The Shoulder Trend\",\n\t\t\"Shop By Trend &gt; Spring Preview\",\n\t\t\"All Dresses &gt; Casual Dresses\",\n\t\t\"Gifts for Her\",\n\t\t\"Gifts for Her &gt; Gifts Under $50\"\n\t],\n\t\"brightness\": \"high\",\n\t\"size\": [\n\t\t\"Small\",\n\t\t\"Medium\",\n\t\t\"Large\"\n\t],\n\t\"material\": \"Cotton\",\n\t\"days_since_published\": \"8\",\n\t\"dress_length\": \"34\",\n\t\"size_dress\": [\n\t\t\"Small\",\n\t\t\"Medium\",\n\t\t\"Large\"\n\t],\n\t\"quantity_available\": \"13\",\n\t\"popularity\": \"4461\",\n\t\"product_type_unigram\": \"dress\",\n\t\"id\": \"7790a0f692035da40c8504e8b7a9f31d\"\n}\n```\n\n### `mappings.core` property\nOnly applicable to results with `type` of `product`\n\nCore product attributes object\n\n```json\n\"mappings\": {\n\t\"core\": {\n\t\t\"uid\": \"182146\",\n\t\t\"price\": 48,\n\t\t\"msrp\": 50,\n\t\t\"url\": \"/product/C-AD-W1-1869P\",\n\t\t\"thumbnailImageUrl\": \"https://searchspring-demo-content.s3.amazonaws.com/demo/fashion/product_images_thumb_med/4468_copyright_reddressboutique_2017__thumb_med.jpg\",\n\t\t\"imageUrl\": \"https://searchspring-demo-content.s3.amazonaws.com/demo/fashion/product_images_large/4468_copyright_reddressboutique_2017__large.jpg\",\n\t\t\"name\": \"Stripe Out White Off-The-Shoulder Dress\",\n\t\t\"sku\": \"C-AD-W1-1869P\",\n\t\t\"brand\": \"Adrienne\"\n\t}\n},\n```\n\n\n### `children` property\nOnly applicable to results with `type` of `product`\n\nArray of product variants. Each variant contains the same properties as the parent object with the following differences:\n\n`type` will be `child`\n\n`id` will contain the id of the parent with a suffix of the variant index.\n\n`mappings` is not present. All attributes can be found in `attributes`\n\n\n### `custom` property\nSee [`custom` property](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx/src/Abstract)\n\n\n\n### `config` property\nOnly applicable to results with `type` of `banner`\n\nBanner config object inherited from merchandising inline banner `config` object\n\n### `value` property\nOnly applicable to results with `type` of `banner`\n\nBanner value inherited from merchandising inline banner `value` property\n\n\n## `pagination` property\n\nContains pagination information for the query that was requested from the Search API\n\n### `page` property\nThe current page\n\n### `pageSize` property\nThe number of products displayed per page\n\n### `defaultPageSize` property\nThe default number of results per page. Default is `24`.\n\n### `pageSizeOptions` property\nAn array of objects containing results per page options. Typically used in a `<select>` dropdown to change the number of results displayed per page.\n\n`label` - label text to display\n\n`value` - number of results for this selection\n\nDefault values:\n```typescript\n[\n\t{\n\t\tlabel: `Show ${this.defaultPageSize}`,\n\t\tvalue: this.defaultPageSize,\n\t},\n\t{\n\t\tlabel: `Show ${this.defaultPageSize * 2}`,\n\t\tvalue: this.defaultPageSize * 2,\n\t},\n\t{\n\t\tlabel: `Show ${this.defaultPageSize * 3}`,\n\t\tvalue: this.defaultPageSize * 3,\n\t},\n]\n```\n\n### `totalResults` property\nThe total results for the current query.\n\n### `begin` getter\nThe number of the first product position on the current page.\nFor example, if the `pageSize` is `24` and the current page is `2`, `pagination.begin` will return `25`.\n\n### `end` getter\nThe number of the last product position on the current page.\nFor example, if the `pageSize` is `24` and the current page is `2`, `pagination.begin` will return `48`.\n\n### `totalPages` getter\nThe total number of pages.\n\n### `multiplePages` getter\nBoolean returned showing if there is more than one page.\n\n### `current` getter\nReturns a `Page` object of the current page.\n\n### `first` getter\nReturns a `Page` object of the first page.\n\n### `last` getter\nReturns a `Page` object of the last page.\n\n### `next` getter\nReturns a `Page` object of the next page.\n\n### `previous` getter\nReturns a `Page` object of the previous page.\n\n### `getPages` method\nReturns an array of `Page` objects.\n\nTypical usage to retrieve 5 pages:\n```typescript\nconst pages = getPages(5) // 1, 2, *3*, 4, 5\n```\n\nTypical usage to retrieve 2 pages to the left, and 5 pages to the right of the active page\n```typescript\nconst pages = getPages(2, 5) // 2, 3, *4*, 5, 6, 7, 8\n```\n\n<!-- TODO: confim example is correct -->\n\n### `setPageSize` method\nSets `pageSize` and performs a query. Typical usage would be to invoke `setPageSize` on the `onChange` event the results per page dropdown:\n\n```jsx\nonChange={(e) => {\n\tpagination.setPageSize(e.target.value);\n}}\n```\n\n### `Page` object\nA page object is returned when invoking the following getters/methods: `current`, `first`, `last`, `next`, `previous`, `getPages`.\n\n#### `number` property\nThe number of the page.\n\n#### `active` property\nBoolean showing if this page is the 'active' or current page.\n\n#### `url` property\nSet to an instance of UrlManager for the page. Typical usage would be to tie into the linker of the UrlManager and attach the `href` and `onclick` properties.\n\n#### `key` property\nA unique value (set to `url.href`) available to use as a `key` prop when rendering [react keys](https://reactjs.org/docs/lists-and-keys.html).\n\n\n## `sorting` property\n\nContains sorting information that was requested from the Meta API.\n\n### `options` property\nAn array of sorting Option objects.\n\n### `current` getter\nReturns an `Option` object of the current selected sort option\n\n### `Option` object\n\n#### `active` property\nBoolean set `true` if this option is the current selection\n\n#### `default` property\nBoolean set `true` if this option is the first selection\n\n#### `field` property\nThe field name of the sorting option ie. 'ss_price'\n\n#### `label` property\nLabel of this sorting, ie. 'Price'\n\n#### `direction` property\nSorting direction. It will be one of two possible values:\n\n`asc` - ascending\n\n`desc` - descending\n\n#### `type` property\nSorting type. Will be one of two possible values:\n\n`field` - the Option is sorting using a field\n\n`relevance` - the Option is sorting by relevance\n\n#### `value` property\nThe value of the sorting Option, set to `` `${option.field}:${option.direction}` ``, ie. 'ss_price:asc'\n\n#### `url` property\nSet to an instance of UrlManager for the sorting Option. ","image":"","sku":"sku/package-storeMobx-search","id":"/package-storeMobx-search","categoryHierarchy":"Packages > Store > Search"}
{"name":"Storage","route":"/package-storeMobx-storage","price":0,"description":"# StorageStore\nAn interface for storing data in the browser session storage, local storage, cookies, or memory\n\n```typescript\nimport { StorageStore } from '@searchspring/snap-store-mobx';\n\nconst config = {\n\ttype: 'session',\n\tkey: 'ss-storage'\n}\n\nconst storage = new StorageStore(config)\n\nstorage.set('path', 'value')\nconst sessionData = storage.get() \nconsole.log(sessionData) // { 'ss-storage': { 'path': 'value' } }\n\nstorage.get('path') // 'value'\n```\n\n## `config` object\nIf `config` is not provided, storage will be saved to its internal `state` object\n\n`type` - the type of storage to use: `session`, `local`, or `cookie`\n\n`key` - root level key prefix, default is 'ss-storage'\n\n`cookie` - cookie config object, only required if type is `cookie`\n\n`cookie.expiration` - cookie expiration in ms, default is 31536000000 (1 year)\n\n`cookie.sameSite` - cookie sameSite attribute, allows you to declare if cookies should be restricted to a first-party or same-site context, default is undefined\n\n```typescript\nconst config = {\n\ttype: 'cookie',\n\tkey: 'ss-storage',\n\tcookie: {\n\t\texpiration: 31536000000,\n\t\tsameSite: '',\n\t},\n}\t\n```\n\n## `set` method\nAccepts a path and value to save to storage\n\n```typescript\nstorage.set(`facet.values`, facet.values)\n```\n\n## `get` method\nRetrieves a value by path from storage\n\n```typescript\nstorage.get(`facet.values`)\n```\n\nIt is also possible to retrieve the entire storage without providing a path:\n\n```typescript\nstorage.get()\n```\n\n## `clear` method\nClears all data from storage\n\n```typescript\nstorage.clear()\n```\n\n## `state` property\nIf a config has not been provided, the StorageStore will manage its `state` object instead of using session storage, local storage, or cookies. \n\nThis `state` object can be accessed directly:\n\n```typescript\nstorage.state\n```\n\n## `type` property\nThe type of storage that was provided in the `config.type` property\n\n## `key` property\nThe key prefix that was provided in the `config.key` property\n\n## `expiration` property\nThe cookie expiration that was provided in the `config.cookie.expiration` property\n\n## `sameSite` property\nThe cookie sameSite attribute that was provided in the `config.cookie.sameSite` property\n\n","image":"","sku":"sku/package-storeMobx-storage","id":"/package-storeMobx-storage","categoryHierarchy":"Packages > Store > Storage"}
{"name":"Url Manager","route":"/package-urlManager","price":0,"description":"# Snap URL Manager\n\n\nThe Snap URL manager is a service that provides customizable frontend URL management and a means to subscribe to the URL for changes. It's primary purpose is to provide a standard API to manage URL across Snap products.\n\n## Installation\n\n```sh\nnpm install --save-dev @searchspring/url-manager\n```\n\n## Import\n\n```js\nimport { UrlManager, UrlTranslator } from '@searchspring/url-manager';\n```\n\n## Instantiation\n\nThe UrlManager class takes one parameter. This is the translator that manages your URL scheme, as well as rules for updating the URL. For now, we'll use the included translator that uses query strings and hash fragments and utilizes pushState to modify the URL in the browser.\n\nSee [Translators](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators) for more info.\n\n```js\nconst urlManager = new UrlManager(new UrlTranslator());\n```\n\nDepending on the translator, the instantiated url manager will automatically start tracking from the browser URL.\n\n## Navigate to another location using transforms.\n\nLet's add a new parameter, `page=2`, to the browser's address bar.\n\n```js\nurlManager.merge({ page: 2 }).go();\n```\n\nIn this example, we first created a new url manager with internal state that reflects `page=2` . Url managers are never directly modified, but when merging or setting parameters, a new url manager is created with a new state.\n\nWe then updated the browser's address bar using `urlManager.go()` on the newly created url manager. Since the query string config translator is utilizing `location.pushState` behind the scenes,\nthis is the mechanism behind which the browsers address bar is updated in this example.\n\nThere are three functions to update one or more URL parameters: `set`, `merge` and `remove` . These functions are called transforms.\n\nWhen using `set`, other parameters will be clobbered and the URL will be set to exactly match the object passed in. All transforms can specify a path as the first parameter.\n\nPaths can be expressed in either of these formats:\n`'some.longer.path'` or `['some', 'longer', 'path']`\n\nTherefore, you can also accomplish this same transformation with the following:\n\n```js\nconst newManager = urlManager.set('page', 2);\n```\n\nThe page parameter can be removed with the following:\n\n```js\nconst newManager = urlManager.remove('page');\n```\n\nSetting a value in a longer, nested path would look like this:\n\n```js\nconst newManager = urlManager.set('facets.color', 'blue');\n```\n\nThis will produce 1 value for `facets.color` and remove any others.\n\nFor multiple values:\n\n```js\nconst newManager = urlManager\n\t.merge('facets.color', 'blue')\n\t.merge('facets.color', 'red');\n```\n\n## `href` property\n\nYou can access a url manager's href property at any time with\n\n```js\nurlManager.href;\n```\n\n## Many copies\n\nThere may be cases where you want multiple URL states stored for various purposes. Since\n`set`, `merge`, and `remove` create modified copies, instances can be created and utilized from multiple sources. Snap `stores` already handle the process of attaching `UrlManager' instances where needed, for example for pagination, facets, sorting, etc... Here is an example of how creating them for a facet's individual values might look:\n\n```js\nconst facetValuesWithUrls = (facet, facetValues) => {\n\treturn facetValues.map((facetValue) => {\n\t\treturn {\n\t\t\t...facetValue,\n\t\t\turl: urlManager.merge(['facet', facet.field], facetValue.value),\n\t\t};\n\t});\n};\n```\n\nNow, you can pass these as props to a Preact component:\n\n```js\nclass FacetValue {\n\trender({ facet, value }) {\n\t\treturn (\n\t\t\t<li>\n\t\t\t\t<a\n\t\t\t\t\thref={ value.url.href }\n\t\t\t\t\tonClick={(ev) => {\n\t\t\t\t\t\tev.preventDefault();\n\n\t\t\t\t\t\tvalue.url.go();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{value.label}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t);\n\t}\n}\n```\n\nSince the `UrlTranslator` is utilizing `pushState` it is important to prevent the default behavior as shown in the `onClick` above. Each translator can be instantiated with a `Linker` to make this even easier:\n\n```js\nimport { UrlManager, UrlTranslator, reactLinker } from '@searchspring/snap-url-manager';\nconst urlManager = new UrlManager(new UrlTranslator(), reactLinker);\n```\n\n```js\nclass FacetValue {\n\trender({ facet, value }) {\n\t\treturn (\n\t\t\t<li>\n\t\t\t\t<a {...value.url.link}>{value.label}</a>\n\t\t\t</li>\n\t\t);\n\t}\n}\n```\n\nSee [Linkers](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/linkers) for more info.\n\n## Subscribe to URL changes\n\nYou can subscribe to URL changes like so:\n\n```js\nurlManager.subscribe((prev, next) => {\n\tconsole.log(prev, next);\n});\n```\n\nThis callback is executed any time one of the url manager's `go` function is called.\n\nThe callback is passed two parameters: `prev` and `next`.\n\n`next` is the new state formed by a combination of the browsers URL, as well as any transformations done to the `urlManager` instance after it was either instantiated or copied using another urlManager's `copy` function.\n\n`prev` is the previous state from this urlManager instance.\n\n## Auto-synchronize with URL change\n\nRemember that url manager's internal state is never directly mutated, but instead, transforms return a fresh copy with a new\nstate. However, the internal state is always a modification on the _current_ URL.\n\nTake the following example:\n\n```js\nconst urlManager = new UrlManager(new UrlTranslator());\n\nconst urlManagerWithColor = urlManager.merge('filter.color_family', 'blue');\n\nconsole.log(window.location.href); // https://try.searchspring.com?q=dress\n\nconsole.log(urlManager.href); // ?q=dress\nconsole.log(urlManagerWithColor.href); // ?q=dress#/filter:color_family:Blue\n```\n\nYou can see that the href of `urlManager` matches the parameters of the page URL, while `urlManagerWithColor` has an additional parameter.\n\nNow let's navigate to a new URL using the `go` function and check the href's again:\n\n```js\nconst urlManagerWithNewParam = urlManager.merge({ newParam: 'newValue' });\n\nurlManagerWithNewParam.go();\nconsole.log(window.location.href); // https://try.searchspring.com?q=dress#/newParam:newValue\nconsole.log(urlManager.href); // ?q=dress#/newParam:newValue\nconsole.log(urlManagerWithNewParam.href); // ?q=dress#/newParam:newValue\n\nconsole.log(urlManagerWithColor.href); // ?q=dress#/filter:color_family:Blue/newParam:newValue\n```\n\nAs you can see, when calling `go()` all the URL managers were updated and know about the new URL parameter `newParam` while the internal\nstate of `urlManagerWithColor` remains unmodified. This holds true for removals as well:\n\n```js\nconst urlManagerWithColorButWithoutNewParam = urlManagerWithColor.remove('newParam');\n\nconsole.log(urlManager.href); // ?q=dress#/newParam:newValue\nconsole.log(urlManagerWithNewParam.href); // ?q=dress#/newParam:newValue\n\nconsole.log(urlManagerWithColor.href); // ?q=dress#/filter:color_family:Blue/newParam:newValuecolor=blue\nconsole.log(urlManagerWithColorButWithoutNewParam.href); // ?q=dress#/filter:color_family:Blue\n```\n\n**Note:** UrlManagers with different instantiations will not notify each other about URL updates. For example:\n\n```js\nconst originalUrlManager = new UrlManager(new QueryStringTranslator());\nconst secondaryUrlManager = originalUrlManager.set('foo', 'bar');\n\nconst disconnectedUrlManager = new UrlManager(new QueryStringTranslator());\n\noriginalUrlManager.set('example', '1').go();\n\nconsole.log(originalUrlManager.href); // ?example=1\nconsole.log(secondaryUrlManager.href); // ?example=1&foo=bar\n\nconsole.log(disconnectedUrlManager.href); // / (empty)\n```\n\nFor performance reasons, the url managers do not contain watchers or otherwise poll for URL changes. Instead, they rely upon the copy mechanism behind the transform functions to notify each other of changes.\n\nSince a `UrlManager` internal state is immutable, you do not have to worry about unintended side effects. The only side effect is changes to the URL itself, which is intended!\n","image":"","sku":"sku/package-urlManager","id":"/package-urlManager","categoryHierarchy":"Packages > Url Manager"}
{"name":"Translators","route":"/package-urlManager-translators","price":0,"description":"# UrlManager Translators\n\nThis is general documentation for translators. Translator-specific documentation:\n\n- [UrlTranslator](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/Url)\n- [QueryStringTranslator](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/Translators/QueryString)\n\nA `UrlManager` is instantiated with a translator. The `Translator` defines the behavior of the `UrlManager` instance. They have a couple jobs:\n\n1. get the current URL\n2. serialize and deserialize URL's\n3. provide configuration\n4. define `go` function behavior\n\n`Translator` typescript interface:\n\n```typescript\ninterface Translator {\n\tgetCurrentUrl(): string;\n\tgetConfig(): Record<string, unknown>;\n\n\tserialize(state: UrlState | ImmutableObject<UrlState>): string;\n\tdeserialize(url: string): UrlState;\n\n\tbindExternalEvents?(update: () => void): void;\n\n\tgo(url: string): void;\n}\n```\n\n## Instantiation\n\nA `Translator` is passed in to a `UrlManager` during construction:\n\n```js\nimport {\n\tUrlManager,\n\tUrlTranslator,\n} from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(new UrlTranslator());\n```\n\n## Overriding default behavior\n\nDefault behavior of an existing translator can be overridden by extending the class.\n\nConsider this mock translator:\n\n```js\n// filename: urls.test.ts\n\nlet url = '';\n\nclass MockTranslator extends QueryStringTranslator {\n\tgetCurrentUrl() {\n\t\treturn url;\n\t}\n\n\tgo(_url) {\n\t\turl = _url;\n\t}\n\n\tserialize(state) {\n\t\treturn '#' + JSON.stringify(state);\n\t}\n\n\tdeserialize(url) {\n\t\treturn JSON.parse(url.replace(/^#/, '') || '{}');\n\t}\n}\n\ndescribe('my test', () => {\n\tlet urlManager;\n\tbeforeEach(() => (urlManager = new UrlManager(new MockTranslator())));\n\n\t// your tests\n});\n```\n\nOr, this translator which uses the same format as the query translator, but uses hash fragments and avoids using the History API (for older browsers):\n\n```js\nclass HashTranslator extends QueryStringTranslator {\n\tgetCurrentUrl() {\n\t\treturn window.location.hash;\n\t}\n\n\tgo(hash) {\n\t\twindow.location.hash = hash;\n\t}\n\n\tserialize(state) {\n\t\treturn '#' + super.serialize(state).split('?').pop();\n\t}\n\n\tdeserialize(url) {\n\t\treturn super.deserialize('?' + url.replace(/^\\#?\\/*/, ''));\n\t}\n}\n```\n\n## Consistent internal state\n\nYou may have noticed in the typescript interface, serialize takes a `UrlState` type, while deserialize returns a `UrlState` type.\n\nThis is to ensure a canonical internal state structure when performing transforms (`set`, `merge`, `remove`) on the UrlManager. The benefit of this is that implementation code knows what state format to expect, regardless of how an individual translator encodes the URLs.\n\nTypescript type for `UrlState`:\n\n```typescript\nenum RangeValueProperties {\n\tLOW = 'low',\n\tHIGH = 'high',\n}\n\ntype UrlStateRangeValue = {\n\t[RangeValueProperties.LOW]: number | null;\n\t[RangeValueProperties.HIGH]: number | null;\n};\n\ntype UrlStateFilterType = string | number | boolean | UrlStateRangeValue;\n\ntype UrlStateFilter = {\n\t[fieldName: string]: UrlStateFilterType | Array<UrlStateFilterType>;\n};\n\ntype UrlStateSort = {\n\tfield: string;\n\tdirection: string;\n};\n\ntype UrlState = {\n\tpage?: number;\n\tpageSize?: number;\n\tquery?: string;\n\trq?: string;\n\toq?: string;\n\tfilter?: UrlStateFilter;\n\tsort?: UrlStateSort | Array<UrlStateSort>;\n\ttag?: string;\n\t[any: string]: unknown;\n};\n```\n\nMost (or all) fields are optional, but you can rely on them being a certain type if they do exist. For example, you know that `page` is always a number, regardless of what translator you're using. You also know that your implementation code can always rely on using `query` to get the search parameter, regardless of which URL parameter your translator is configured to use for that value.\n","image":"","sku":"sku/package-urlManager-translators","id":"/package-urlManager-translators","categoryHierarchy":"Packages > Url Manager > Translators"}
{"name":"QueryString Translator","route":"/package-urlManager-translators-queryString","price":0,"description":"# QueryStringTranslator\n\nThe `QueryStringTranslator` translator uses query strings with pushState (via History API) during navigation. All `UrlState` is read in and output via query parameters in the URL. This is accomplished via the `serialize` and `deserialize` methods.\n\n```js\nconst queryTranslator = new QueryStringTranslator();\n\nconst state = {\n\tfilter: {\n\t\tcolor: ['red', 'orange'],\n\t\tbrand: ['adidas'],\n\t\tprice: [{ low: 99.99, high: 299.99 }],\n\t},\n\tpage: 7,\n\tquery: 'shoes',\n\tsort: [\n\t\t{\n\t\t\tfield: 'name',\n\t\t\tdirection: 'desc',\n\t\t},\n\t],\n};\n\nconst url = queryTranslator.serialize(state);\nconsole.log(url); // ?q=shoes&page=7&filter.color=red&filter.color=orange&filter.brand=adidas&filter.price.low=99.99&filter.price.high=299.99&sort.name=desc\n\n```\n\nAs you can see, all of the parameters in the state become query parameters to be used in the URL. The inverse occurs when running the `deserialize` method - a URL is passed in and a state containing all of the parameters is returned.\n\n```js\nconst url = '?q=shoes&page=7&filter.color=red&filter.color=orange&filter.brand=adidas&filter.price.low=99.99&filter.price.high=299.99&sort.name=desc';\n\nconst state = queryTranslator.deserialize(url);\n\nconsole.log(state);\n/*\n{\n\tfilter: {\n\t\tcolor: ['red', 'orange'],\n\t\tbrand: ['adidas'],\n\t\tprice: [{ low: 99.99, high: 299.99 }],\n\t},\n\tpage: 7,\n\tquery: 'shoes',\n\tsort: [\n\t\t{\n\t\t\tfield: 'name',\n\t\t\tdirection: 'desc',\n\t\t},\n\t],\n}\n*/\n```\n\nThe `serialize` and `deserialize` methods are abstracted away by the `UrlManager` and will typically never be used in this way, but have been included in here for insight.\n\n## Configuration\n\n| option | description | default value |\n|---|---|:---:|\n| queryParameter | used to specify a different query parameter for 'query' | 'q' |\n| urlRoot | used to redirect to other URLs | ➖ |\n\n<br>\n\n`queryParameter` is the paremeter used to drive searches. By default, it's `'q'`, so the UrlManager's internal `query` value will be `'foo'` if the URL matches `?q=foo`.\n\n`urlRoot` specifies a root URL to use when URLs are created in the `serialize` method.\n\nConsider a website with a different query parameter:\n\n```html\n<form id=\"search\" action=\"/search\">\n\t<input type=\"text\" name=\"search\" />\n\t<input type=\"submit\" value=\"Search\" />\n</form>\n```\n\nYou would want to override the default `queryParameter` and `urlRoot` options during instantiation of the `QueryStringTranslator`:\n\n```js\nimport { UrlManager, QueryStringTranslator } from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(new QueryStringTranslator({ queryParameter: 'search', urlRoot: '/search' }));\n\nurlManager.set({ query: 'green shirt' }).go();\n\nconsole.log(urlManager.state.query); // green shirt\nconsole.log(urlManager.href); // /search?search=green%20shirt\n```\n","image":"","sku":"sku/package-urlManager-translators-queryString","id":"/package-urlManager-translators-queryString","categoryHierarchy":"Packages > Url Manager > QueryString Translator"}
{"name":"Url Translator","route":"/package-urlManager-translators-url","price":0,"description":"# UrlTranslator\n\nThe `UrlTranslator` translator uses query strings and hash fragments in combination with pushState (via History API) during navigation. `UrlState` is read in and output via query parameters and hash fragments in the URL. This is accomplished via the `serialize` and `deserialize` methods.\n\n```js\nconst urlTranslator = new UrlTranslator();\n\nconst state = {\n\tfilter: {\n\t\tcolor: ['red', 'orange'],\n\t\tbrand: ['adidas'],\n\t\tprice: [{ low: 99.99, high: 299.99 }],\n\t},\n\tpage: 7,\n\tquery: 'shoes',\n\tsort: [\n\t\t{\n\t\t\tfield: 'name',\n\t\t\tdirection: 'desc',\n\t\t},\n\t],\n};\n\nconst url = urlTranslator.serialize(state);\nconsole.log(url); // ?q=shoes&page=7#/filter:color:red/filter:color:orange/filter:brand:adidas/filter:price:99.99:299.99/sort:name:desc\n\n```\n\nAs you can see, some of the parameters in the state become query parameters, and others hash fragments. The inverse occurs when running the `deserialize` method - a URL is passed in and a state containing all of the parameters is returned.\n\n```js\nconst url = '?q=shoes&page=7#/filter:color:red/filter:color:orange/filter:brand:adidas/filter:price:99.99:299.99/sort:name:desc';\n\nconst state = urlTranslator.deserialize(url);\n\nconsole.log(state);\n/*\n{\n\tfilter: {\n\t\tcolor: ['red', 'orange'],\n\t\tbrand: ['adidas'],\n\t\tprice: [{ low: 99.99, high: 299.99 }],\n\t},\n\tpage: 7,\n\tquery: 'shoes',\n\tsort: [\n\t\t{\n\t\t\tfield: 'name',\n\t\t\tdirection: 'desc',\n\t\t},\n\t],\n}\n*/\n```\n\nThe `serialize` and `deserialize` methods are abstracted away by the `UrlManager` and will typically never be used in this way, but have been included here for insight.\n\n## Configuration\n\n| option | description | default value |\n|---|---|:---:|\n| urlRoot | used to redirect to other URLs | ➖ |\n| settings.corePrefix | specify a prefix to all core parameters | ➖ |\n| settings.coreType | quickly change the type of all core parameters | ➖ |\n| settings.customType | specify how custom parameters should be serialized | 'hash' |\n| settings.rootParams | enables addition of urlRoot parameters | true |\n| parameters.core | optional mapping of core param names and types  | ➖ |\n| parameters.custom | optional mapping of custom param types | ➖ |\n\n<br>\n\n\n### Core Parameter Configuration\n\nDefault core parameter configuration:\n```javascript\nquery: { name: 'q', type: 'query' },\noq: { name: 'oq', type: 'query' },\nrq: { name: 'rq', type: 'query' },\ntag: { name: 'tag', type: 'query' },\npage: { name: 'page', type: 'query' },\npageSize: { name: 'pageSize', type: 'hash' },\nsort: { name: 'sort', type: 'hash' },\nfilter: { name: 'filter', type: 'hash' },\n```\n\nAll of the core parameters can be fully customized via the `parameters.core` configuration. For example, the `query` core parameter by default is named `'q'` and is set as a `query` parameter type. This could be changed to any query name and either `hash` or `query` parameter type.\n\n```js\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(\n\tnew UrlTranslator({\n\t\turlRoot: '/search.html',\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'thequery' },\n\t\t\t\tpage: { name: 'p', type: 'hash' },\n\t\t\t},\n\t\t},\n\t})\n);\n\nconst setUrlManager = urlManager.set({ query: 'blue shoe', page: 3 });\n\nconsole.log(setUrlManager.href); // /search.html?thequery=blue%20shoe#/p:3\n\n```\n\nIf you wanted to make all of the core parameters `query` or `hash` types, you could do so individually as shown above, or as a whole utilizing the `settings.coreType` configuration. Individual type configurations under `parameters.core` override the `coreType`.\n\nThe `settings.corePrefix` configuration allows for all of the core parameters to be prefixed with a string. This adds the specified prefix to the default or custom name configuration for each core parameter.\n\n```js\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(\n\tnew UrlTranslator({\n\t\turlRoot: '/search.html',\n\t\tsettings: {\n\t\t\tcoreType: 'hash',\n\t\t\tcorePrefix: 'ss-',\n\t\t},\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'que' },\n\t\t\t\tpage: { name: 'p' },\n\t\t\t},\n\t\t},\n\t})\n);\n\nconst setUrlManager = urlManager.set({ query: 'bright', page: 3, filter: { color: ['blue'] } });\n\nconsole.log(setUrlManager.href); // /search.html#/ss-que:bright/ss-p:3/ss-filter:color:blue\n\n```\n\n### Custom Parameter Configuration\n\nA custom parameter is any non-core parameter. The `UrlTranslator` will automatically determine how to handle parameters found in the URL when it is initialized. However for parameters that do not yet exist, the default behavior is to treat them as hash fragments. This can be customized using the `settings.customType` configuration. In the example below, the 'view' custom parameter is set as a `query` type and the 'store' custom parameter is set to a `hash` type (default `customType` setting of 'hash').\n\n```js\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(\n\tnew UrlTranslator({\n\t\turlRoot: '/search',\n\t\tparameters: {\n\t\t\tcustom: {\n\t\t\t\tview: { type: 'query' },\n\t\t\t},\n\t\t},\n\t})\n);\n\nconst setUrlManager = urlManager.set({ store: 'products', view: 'spring' });\n\nconsole.log(setUrlManager.state.store); // products\nconsole.log(setUrlManager.state.view); // spring\nconsole.log(setUrlManager.href); // /search?view=spring#/store:products\n\n```\n\n### urlRoot Configuration\n\n`urlRoot` specifies a root URL to use when URLs are created in the `serialize` method. By default any parameters in the `urlRoot` will be preserved and added to the final serialized URL; this can be disabled by setting the `settings.rootParams` configuration to `false`.\n\n```js\nimport { UrlManager, UrlTranslator } from '@searchspring/snap-url-manager';\n\nconst urlManager = new UrlManager(\n\tnew UrlTranslator({\n\t\turlRoot: '/search#view:grid',\n\t\tparameters: {\n\t\t\tcore: {\n\t\t\t\tquery: { name: 'search' },\n\t\t\t},\n\t\t},\n\t})\n);\n\nconst queriedUrlManager = urlManager.set({ query: 'green shirt', filter: { color: ['green'] } });\n\nconsole.log(queriedUrlManager.state.query); // green shirt\nconsole.log(queriedUrlManager.href); // /search?search=green%20shirt#/view:grid/filter:color:green\n```\n","image":"","sku":"sku/package-urlManager-translators-url","id":"/package-urlManager-translators-url","categoryHierarchy":"Packages > Url Manager > Url Translator"}
{"name":"Linkers","route":"/package-urlManager-linkers","price":0,"description":"# UrlManager Linkers\nA `linker` is passed in when instantiating a `UrlManager`. The `linker` provides convenience when using URLs with UI components. Different linkers are provided for the various frameworks that Snap supports.\n\nLinker-specific documentation:\n\n- [reactLinker](https://github.com/searchspring/snap/tree/main/packages/snap-url-manager/src/linkers/react)\n","image":"","sku":"sku/package-urlManager-linkers","id":"/package-urlManager-linkers","categoryHierarchy":"Packages > Url Manager > Linkers"}
{"name":"React Linker","route":"/package-urlManager-linkers-react","price":0,"description":"# React Linker\nThe `reactLinker` is passed in when instantiating a `UrlManager`. The `reactLinker` provides convenience when using URLs with UI components.\n\nIt is typically spread on an anchor tag when used.\n```js\n<a {...value.url.link}>{ value.label }</a>\n```\n\nType of object returned by `link`:\n```typescript\ntype linkObject = {\n\thref: string;\n\tonClick: (e: Event) => void;\n};\n```\n\nThe `onClick` provided by the `reactLinker` prevents the default behavior of the event and calls the `go()` method of the `UrlManager` that the linker is attached to.","image":"","sku":"sku/package-urlManager-linkers-react","id":"/package-urlManager-linkers-react","categoryHierarchy":"Packages > Url Manager > React Linker"}
{"name":"Event Manager","route":"/package-eventManager","price":0,"description":"# Snap Event Manager\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-event-manager\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-event-manager.svg?style=flat\"></a>\n\nThe Snap Event Manager is used to create events and attach middleware to them.\n\nWhen used as a service of a controller it allows you to hook into controller events at critical times in the life cycle. It also allows for custom events to be used throughout your implementation.\n\n\n## Dependency\n\nSnap Event Manager is a dependency of [@searchspring/snap-controller](https://github.com/searchspring/snap/tree/main/packages/snap-controller) <a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-event-manager\n```\n\n## Import\n```typescript\nimport { EventManager } from '@searchspring/snap-event-manager';\n```\n## Controller usage\nSnap Event Manager is a dependency of Snap Controller and it is recommended to use methods of the controller to attach events to the EventManager. Additionally, different events exist for the different controllers - see the Controller documentation for more details.\n\n## Standalone usage\n### `on` method\nUsed to attach middleware to an event. If the event name previously had middleware attached, it will add to the middleware stack.\n\n```typescript\nconst eventManager = new EventManager();\n\neventManager.on('interestingEvent', async (eventData, next) => {\n\t// do something with the eventData\n\n\t// pass control to the next middleware attached to the event\n\tawait next();\n\n\t// do something after other middleware has fired\n});\n```\n\nIf a middleware returns `false` the entire middleware flow is interrupted and any remaining middleware is not executed.\n\n### `fire` method\nInvoke custom event. Data passed into the second parameter gets handed off to the middleware attached with the `on` method.\n\n```typescript\neventManager.fire('interestingEvent', { data: { some: 'string' } });\n```\n\n## Middleware\nMiddleware provide a way for mutating or modifying the data passed in during the `fire` method.\n\n### Execution order\nThe first middleware attached with the `on` method is the first to execute. When calling `await next()`, control flows to the next attached middleware. This happens until the final middleware has been called after which control flows back up to the first middleware attached. The first middleware gets the first, and last opportunity to modify the data.\n\n### Order Flow Example\n\n```typescript\neventManager.on('interestingEvent', async (data, next) => {\n\tconsole.log('first middleware start');\n\tawait next();\n\tconsole.log('first middleware end');\n});\n\neventManager.on('interestingEvent', async (data, next) => {\n\tconsole.log('second middleware start');\n\tawait next();\n\tconsole.log('second middleware end');\n});\n\neventManager.on('interestingEvent', async (data, next) => {\n\tconsole.log('third middleware start');\n\tawait next();\n\tconsole.log('third middleware end');\n});\n\neventManager.fire('interestingEvent', { data: { some: 'string' } } );\n\n```\n\nAfter firing the `interestingEvent` event, the following would be displayed in the console:\n```text\nfirst middleware start\nsecond middleware start\nthird middleware start\nthird middleware end\nsecond middleware end\nfirst middleware end\n```","image":"","sku":"sku/package-eventManager","id":"/package-eventManager","categoryHierarchy":"Packages > Event Manager"}
{"name":"Profiler","route":"/package-profiler","price":0,"description":"# Snap Profiler\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-profiler\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-profiler.svg?style=flat\"></a>\n\nA utility for recording how long something takes to complete. `Profiler` is used in finding API response, component rendering and Middleware execution times.\n\n\n## Dependency\n\nSnap Profiler is a dependency of [@searchspring/snap-controller](https://github.com/searchspring/snap/tree/main/packages/snap-controller) <a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-profiler\n```\n\n## Import\n```typescript\nimport { Profiler } from '@searchspring/snap-profiler';\n```\n\n\n<h2 id=\"Profiler\">Profiler</h2>\nAn optional `namespace` can be passed to the Profiler constructor for profile organization.\n\n```typescript\nimport { Profiler } from '@searchspring/snap-profiler';\n\nconst profiler = new Profiler('namespace');\n```\n\n### `setNamespace` method\nProgramatically set the namespace after construction.\n\n```typescript\nimport { Profiler } from '@searchspring/snap-profiler';\n\nconst profiler = new Profiler();\n\nprofiler.setNamespace('namespace');\n```\n\n### `create` method\nCreate a new profile.\n\n```typescript\nimport { Profiler } from '@searchspring/snap-profiler';\n\nconst profiler = new Profiler();\n\nconst searchProfile = profiler.create({ \n\ttype: 'event', \n\tname: 'search', \n\tcontext: params\n}: ProfileDetails);\n```\n\n```typescript\ntype ProfileDetails<T> = { \n\ttype: string; \n\tname: string; \n\tcontext: T;\n}\n```\n\nReturns an instance of `Profile`. \n\n\n<h2 id=\"Profile\">Profile</h2>\n\n`Profile` is not an exported member of the Snap Profiler package. It is only returned in the Profiler `create` method.\n\n### `start` method\n\nThis will start the profiler timer.\n\n```typescript\nsearchProfile.start();\n```\n\n### `stop` method\nThis will stop the profiler timer.\n\n```typescript\nsearchProfile.stop();\n```\n\n### `namespace` property\nProfile namespace that was set using the `Profiler` constructor or the `setNamespace` method.\n\n```typescript\nconsole.log(`namespace: ${searchProfile.namespace}`);\n```\n\n### `type` property\nProfile type that was set in the `create` method `ProfileDetails` parameters.\n\n```typescript\nconsole.log(`type: ${searchProfile.type}`);\n```\n\n### `name` property\nProfile name that was set in the `create` method `ProfileDetails` parameters.\n\n```typescript\nconsole.log(`name: ${searchProfile.name}`);\n```\n\n### `context` property\nProfile context that was set in the `create` method `ProfileDetails` parameters. The context is used to provide additional details regarding the profile. A search profile would likely contain the request parameters amoung other things.\n\n```typescript\nconsole.log(`context: ${searchProfile.context}`);\n```\n\n### `status` property\nProfile status. The default value is `pending`.\n\nThe value will change to `started` when the `start` method is invoked and to `finished` when the `stop` method is invoked.\n\n```typescript\nconsole.log(`context: ${searchProfile.status}`);\n```\n\n### `time` property\nProfile time object is of type `ProfileTime`:\n\n```typescript\ntype ProfileTime = {\n\tdate: number;\n\tbegin: number;\n\tend: number;\n\trun: number;\n};\n```\n\n`ProfileTime.date` - set to `Date.now()` when `start` method is invoked.\n\n`ProfileTime.begin` - set to `window.performance.now()` when `start` method is invoked.\n\n`ProfileTime.end` - set to `window.performance.now()` when `stop` method is invoked.\n\n`ProfileTime.run` - set to the total running time in milliseconds between when the `start` and `stop` methods have been invoked.\n\n\n## Logging profiles\nIt is recommended to using the Snap Logger's `profile` method to log Snap Profiles as it provides a clean output for easy parsing.","image":"","sku":"sku/package-profiler","id":"/package-profiler","categoryHierarchy":"Packages > Profiler"}
{"name":"Logger","route":"/package-logger","price":0,"description":"# Snap Logger\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-logger\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-logger.svg?style=flat\"></a>\n\nSimple logger for debugging\n\n<img src=\"https://github.com/searchspring/snap/blob/main/images/logger-example.png?raw=true\" />\n<br/><br/>\n<details>\n\t<summary>Sample code</summary>\n\t<br/>\n\n```typescript\nlogger.image({\n\turl: 'https://searchspring.com/wp-content/uploads/2020/01/SearchSpring-Primary-FullColor-800-1-1-640x208.png',\n\twidth: '90px',\n\theight: '30px'\n});\n\nlogger.error('error');\n\nlogger.warn('warn');\n\nlogger.imageText({\n\turl: 'https://searchspring.com/wp-content/themes/SearchSpring-Theme/dist/images/favicons/favicon.svg',\n}, 'imageText');\n\nlogger.debug('debug');\n\nlogger.dev(`%c ${logger.emoji.vortex} %c${logger.prefix}%c${'magical text'}`,\n`color: ${logger.colors.blue}; font-weight: bold; font-size: 10px; line-height: 12px;`,\n`color: ${logger.colors.bluegreen}; font-weight: normal;`,\n`color: ${logger.colors.bluegreen}; font-weight: bold;`);\n```\n</details>\n\n\n\n\n## Dependency\n\nSnap Logger is a dependency of [@searchspring/snap-controller](https://github.com/searchspring/snap/tree/main/packages/snap-controller) <a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-logger\n```\n\n\n\n## Import\n```typescript\nimport { Logger } from '@searchspring/snap-logger';\n```\n\n## Config\nSnap Logger accepts an optional string prefix which when set is prepended to all logs.\n\n```typescript\nconst prefix = 'Log:';\nconst logger = new Logger(prefix)\n```\n\n## Controller usage\nSnap Logger is a dependency of Snap Controller and it is recommended to use logging methods of the controller in place of `console` methods.\n\n\n## Standalone usage\n```typescript\nconst logger = new Logger();\n\nlogger.warn('this is a warning');\n```\n\n### `setNamespace` method\nSets prefix instead of defining a prefix in the constructor.\n```typescript\nconst logger = new Logger();\n\nlogger.warn('Hello');\n// 'Hello'\n\nlogger.setNamespace('search');\n\nlogger.warn('Hello');\n// ' [search] :: Hello'\n```\n\n### `setMode` method\nThe default logging mode is `production`. \n\nWhen set to production, logs using `dev` will not be visible. This also includes `image`, `imageText`, `debug`, and `profile`.\n\nWhen set to `development`, all logging methods will be visible.\n\n\n\n```typescript\nimport { Logger, LogMode } from '@searchspring/snap-logger';\n\nconst logger = new Logger();\nlogger.setMode(LogMode.DEVELOPMENT);\n```\n\n```typescript\nenum LogMode {\n\tPRODUCTION = 'production',\n\tDEVELOPMENT = 'development',\n}\n```\n\n### `error` method\nThis method takes any number of parameters and logs them to the console. It is best to use this method for error handling.\n```typescript\nlogger.error('error!!!');\nlogger.error('text about the error', errorObject, 'more', 'text');\n```\n\n### `warn` method\nThis method takes any number of parameters and logs them to the console. It is best to use this method for displaying warnings.\n```typescript\nlogger.warn('warning!!!');\nlogger.warn('warning', warningObject, 'more text');\n```\n\n### `dev` method\nThis method takes any number of parameters and logs them to the console. If mode is set to `LogMode.PRODUCTION`, the `dev` logs will not be displayed.\n\n```typescript\nlogger.dev('dev')\n```\n\n### `debug` method\nThis method takes any number of parameters and logs them to the console. If mode is set to `LogMode.PRODUCTION`, `debug` logs will not be displayed.\n\n```typescript\nlogger.debug('debug');\n```\n### `image` method\nThis method takes any number of parameters and logs them to the console. The first parameter is special and takes properties that specify the image details. If mode is set to `LogMode.PRODUCTION`, `image` logs will not be displayed.\n\n```typescript\nlogger.image({ \n\t\turl: 'https://searchspring.com/wp-content/uploads/2020/01/SearchSpring-Primary-FullColor-800-1-1-640x208.png',\n\t\twidth: '30px', \n\t\theight: '30px'\n});\n```\n\n### `imageText` method\nThis method takes any number of parameters and logs them to the console. The first parameter is special and takes properties that specify the image details. If mode is set to `LogMode.PRODUCTION`, `imageText` logs will not be displayed.\n\n```typescript\nlogger.imageText({\n\turl: 'https://searchspring.com/wp-content/uploads/2020/01/SearchSpring-Primary-FullColor-800-1-1-640x208.png',\n\ttext: `imageText`,\n\tstyle: `color: #4c3ce2; font-weight: bold;`,\n});\n```\n\n### `profile` method\nThis method takes any number of parameters and logs them to the console. The first parameter is special and takes a Snap profile. If mode is set to `LogMode.PRODUCTION`, `profile` logs will not be displayed.\n\nSee [@searchspring/snap-profiler](https://github.com/searchspring/snap/tree/main/packages/snap-profiler) <a href=\"https://www.npmjs.com/package/@searchspring/snap-profiler\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-profiler.svg?style=flat\"></a>\n\n```typescript\nimport { Profiler } from '@searchspring/snap-profiler';\nimport { Logger } from '@searchspring/snap-logger';\n\nconst logger = new Logger();\nconst profiler = new Profiler();\n\nconst searchProfile = profiler.create({ \n\ttype: 'event', \n\tname: 'search', \n\tcontext: {} \n});\n\nsearchProfile.start();\n\n// code to profile\n\nsearchProfile.stop();\n\nlogger.profile(searchProfile)\n```\n\n### `emoji` property\nThe `emoji` property contains various emojis that can be used\n\nThe following emojis are available:\n\n<img src=\"https://github.com/searchspring/snap/blob/main/images/emojis.png?raw=true\" />\n\n```typescript\nconst emoji = {\n\tbang: String.fromCodePoint(0x203c),\n\tbright: String.fromCodePoint(0x1f506),\n\tcheck: String.fromCodePoint(0x2714),\n\tclock: String.fromCodePoint(0x1f556),\n\tcloud: String.fromCodePoint(0x2601),\n\tdim: String.fromCodePoint(0x1f505),\n\tgear: String.fromCodePoint(0x2699),\n\tinterobang: String.fromCodePoint(0x2049),\n\tlightning: String.fromCodePoint(0x26a1),\n\tmagic: String.fromCodePoint(0x2728),\n\trocket: String.fromCodePoint(0x1f680),\n\tsearch: String.fromCodePoint(0x1f50d),\n\tsnap: String.fromCodePoint(0x1f4a5),\n\tufo: String.fromCodePoint(0x1f6f8),\n\tvortex: String.fromCodePoint(0x1f300),\n\twarning: String.fromCodePoint(0x26a0),\n};\n```\n\n### `colors` property\nThe `colors` property contains various colors that can be used\n\nThe following colors are available:\n\n<img src=\"https://github.com/searchspring/snap/blob/main/images/colors.png?raw=true\" />\n\n```typescript\nconst colors = {\n\tblue: '#3379c1',\n\tbluelight: '#688BA3',\n\tbluedark: '#1B3141',\n\tbluegreen: '#318495',\n\n\tgrey: '#61717B',\n\n\tgreen: '#507B43',\n\tgreendark: '#63715F',\n\tgreenblue: '#46927D',\n\n\tindigo: '#4c3ce2',\n\n\torange: '#ecaa15',\n\torangelight: '#ff6600',\n\torangedark: '#c59600',\n\n\tred: '#cc1212',\n\tredlight: '#f30707',\n\treddark: '#8E111C',\n\n\tyellow: '#d1d432',\n};\n```","image":"","sku":"sku/package-logger","id":"/package-logger","categoryHierarchy":"Packages > Logger"}
{"name":"Tracker","route":"/package-tracker","price":0,"description":"# Snap Tracker\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-tracker\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-tracker.svg?style=flat\"></a>\n\nThe Snap Tracker service is responsible for sending beacon events. \n\n## Dependencies\n\nSnap Tracker is a dependency of [@searchspring/snap-controller](https://github.com/searchspring/snap/tree/main/packages/snap-controller) <a href=\"https://www.npmjs.com/package/@searchspring/snap-controller\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-tracker\n```\n\n## Import\n```typescript\nimport { Tracker } from '@searchspring/snap-tracker';\n```\n## Controller usage\nSnap Tracker is a dependency of Snap Controller and Tracker events can be invoked via the `tracker` reference of any Snap Controller. \n\n```typescript\nconst globals = { siteId: 'abc123' };\nconst tracker = new Tracker(globals);\nconst controller = new SearchController(config, {\n    ...\n    tracker,\n    ...\n});\n\nconsole.log(tracker.track.product.click === controller.tracker.track.product.click) // true\nconsole.log(tracker.track.product.click === window.searchspring.tracker.track.product.click) // true\n```\n\n## Standalone usage\nSnap Tracker can also be used without a Snap Controller. Typically used to send events before an integration has gone live. \n\n```typescript\nconst tracker = new Tracker();\nconst payload = {\n    type: BeaconType.CLICK,\n    category: BeaconCategory.INTERACTION, \n    event: {\n        intellisuggestData: '37d5578e1d1646ac97701a063ba84777',\n        intellisuggestSignature: '5739a2596d3b4161b041ce1764ffa04d',\n        href: '/product123'\n    }\n};\ntracker.track.event(payload)\n```\n\n## Tracking Events with DomTargeter\nAs an alternative method for tracking events, the Tracker utilizes the `DomTargeter` to look for script tags on the current page. These script tags must have a specific `type` attribute and data contents for the tracking to be used. These tracking script blocks ensure tracking events are sent when using asynchronous script execution and must be on the page prior to the `DOMContentLoaded` event to be picked up by initial targeting. If the script blocks are added after this event, the `retarget` method must be invoked.\n\n### `retarget` method\nThis method will call the `retarget` method on all `DomTargeters` set in the Tracker. Typically this would be used when new tracking script blocks have been added to the page after initial targeting.\n\n### Shopper Login Script Block\n\n```html\n<script type=\"searchspring/track/shopper/login\">\n    id = 'snapdev';\n</script>\n```\n\n### Product View Script Block\n\n```html\n<script type=\"searchspring/track/product/view\">\n    item = {\n        sku: 'product123',\n        childSku: 'product123_a',\n    };\n</script>\n```\n\n### Cart View Script Block\n\n```html\n<script type=\"searchspring/track/cart/view\">\n    items = [\n        {\n            sku: 'product123',\n            childSku: 'product123_a',\n            qty: '1',\n            price: '9.99',\n        },\n        {\n            sku: 'product456',\n            childSku: 'product456_a',\n            qty: '2',\n            price: '10.99',\n        },\n    ];\n</script>\n```\n\n### Order Transaction Script Block\n\n```html\n<script type=\"searchspring/track/order/transaction\">\n    order = {\n        id: '123456',\n        total: '31.97',\n        city: 'Los Angeles',\n        state: 'CA',\n        country: 'US',\n    };\n    items = [\n        {\n            sku: 'product123',\n            childSku: 'product123_a',\n            qty: '1',\n            price: '9.99'\n        },\n        {\n            sku: 'product456',\n            childSku: 'product456_a',\n            qty: '2',\n            price: '10.99'\n        },\n    ];\n</script>\n```\n\n## `track` methods\nThe Tracker object is exposed to the browser's `window` via the first Snap Controller that has been instantiated. This will use the `siteId` that has been provided to the Snap Tracker instance of the respective Controller Services. The Tracker contains various tracking methods available on the `track` object within it. \n\n```typescript\nwindow.searchspring.tracker.track\n```\n\nEach tracking method expects a data object which contains different attributes depending on the method.\n\n```typescript\ntracker.track.product.view({\n    sku: 'product123',\n    childSku: 'product123_a',\n});\n```\n\nIf a bundle is using multiple Snap Controllers with different `siteId`, an optional `siteId` parameter can be specified to overwrite any event `siteId`\n\n```typescript\ntracker.track.product.view({\n    sku: 'product123',\n    childSku: 'product123_a',\n}, 'abc123');\n```\n\n### Generic Event `track.event`\nCreates and sends a generic beacon event. Parameter expects an Event Payload object. \nIf a `type` or `category` is not provided, a value of `'custom'` will be used. \n\n```typescript\nconst payload = {\n    type: BeaconType.CLICK,\n    category: BeaconCategory.INTERACTION, \n    event: {\n        intellisuggestData: '37d5578e1d1646ac97701a063ba84777',\n        intellisuggestSignature: '5739a2596d3b4161b041ce1764ffa04d',\n        href: '/product123'\n    }\n};\ntracker.track.event(payload)\n```\n\n#### Event Payload\n\nA beacon event payload object provided to the `track.event` method may contain the following:\n\n`type` -  BeaconType enum value or custom event type value. If not specified, `'custom'` will be used.\n\n`category` - BeaconCategory enum value or custom event type value. If not specified, `'custom'` will be used.\n\n`event` - object containing event data\n\n`context.website.trackingCode` - optional `context` object that will be merged with constructed context object. Can be used to specify a different `siteId` value.\n\n```typescript\nconst payload = {\n    type: BeaconType.CLICK,\n    category: BeaconCategory.INTERACTION,\n    event: {\n        intellisuggestData: '37d5578e1d1646ac97701a063ba84777',\n        intellisuggestSignature: '5739a2596d3b4161b041ce1764ffa04d',\n        href: '/product123',\n    },\n    context: {\n        website: {\n            trackingCode: 'abc123',\n        },\n    },\n};\n\n```\n\n### Product Click `track.product.click`\nTracks product click events. It is reccomended to invoke on each product `onmousedown` event via the `result.track.click()` method. Various Snap controllers will expose these tracking events differently, see the controller documentation for details. \n\n```jsx\nsearchController.store.results.map(result)=>{(\n    <a href={core.url} onMouseDown={(e)=>{result.track.click(e)}}>\n)}\n```\n\nIf invoking directly, the `intellisuggestData` and `intellisuggestSignature` values are returned from SearchSpring's Search API on each `result.attributes` object. An optional `href` value can also be provided. \n\n```typescript\nimport { SearchController } from '@searchspring/snap-controller';\nimport { Tracker } from '@searchspring/snap-tracker';\nconst searchController = new SearchController({\n    ...\n    tracker: new Tracker(),\n    ...\n}):\n\ntracker.track.product.click({\n    intellisuggestData: '37d5578e1d1646ac97701a063ba84777',\n    intellisuggestSignature: '5739a2596d3b4161b041ce1764ffa04d',\n    href: '/product123',\n});\n```\n\n### Product View `track.product.view`\nTracks product page views. Should be invoked from a product detail page. A `sku` and/or `childSku` are required.\n\n```typescript\ntracker.track.product.view({\n    sku: 'product123',\n    childSku: 'product123_a',\n});\n```\n\n### Shopper Login `track.shopper.login`\nTracks user login and sets `context.shopperId` value. Should be invoked when a user has logged into their account.\n\n```typescript\nconst shopperId = \"snapdev\"\ntracker.track.shopper.login({\n    id: shopperId\n});\n```\n\n### Cart View `track.cart.view`\nTracks cart contents. Should be invoked from a cart page. Each item object must contain a `qty`, `price`, (`sku` and/or `childSku`)\n\n```typescript\ntracker.track.cart.view({\n    items: [\n        {\n            sku: 'product123',\n            childSku: 'product123_a',\n            qty: '1',\n            price: '9.99',\n        },\n        {\n            sku: 'product456',\n            childSku: 'product456_a',\n            qty: '2',\n            price: '10.99',\n        },\n    ]\n});\n```\n\n### Order Transaction `track.order.transaction`\nTracks order transaction. Should be invoked from an order confirmation page. Expects an object with the following:\n\n`order` - (optional) object containing the following\n\n`order.id` - (optional) order id\n\n`order.otal` - (optional) sub total of all items\n\n`order.city` - (optional) city name\n\n`order.state` - (optional) 2 digit state abbreviation (US only)\n\n`order.country` - (optional) 2 digit country abbreviation\t(ie. 'US', 'CA', 'MX', 'PL', 'JP')\n\n`order.items` - required array of items - same object provided to `track.cart.view` event\n\n```typescript\ntracker.track.order.transaction({\n    order: {\n        id: '123456',\n        total: '31.97',\n        city: 'Los Angeles',\n        state: 'CA',\n        country: 'US',\n    },\n    items: [\n        {\n            sku: 'product123',\n            childSku: 'product123_a',\n            qty: '1',\n            price: '9.99'\n        },\n        {\n            sku: 'product456',\n            childSku: 'product456_a',\n            qty: '2',\n            price: '10.99'\n        },\n    ]\n});\n```\n\n## Tracker properties\n\n### `globals` property\nWhen constructing an instance of `Tracker`, a globals object is required to be constructed. This object contains a `siteId` key and value. \n\n```typescript\nconst globals = { siteId: 'abc123' };\nconst tracker = new Tracker(globals);\nconsole.log(tracker.globals === globals) // true\n```\n\n### `localStorage` property\nA reference to the StorageStore object for accessing Tracker local storage.\n\n```typescript\nconst tracker = new Tracker();\ntracker.localStorage.set('key', 'value')\ntracker.localStorage.get('key') // 'value'\n```\n\n\n### `context` property\nThe `context` property is generated at the time of instantiating Tracker. It is part of each event payload and provides context of the event.\n\n`userId` - unique ID to identify the user, persisted in a cookie/local storage fallback\n\n`pageLoadId` - unique ID generated at the time of instantiating Tracker\n\n`sessionId` - unique ID generated at the start of a new browser session, persisted in session storage/cookie fallback\n\n`shopperId` - unique ID provided set via the SearchController `SearchController.tracker.track.shopper.login` event and then persisted in a cookie\n\n`website.trackingCode` - the `siteId` specified in the globals object\n\n```typescript\ncontext: {\n    userId: '0560d7e7-148a-4b1d-b12c-924f164d3d00',\n    pageLoadId: 'cfb75606-c15b-4f25-a711-9de2c5d22660',\n    sessionId: 'f4b25c96-9ca1-4ac6-ad04-f5ce933f8b61',\n    shopperId: 'shopper0001',\n    website: {\n        trackingCode: 'abc123',\n    },\n}\n```\n\n### `isSending` property\nThe `isSending` property contains the return value from `setTimeout` and when defined, signifys that an event is being sent to the beacon endpoint. If subsequent events are invoked and `isSending` is still defined, the incoming event will be added to the event queue to be sent at a later time. \n\n### `namespace` property\nThe `namespace` property contains the Tracker namespace. Invoking this method is only required if a bundle contains multiple Tracker instances. \n\n### `track` property\nThe `track` property contains various tracking events. See `track` methods section above.\n\n### `getUserId` method\nReturns an object containing the `userId` stored in the `ssUserId` cookie (with a fallback to localstorage.) If key doesn't exist, a new ID will be generated, saved to cookie/localstorage, and returned. \n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.getUserId()) \n// { userId: '0560d7e7-148a-4b1d-b12c-924f164d3d00' }\n```\n\n### `getSessionId` method\nReturns an object containing the `sessionId` stored in the `ssSessionIdNamespace` session storage (with a fallback to cookies.) If key doesn't exist, a new ID will be generated, saved to session storage/cookie, and returned. \n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.getSessionId()) \n// { sessionId: 'f4b25c96-9ca1-4ac6-ad04-f5ce933f8b61' }\n```\n\n### `getShopperId` method\nReturns an object containing the `shopperId` stored in the `ssShopperId` cookie. This value is set via the SearchController `SearchController.tracker.track.shopper.login` event\n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.getShopperId()) \n// { shopperId: 'shopper0001' }\n```\n\n### `cookies` property\nThe `cookies` property provides access to the `cart` and `viewed` tracking cookies.\n\n#### `cookies.cart.get` method\nReturns an array of strings containing the `sku` of each item last registered as being in the shopping cart. This value is stored in the `ssCartProducts` cookie and is set via the calls to the `tracker.track.cart.view` event.\n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.cookies.cart.get()) \n// ['sku1', 'sku2']\n```\n\n#### `cookies.cart.add` method\nProvides a means of adding cart products to the `ssCartProducts` cookie.\n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.cookies.cart.get());\n// ['sku1', 'sku2']\n\nconsole.log(tracker.cookies.cart.add(['sku3']));\n// ['sku1', 'sku2', 'sku3']\n```\n\n#### `cookies.cart.remove` method\nProvides a means for removing `skus` from the `ssCartProducts` cookie.\n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.cookies.cart.get());\n// ['sku1', 'sku2']\n\ntracker.cookies.cart.remove(['sku1']);\n// ['sku2']\n```\n\n#### `cookies.cart.set` method\nProvides a means of setting the `ssCartProducts` cookie via an array of product `skus`.\n\n```typescript\nconst tracker = new Tracker();\n\ntracker.cookies.cart.set(['sku1', 'sku2']);\n// ['sku1', 'sku2']\n```\n\n#### `cookies.cart.clear` method\nEmpties the `ssCartProducts` cookie.\n\n```typescript\nconst tracker = new Tracker();\n\ntracker.cookies.cart.clear();\n```\n\n#### `cookies.viewed.get` method\nReturns an array of strings containing the `sku` of items which have been viewed. This value is stored in the `ssViewedProducts` cookie and is set via the calls to the `tracker.track.product.view` event.\n\n```typescript\nconst tracker = new Tracker();\n\nconsole.log(tracker.cookies.viewed.get());\n// ['sku1', 'sku2']\n```\n\n### `sendEvents` method\nSends event(s) to beacon (and various legacy) endpoint(s). \n\n```typescript\nconst tracker = new Tracker();\nconst event1 = new BeaconEvent();\nconst event2 = new BeaconEvent();\ntracker.sendEvents([event1, event2])\n```\n\n","image":"","sku":"sku/package-tracker","id":"/package-tracker","categoryHierarchy":"Packages > Tracker"}
{"name":"Toolbox","route":"/package-toolbox","price":0,"description":"# Snap Toolbox\n\n<a href=\"https://www.npmjs.com/package/@searchspring/snap-toolbox\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-toolbox.svg?style=flat\"></a>\n\nA collection of utility tools such as DOM targetting, currency formatting & browser feature flags.\n\n## Dependency\n\nSnap Toolbox is a dependency of:\n- [@searchspring/snap-store-mobx](https://github.com/searchspring/snap/tree/main/packages/snap-store-mobx) <a href=\"https://www.npmjs.com/package/@searchspring/snap-store-mobx\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-store-mobx.svg?style=flat\"></a>\n- [@searchspring/snap-preact-components](https://github.com/searchspring/snap/tree/main/packages/snap-preact-components) <a href=\"https://www.npmjs.com/package/@searchspring/snap-preact-components\"><img alt=\"NPM Status\" src=\"https://img.shields.io/npm/v/@searchspring/snap-controller.svg?style=flat\"></a>\n\n## Installation\n\n```bash\nnpm install --save @searchspring/snap-toolbox\n```\n\n\n## Import\n```typescript\nimport { filters, DomTargeter, getFlags, featureFlags, cookies, url } from '@searchspring/snap-toolbox';\n```","image":"","sku":"sku/package-toolbox","id":"/package-toolbox","categoryHierarchy":"Packages > Toolbox"}
{"name":"Cookies","route":"/package-toolbox-cookies","price":0,"description":"## Cookies\nAn interface for setting and getting cookies.\n\n```typescript\nimport { cookies } from '@searchspring/snap-toolbox';\n```\n\n## `set` function\nSet a cookie.\n\n```typescript\nconst name = 'myCookie';\nconst value = 'Hello World!!';\nconst sameSite = 'Lax';\nconst expires = 31536000000; // 1 year\n\ncookies.set(name, value, sameSite, expires)\n```\n\n## `get` function\nGet a cookie.\n\n```typescript\nconst name = 'myCookie';\n\ncookies.get(name)\n```\n\n## `unset` function\nRemove a cookie.\n\n```typescript\nconst name = 'myCookie';\n\ncookies.unset(name)\n```\n","image":"","sku":"sku/package-toolbox-cookies","id":"/package-toolbox-cookies","categoryHierarchy":"Packages > Toolbox > Cookies"}
{"name":"DomTargeter","route":"/package-toolbox-domTargeter","price":0,"description":"## DomTargeter\n`DomTargeter` is a utility used for rendering components in specified DOM targets. \n\n```typescript\nimport { DomTargeter } from '@searchspring/snap-toolbox';\n```\n\nThe constructor accepts an array of targets, an onTarget callback function, and optionally the Document.\n\nWhen the DomTargeter is constructed it will immediately look for elements in the document that match each target selector. When found the `onTarget` functions will be executed. DomTargeters will additionally look for targets when the `DOMContentLoaded` document event fires. Should targets be added after, the `retarget` method can be utilized.\n\nTypical usage would be to render a component into the DOM.\n\n```typescript\nconst contentTarget = new DomTargeter(\n\t[\n\t\t{\n\t\t\tselector: '#searchspring-content',\n\t\t\tcomponent: <Content />,\n\t\t},\n\t],\n\t(target, elem) => {\n\t\t// onTarget function\n\t\trender(target.component, elem);\n\t}\n);\n```\n\n## `retarget` method\nIf the targets are created after the DomTargeter and `DOMContentLoaded` event has fired, the `retarget` method can be used to check for target existence.\n\n```typescript\n// manually retarget\nsearchPageTarget.retarget();\n```\n\n## `getTargets` method\nReturn the array of targets specified during construction.","image":"","sku":"sku/package-toolbox-domTargeter","id":"/package-toolbox-domTargeter","categoryHierarchy":"Packages > Toolbox > DomTargeter"}
{"name":"Feature Flags","route":"/package-toolbox-featureFlags","price":0,"description":"## Feature Flags\nThis utility provides a way to check for browser feature support.\n\n```typescript\nimport { getFlags, featureFlags } from '@searchspring/snap-toolbox';\n```\n\n## `getFlags` method\nReturns an object with the following functions:\n\n### `cors` function\nTests if the browser supports cross origin (>=IE10).\n\nWhen using `cors`, the `getFlags` function accepts a `userAgent` to test.\n\n```typescript\nconst flags = getFlags() \nif (flags.cors()) {\n\t// cors is supported!\n}\n```\n\n### `cookies` function\nTests if the browser supports cookies.\n\n```typescript\nconst flags = getFlags() \nif (flags.cookies()) {\n\t// cookies are supported!\n}\n```\n\n### `storage` function\nTests if the browser supports LocalStorage and SessionStorage.\n\n```typescript\nconst flags = getFlags() \nif (flags.storage()) {\n\t// storage is supported!\n}\n```\n\n## `featureFlags` property\n`featureFlags` utilizes `getFlags` to check all flags and return an object containing feature flags eligibility.\n\n```typescript\nif (featureFlags.cors) { }\nif (featureFlags.cookies) { }\nif (featureFlags.storage) { }\n```","image":"","sku":"sku/package-toolbox-featureFlags","id":"/package-toolbox-featureFlags","categoryHierarchy":"Packages > Toolbox > Feature Flags"}
{"name":"Filters","route":"/package-toolbox-filters","price":0,"description":"## Filters\nContains a collection of methods used to transform strings or numbers into common variations.\n\n```typescript\nimport { filters } from '@searchspring/snap-toolbox';\n```\n\n## `formatNumber` method\nTake a number and returns a string that has been formatted with the following format number options: \n\n`symbol` - currency symbol, default is `''`\n\n`decimalPlaces` - number of decimal places, default is `3`\n\n`thousandsSeparator` - thousands separator, default is `''`\n\n`decimalSeparator` - decimal separator, default is `'.'`\n\n`padDecimalPlaces` - pad decimal places, default is `true`\n\n`symbolAfter` - place currency symbol after value, default is `false`\n\n```typescript\nconst value = 12999.99;\nconst formattedPrice = filters.formatNumber(value);\nconsole.log(formattedPrice); // '12999.990'\n```\n\n```typescript\nconst value = 12999.99;\nconst formattedPrice = filters.formatNumber(value, {\n\tsymbol: ' kr',\n\tdecimalPlaces: 2,\n\tpadDecimalPlaces: true,\n\tthousandsSeparator: ',',\n\tdecimalSeparator: ',',\n\tsymbolAfter: true,\n});\n// '12,999,99 kr'\n```\n\n## `currency` method\nThe `currency` method is a wrapper for the `formatNumber` method with the following altered default options:\n\n```typescript\n{\n\tsymbol: '$',\n\tthousandsSeparator: ',',\n\tdecimalPlaces: 2,\n}\n```\n\n```typescript\nconst value = 12999.99;\nconst formattedPrice = filters.currency(value);\n// '$12,999.99'\n```\n\n```typescript\nconst value = 12999.99;\nconst formattedPrice = filters.currency(value, {\n\tsymbol: '£ '\n}); \n// '£ 12,999.99'\n```\n\n\n## `handleize` method\nGiven a string, returns a string that has been converted to lower case, without any symbols and special characters, and spaces - these are replaced with with `'-'`.\n\nTypical usage would be for generating URL-safe parameters.\n\n```typescript\nconst value = \"Hello World!!\";\nconst handled = filters.handleize(value);\n// 'hello-world'\n```\n\n## `stripHTML` method\nGiven a string containing HTML, returns a string that does not contain any HTML tags.\n\n```typescript\nconst value = \"<p class='text'>Hello World!!</p>\";\nconst handled = filters.stripHTML(value);\n// 'Hello World!!'\n```\n\n## `truncate` method\nTruncate a string to a specific length and optionally append additional string to the end. The function will not break words, but will always ensure the limit is smaller than the value length.\n\n```typescript\nconst value = \"Searchspring\";\nconst limit = 7;\nconst append = '...';\nconst truncated = filters.truncate(value, limit, append);\n// 'Search...'\n```","image":"","sku":"sku/package-toolbox-filters","id":"/package-toolbox-filters","categoryHierarchy":"Packages > Toolbox > Filters"}
{"name":"Script Context","route":"/package-toolbox-getContext","price":0,"description":"## Script Context\nThis utility function gets a script tags attributes and innerHTML declarations and returns them in an object.\n\n```typescript\nimport { getContext } from '@searchspring/snap-toolbox';\n```\n\nThe function takes two parameters, the first being an array of innerHTML variable names to evaluate, and the second optional parameter for a script tag element or CSS selector string. If the script tag element is not provided, the function will query the DOM for a Snap script (using src or #searchspring-context selector).\n\nThe script element must have an ID or type that begins with `searchspring`.  \nFor example: `type=\"searchspring\"`, `type=\"searchspring/context\"`, `type=\"searchspring/controller\"`, or `id=\"searchspring-context\"`.\n\nThe innerHTML of the script MUST only contain variable assignments without `var`, `let`, or `const`. Each declaration should end with a semi-colon to ensure minification does not impact the functions ability to parse the innerHTML.\n\nTypical usage would be getting integration context variables from a script tag and passing them off to a controller instantiation.\n\n### Example Integration Context\n\n```html\n<script type=\"text/javascript\" src=\"https://snapui.searchspring.io/abc123/bundle.js\">\n\tshopper = {\n\t\tid: 'snapdev'\n\t};\n\tcategory = 'categoryName';\n</script>\n```\n\n```typescript\nconst context = getContext(['shopper', 'category']);\n/*\n\tcontext = {\n\t\ttype: 'text/javascript',\n\t\tsrc: 'https://snapui.searchspring.io/abc123/bundle.js',\n\t\tshopper: {\n\t\t\tid: 'snapdev'\n\t\t},\n\t\tcategory: 'categoryName'\n\t}\n*/\n```\n\n### Example Providing a Script Element\n\n```html\n<script type=\"searchspring/recommend\" profile=\"similar\">\n\tproduct = 'C-AD-W1-1869P';\n\tshopper = {\n\t\tid: 'snapdev'\n\t};\n\toptions = {\n\t\tsiteId: 'abc123'\n\t};\n</script>\n```\n\n```typescript\nconst scriptTag = document.querySelector('script[type=\"searchspring/recommend\"');\nconst context = getContext(['product', 'shopper', 'options'], scriptTag);\n/*\n\tcontext = {\n\t\ttype: 'searchspring/recommend',\n\t\tprofile: 'similar',\n\t\tproduct: 'C-AD-W1-1869P',\n\t\tshopper: {\n\t\t\tid: 'snapdev'\n\t\t},\n\t\toptions: {\n\t\t\tsiteId: 'abc123'\n\t\t}\n\t}\n*/\n```\n\nNote: `snap-preact` does automatic shopper login tracking if the context is passed to it with a `shopper.id`.","image":"","sku":"sku/package-toolbox-getContext","id":"/package-toolbox-getContext","categoryHierarchy":"Packages > Toolbox > Script Context"}
{"name":"Preact Component: Badge","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Badge","price":0,"description":"# Badge\n\nRenders an absolute-positioned badge. It is expected that the parent element contains `position: relative`.\n\n## Usage\n\n### content\nThe `content` prop specifies the badge.\n\n```jsx\n<div style=\"position: relative;\">\n\t<Badge content=\"Sale\" />\n</div>\n```\n\nOr alternatively using children:\n\n```jsx\n<div style=\"position: relative;\">\n\t<Badge>Sale</Badge>\n</div>\n```\n\n### position\nThe `position` prop specifies an object with CSS `top`, `bottom`, `left`, and `right` attributes. The default position is top left `{ top: 0, left: 0 }`.\n\nIn this example, the badge will be 2px from the top and 2px from the right:\n\n```jsx\n<Badge position={{ \"top\": 2, \"right\": 2 }}>Sale</Badge>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Badge","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Badge","categoryHierarchy":"Components > Preact > Atoms > Badge"}
{"name":"Preact Component: Breadcrumbs","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Breadcrumbs","price":0,"description":"# Breadcrumbs\n\nRenders a list of breadcrumbs. \n\n## Usage\n\n### data\nThe `data` prop specifies an array of breadcrumb objects. \n\n#### breadcrumb object \n\n`label` - required, the breadcrumb label\n \n`url` - optional, the URL of this breadcrumb\n\n```typescript\nconst breadcrumbs = [\n\t{ url: '/', label: 'Home' },\n\t{ url: '/', label: 'Collections' },\n\t{ url: '/', label: 'Appliances' },\n\t{ label: 'Fridge' }\n]\n```\n\n```jsx\n<Breadcrumbs separator={'/'} data={breadcrumbs} />\n```\n\n### separator\nThe `separator` prop spcifies a custom delimiter between each breadcrumb. The default separator is `'/'`. This can be a string or a JSX element.\n\n```jsx\n<Breadcrumbs separator={'>'} data={breadcrumbs} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Breadcrumbs","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Breadcrumbs","categoryHierarchy":"Components > Preact > Atoms > Breadcrumbs"}
{"name":"Preact Component: Button","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Button","price":0,"description":"# Button\n\nRenders a native or custom button.\n\n## Usage\n\n### content\nThe `content` prop specifies the button text. This can be a string or a JSX element.\n\n```jsx\n<Button content={\"click me!\"} />\n```\n \nOr alternatively as children:\n\n```jsx\n<Button>click me!</Button>\n```\n\n### disabled\nThe `disabled` prop will disable the button from being clickable.\n\n```jsx\n<Button content={\"click me!\"} disabled />\n```\n\n### native\nThe `native` prop will use a native html `<button>` element.\n\n```jsx\n<Button content={\"click me!\"} native />\n```\n\n### backgroundColor\nThe `backgroundColor` prop specifies the button background color.\n\n```jsx\n<Button content={\"click me!\"} backgroundColor={'#eeeeee'} />\n```\n\n### borderColor\nThe `borderColor` prop specifies the button border color.\n\n```jsx\n<Button content={\"click me!\"} borderColor={'#cccccc'} />\n```\n### color\nThe `color` prop specifies the button text color.\n\n```jsx\n<Button content={\"click me!\"} color={'#222222'} />\n```\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when the button is clicked.\n\n```jsx\n<Button content={\"click me!\"} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Button","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Button","categoryHierarchy":"Components > Preact > Atoms > Button"}
{"name":"Preact Component: Dropdown","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Dropdown","price":0,"description":"# Dropdown\n\nRenders a button and content. Clicking the button toggles content visibility. Typically used as an alternative to a `<select>` dropdown or to collapse content. By default any clicks outside of the element will hide the content.\n\n## Usage\n\n### content\nThe `content` prop specifies the dropdown contents. This can be a string or a JSX element. The Dropdown component also passes the current open state to the JSX component under the prop showContent: boolean. \n\n```jsx\n<Dropdown content={\"Hello World!\"} />\n```\n \nOr alternatively as children:\n\n```jsx\n<Dropdown>Hello World!</Dropdown>\n```\n\nNote you can only render either the content, or the children, if both are passed in, it will default to the content prop. \n\n\n### button\nThe `button` prop specifies the dropdown button. This button toggles the visibility of the content when clicked. This can be a string or a JSX element.\n\n```jsx\n<Dropdown button={'click me!'}>Hello World!</Dropdown>\n```\n\n### open\nThe `open` prop sets the dropdown visibility state. \n\nIf specified, external state management is expected. Otherwise if not specified, the component will use its own internal state to toggle the visibility.\n\n```jsx\n<Dropdown open={true}>Hello World!</Dropdown>\n```\n\n### startOpen\nThe `startOpen` prop sets the dropdown initial internal state. Cannot be used with the `open` prop.\n\n```jsx\n<Dropdown startOpen>Hello World!</Dropdown>\n```\n\n### disabled\nThe `disabled` prop will disable the button from toggling the visibility of the dropdown content, as well as preventing the `onClick` callback from being invoked.\n\n```jsx\n<Dropdown disabled>Hello World!</Dropdown>\n```\n\n### disableOverlay\nThe `disableOverlay` prop will disable the dropdown contents from being rendered as an overlay. If set to `true`, dropdown contents will instead be rendered as a block and affect the height of its parent element. Typically used if Dropdown is intended to act as a header (ie. Facet)\n\n```jsx\n<Dropdown disableOverlay>Hello World!</Dropdown>\n```\n\n### disableClickOutside\nThe `disableClickOutside` prop by default is `false`. Setting this to `true` will not close the dropdown if a click event was registered outside the dropdown content.\n\n```jsx\n<Dropdown disableClickOutside>Hello World!</Dropdown>\n```\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when the dropdown button is clicked.\n\n```jsx\n<Dropdown onClick={(e)=>{console.log(e)}} >Hello World!</Dropdown>\n```\n\n#### onToggle\nThe `onToggle` prop allows for a custom callback function for when the dropdown visibility is toggled. This only applies if using internal state. Cannot be used with the `open` prop.\n\n```jsx\n<Dropdown onToggle={(e)=>{console.log(e)}} >Hello World!</Dropdown>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Dropdown","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Dropdown","categoryHierarchy":"Components > Preact > Atoms > Dropdown"}
{"name":"Preact Component: FormattedNumber","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-FormattedNumber","price":0,"description":"# Formatted Number\n\nUtilizes `formatNumber` from [@searchspring/snap-toolbox](https://searchspring.github.io/snap/#/toolbox) to render a `<span>` containing a formatted number.\n\n## Usage\n\n### value\nThe required `value` prop specifies the number to be formatted. \n\n```jsx\n<FormattedNumber value={99.99} />\n```\nFormatted output from above properties: `99.990`\n\n### symbol\nThe `symbol` prop specifies an optional symbol to be included. Typically used when adding a unit of measure to a number.\n\n```jsx\n<FormattedNumber value={99} symbol={' °C'} /> \n```\nFormatted output from above properties: `99.000 °C`\n\n### decimalPlaces\nThe `decimalPlaces` prop specifies how many decimal places to format.\n\n```jsx\n<FormattedNumber value={99} decimalPlaces={2} /> \n```\nFormatted output from above properties: `99.00`\n\n### padDecimalPlaces\nThe `padDecimalPlaces` prop pads excess decimal places with zeros.\n\n```jsx\n<FormattedNumber value={99.99} decimalPlaces={4} padDecimalPlaces={true} /> \n```\nFormatted output from above properties: `99.9900`\n\n```jsx\n<FormattedNumber value={99.99} decimalPlaces={4} padDecimalPlaces={false} /> \n```\nFormatted output from above properties: `99.99`\n\n### thousandsSeparator\nThe `thousandsSeparator` prop specifies the thousands separator character.\n\n```jsx\n<FormattedNumber value={10999.99} thousandsSeparator={','} /> \n```\nFormatted output from above properties: `10,999.990`\n\n### decimalSeparator\nThe `decimalSeparator` prop specifies the decimal separator character.\n\n```jsx\n<FormattedNumber value={10999.99} decimalSeparator={','} decimalPlaces={2} /> \n```\nFormatted output from above properties: `10999,99`\n\n### symbolAfter\nThe `symbolAfter` prop specifies if the provided `symbol` prop should be placed after the formatted `value`.\n\n```jsx\n<FormattedNumber value={999.999} symbol={'km'} symbolAfter={true} /> \n```\nFormatted output from above properties: `999.999km`","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-FormattedNumber","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-FormattedNumber","categoryHierarchy":"Components > Preact > Atoms > FormattedNumber"}
{"name":"Preact Component: Icon","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Icon","price":0,"description":"# Icon\n\nRenders an Icon either from our list of available icons or from a custom path. \n\n## Usage\n\n### icon\nThe `icon` prop specifies the name of the icon to display. \n\n```jsx\n<Icon icon='cogs' />\n```\n\n\n### path\nThe `path` prop specifies the SVG path value for custom icons.\n\n```jsx\n<Icon color='#3a23ad' size='120px' style='padding: 20px;' viewBox='0 0 70 70' path='M12.9,13.8C12.9,13.8,12.9,13.8,12.9,13.8c-0.1,0.1-0.3,0.2-0.5,0.2C4.5,17.9,1.9,28.8,6.6,38.5l28.6-13.8 c0,0,0,0,0,0c0.2-0.1,0.3-0.1,0.5-0.2C43.5,20.6,46.2,9.7,41.5,0L12.9,13.8zM8.6,42.1C8.6,42.1,8.6,42.1,8.6,42.1c-0.1,0.1-0.3,0.1-0.5,0.2C0.3,46.1-2.4,57,2.3,66.7l28.6-13.8 c0,0,0,0,0,0c0.2-0.1,0.3-0.1,0.5-0.2c7.9-3.8,10.5-14.8,5.8-24.4L8.6,42.1z' />\n```\n\n### color\nThe `color` prop specifies the icon color.\n\n```jsx\n<Icon icon='cogs' color=\"#ffff00\" />\n```\n\n### size\nThe `size` prop specifies the custom icon size. This will be set to both the width and height.\n\n```jsx\n<Icon icon='cogs' size={'20px'} />\n```\n\n### width & height\nThe `width` and `height` props specify custom icon dimensions and will overwrite the `size` prop.\n\n```jsx\n<Icon icon='cogs' width={'20px'} height={'25px'} />\n```\n\n### viewBox\nThe `viewBox` prop specifies the SVG `viewBox` attribute. This defines the position and dimension, in user space, of an SVG viewport.\n\nFormat: `` `${min-x} ${min-y} ${width} ${height}` ``\n\n```jsx\n<Icon icon='cogs' viewBox={'0 0 20 20'} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Icon","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Icon","categoryHierarchy":"Components > Preact > Atoms > Icon"}
{"name":"Preact Component: Image","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Image","price":0,"description":"# Image\n\nRenders an Image with fallback and rollover functionality. \n\n## Usage\n\n### src\nThe required `src` prop specifies the URL of the image to render.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' />\n```\n\n### alt\nThe required `alt` prop is the image `alt` attribute.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' />\n```\n\n### fallback\nThe `fallback` prop specifies the URL of the fallback image to render if the primary image fails to load.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} fallback='https://www.example.com/image.jpg' alt='image' />\n```\n\n### hoverSrc\nThe `hoverSrc` prop specifiesthe URL of the alternative image to display on hover.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} hoverSrc={searchResponse.results.mappings.core.hoverImg} alt='image' />\n```\n\n\n### lazy\nThe `lazy` prop is used to disable the lazy loading feature. Enabled by default. \n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} lazy={false} alt='image' />\n```\n\n### Events\n\n#### onMouseOver\nThe `onMouseOver` prop allows for a custom callback function when the mouse cursor enters the image.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' onMouseOver={(e)=>{console.log(e)}} />\n```\n\n#### onMouseOut\nThe `onMouseOut` prop allows for a custom callback function when the mouse cursor leaves the image.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' onMouseOut={(e)=>{console.log(e)}} />\n```\n\n#### onError\nThe `onError` prop allows for a custom callback function when the image has encountered an error.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' onError={(e)=>{console.log(e)}} />\n```\n\n#### onLoad\nThe `onLoad` prop allows for a custom callback function when the image has finished loading.\n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' onLoad={(e)=>{console.log(e)}} />\n```\n\n#### onClick\nThe `onClick` prop allows for a custom callback function when the image is clicked. \n\n```jsx\n<Image src={searchResponse.results.mappings.core.imageUrl} alt='image' onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Image","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Image","categoryHierarchy":"Components > Preact > Atoms > Image"}
{"name":"Preact Component: Loading","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Loading","price":0,"description":"# Loading Bar\n\nRenders a Loading Bar.\n\n## Usage\n\n### active\nThe required `active` prop specifies when to render the component.\n\n```jsx\n<LoadingBar active={true} />\n```\n\n### color\nThe `color` prop specifies the color of the loading bar.\n\n```jsx\n<LoadingBar active={true} color={'#ffff00'} />\n```\n\n### backgroundColor\nThe `backgroundColor` prop specifies the background color of the loading bar.\n\n```jsx\n<LoadingBar active={true} backgroundColor={'#eeeeee'} />\n```\n\n\n### height\nThe `height` prop specifies the height of the loading bar.\n\n```jsx\n<LoadingBar active={true} height={'10px'} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Loading","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Loading","categoryHierarchy":"Components > Preact > Atoms > Loading"}
{"name":"Preact Component: Merchandising","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Merchandising","price":0,"description":"# Banner\n\nRenders a merchandising banner. Banner Types include `header`, `footer`, `left`, and `banner`. \n\nThis `Banner` component does not support inline banners. See `InlineBanner` component below.\n\n## Usage\n\n### content\nThe required `content` prop specifies an object of banners returned from the Searchspring API.\n\n```jsx\n<Banner content={controller?.store?.merchandising?.content} type={'header'} />\n```\n\n### type\nThe required `type` prop specifies the banner type to render from the `content` object.\n\nBanner Types include `header`, `footer`, `left`, and `banner`. \n\n```jsx\n<Banner content={controller?.store?.merchandising?.content} type={'header'} />\n```\n\n```jsx\n<Banner content={controller?.store?.merchandising?.content} type={'footer'} />\n```\n\n```jsx\n<Banner content={controller?.store?.merchandising?.content} type={'left'} />\n```\n\n```jsx\n<Banner content={controller?.store?.merchandising?.content} type={'banner'} />\n```\n\n# Inline Banner\n\n## Usage\n\n### banner\nThe `banner` prop specifies a reference to an inline banner object from the `content` object.\n\n```jsx\n<InlineBanner banner={controller?.store?.merchandising?.content.inline[0]} />\n```\n\n### width\nThe `width` prop specifies the width of the inline banner.\n\n```jsx\n<InlineBanner banner={controller?.store?.merchandising?.content.inline[0]} width={'300px'} />\n```\n\n### layout\nThe `layout` prop specifies if this banner will be rendered in a `grid` or `list` layout.\n\n```jsx\n<InlineBanner banner={controller?.store?.merchandising?.content.inline[0]} layout={'grid'} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Merchandising","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Merchandising","categoryHierarchy":"Components > Preact > Atoms > Merchandising"}
{"name":"Preact Component: Overlay","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Overlay","price":0,"description":"# Overlay\n\nRenders an Overlay. Typically used to blur the background with a foreground element such as a modal or slideout menu.\n\n## Usage\n\n### active\nThe required `active` prop specifies when to render the component.\n\n```jsx\n<Overlay active={true} />\n```\n\n### color\nThe `color` prop specifies the color of the overlay.\n\n```jsx\n<Overlay active={true} color={'rgba(0,0,0,0.8)'} />\n```\n\n### transitionSpeed\nThe `transitionSpeed` prop specifies animation transition speed.\n\n```jsx\n<Overlay active={true} transitionSpeed='0.5s' />\n```\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function.\n\n```jsx\n<Overlay active={true} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Overlay","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Overlay","categoryHierarchy":"Components > Preact > Atoms > Overlay"}
{"name":"Preact Component: Price","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Price","price":0,"description":"# Price\n\nUtilizes `currency` from [@searchspring/snap-toolbox](https://searchspring.github.io/snap/#/toolbox) to render a `<span>` containing a formatted number.\n\n## Usage\n\nThe `Price` component utilizes all props from the `FormattedNumber` component with the following additional prop:\n\n### lineThrough\nThe `lineThrough` prop will style the formatted number with a line-through.\n\n```jsx\n<Price value={1099.99} symbol=' €' lineThrough={true} thousandsSeparator='.' decimalSeparator=',' symbolAfter={true} />\n```\nFormatted output from above properties: ~~`1.099,99 €`~~\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Price","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Price","categoryHierarchy":"Components > Preact > Atoms > Price"}
{"name":"Preact Component: Skeleton","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Skeleton","price":0,"description":"# Skeleton\n\nRenders a div with a animation for use when building loading skeletons. \n\n## Usage\n\n### Height\nThe `height` prop specifies the css height of the skeleton div.\n\n```jsx\n<Skeleton height='200px' width='150px'/>\n```\n\n### Width\n\nThe `width` prop specifies the css width of the skeleton div.\n\n```jsx\n<Skeleton height='200px' width='150px'/>\n```\n\n### Round\n\nThe `round` prop is used for when you are wanting to render a circle instead of a block.\n\n```jsx\n<Skeleton height='200px' width='150px' round=\"true\"/>\n```\n\n### backgroundColor\n\nThe `backgroundColor` prop is used for changing the background color of the skeleton.\n\n```jsx\n<Skeleton height='200px' width='150px' backgroundColor='#333333'/>\n```\n\n### animatedColor\n\nThe `animatedColor` prop is used for changing the color of the moving vertical loading bar.\n\n```jsx\n<Skeleton height='200px' width='150px' backgroundColor='#333333' animatedColor=\"#000000\" />\n```","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Skeleton","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FAtoms-Skeleton","categoryHierarchy":"Components > Preact > Atoms > Skeleton"}
{"name":"Preact Component: Carousel","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Carousel","price":0,"description":"# Carousel\n\nRenders a carousel of slides using children, built with [Swiper](https://swiperjs.com/)\n\n## Sub-components\n- Icon\n\n## Usage\n\nAdditional [Swiper API parameters](https://swiperjs.com/swiper-api#parameters) can be specified as props, but may need to be camelCased where appropriate.\n\n```jsx\n<Carousel>{children}<Carousel/>\n```\n### loop\nThe `loop` prop enables 'infinite' looping through the result set when swiping or using the arrow buttons.\n\n```jsx\n<Carousel loop>{children}<Carousel/>\n```\n\n### pagination\nThe `pagination` prop specifies if the carousel should display pagination dots. \n\n```jsx\n<Carousel pagination>{children}<Carousel/>\n```\n\n### vertical \nThe `vertical` prop changes the carousel slide direction from horizontal, to vertical. \n\n```jsx\n<Carousel vertical>{children}<Carousel/>\n```\n\n### hideButtons\nThe `hideButtons` prop specifies if the carousel should hide prev/next buttons.\n\n```jsx\n<Carousel hideButtons>{children}<Carousel/>\n```\n\n### prevButton\nThe `prevButton` prop specifies the previous button element of the carousel. This can be a string or JSX element. \n\n```jsx\n<Carousel prevButton={'<'}>{children}<Carousel/>\n```\n\n### nextButton\nThe `nextButton` prop specifies the next button element of the carousel. This can be a string or JSX element. \n\n```jsx\n<Carousel nextButton={'>'}>{children}<Carousel/>\n```\n\n### onPrevButtonClick\nThe `onPrevButtonClick` prop can be used to handle click events on the prevButton.\n\n```jsx\n<Carousel onPrevButtonClick={() => { /* do something */ }}>{children}<Carousel/>\n```\n\n### onNextButtonClick\nThe `onNextButtonClick` prop can be used to handle click events on the prevButton.\n\n```jsx\n<Carousel onNextButtonClick={() => { /* do something */ }}>{children}<Carousel/>\n```\n\n### onClick\nThe `onClick` prop can be used to handle click events on the swiper component.\n\n```jsx\n<Carousel onClick={(swiper, e) => { /* do something */ }}>{children}<Carousel/>\n```\n\n### onInit\nThe `onInit` prop can be used to tie into the initialization event for swiper.\n\n```jsx\n<Carousel onInit={(swiper, e) => { /* do something */ }}>{children}<Carousel/>\n```\n\n### breakpoints\nAn object that modifies the responsive behavior of the carousel at various viewports. \n\nThe object key specified the viewport for when the parameters will be applied. \n\nThe default configuration contains the following properties, however any [Swiper API parameters](https://swiperjs.com/swiper-api#parameters) can also be specified. \n\n`slidesPerView` - number of products to display per page\n\n`slidesPerGroup` - number of products to scroll by when next/previous button is clicked\n\n`spaceBetween` - spacing between each product\n\n```typescript\nconst defaultCarouselBreakpoints = {\n\t0: {\n\t\tslidesPerView: 1,\n\t\tslidesPerGroup: 1,\n\t\tspaceBetween: 0,\n\t},\n\t480: {\n\t\tslidesPerView: 2,\n\t\tslidesPerGroup: 2,\n\t\tspaceBetween: 10,\n\t},\n\t768: {\n\t\tslidesPerView: 3,\n\t\tslidesPerGroup: 3,\n\t\tspaceBetween: 10,\n\t},\n\t1024: {\n\t\tslidesPerView: 4,\n\t\tslidesPerGroup: 4,\n\t\tspaceBetween: 10,\n\t},\n\t1200: {\n\t\tslidesPerView: 5,\n\t\tslidesPerGroup: 5,\n\t\tspaceBetween: 10,\n\t},\n};\n```\n\n```jsx\n<Carousel breakpoints={defaultCarouselBreakpoints}>{children}<Carousel/>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Carousel","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Carousel","categoryHierarchy":"Components > Preact > Molecules > Carousel"}
{"name":"Preact Component: Checkbox","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Checkbox","price":0,"description":"# Checkbox\n\nRenders a native or custom checkbox.\n\n## Sub-components\n- Icon\n\n## Usage\n\n### native\nThe `native` prop will render an `<input type='checkbox'>` element.\n\n```jsx\n<Checkbox native />\n```\n\n### checked\nThe `checked` prop allows for external state management. Otherwise if not provided, the component will use its own internal state.\n\n```jsx\n<Checkbox checked={true} />\n```\n\n### startChecked\nThe `startChecked` prop sets the checkbox to be checked on the initial render. Must use internal state by not using the `checked` prop.\n\n```jsx\n<Checkbox startChecked={true} />\n```\n\n### disabled\nThe `disabled` prop disables the checkbox from being toggled or invoking the `onClick` callback.\n\n```jsx\n<Checkbox disabled />\n```\n\n### size\nThe `size` prop will set the custom checkbox size.\n\n```jsx\n<Checkbox size={'16px'} />\n```\n\n### color\nThe `color` prop sets the checkbox border color and the icon color if the `iconColor` prop is not set.\n\n```jsx\n<Checkbox color={'#ffff00'} />\n```\n\n### iconColor\nThe `iconColor` prop sets the icon color and overwrites the `color` prop. It will not affect checkbox border color.\n\n```jsx\n<Checkbox iconColor={'#ffff00'} />\n```\n### icon\nThe `icon` prop specifies a path within the `Icon` component paths (see Icon Gallery). This only applies if using a custom checkbox `native={false}`.\n\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when the checkbox is clicked.\n\n```jsx\n<Checkbox onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Checkbox","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Checkbox","categoryHierarchy":"Components > Preact > Molecules > Checkbox"}
{"name":"Preact Component: ErrorHandler","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-ErrorHandler","price":0,"description":"# ErrorHandler\n\nRenders error messages.\n\n## Sub-components\n- Icon\n- Button\n\n## Usage\n\n### controller\nThe `controller` prop specifies a reference to a Snap controller. This is the standard usage.\n\n```jsx\n<ErrorHandler controller={controller} />\n```\n\n### error\nThe `error` prop provides an alternative means of utilizing the component to display errors messages.\n\n```jsx\nimport { ErrorType } from '@searchspring/snap-store-mobx';\nconst errorObject = {\n\tcode: 500,\n\ttype: ErrorType.ERROR,\n\tmessage: 'Invalid Search Request or Service Unavailable',\n}\n\n<ErrorHandler error={errorObject} />\n```\n\n### onRetryClick\nWhen a request has been rate limited, a 'warning' error with code `429` will be generated. For this error the component will render a 'retry' button to try the request again. By default the retry button will run the provided controller's `search` method unless the `onRetryClick` prop is provided.\n\n```jsx\n<ErrorHandler controller={controller} onRetryClick={(e) => {\n    // do something\n    controller.search();\n}}/>\n```\n\n```jsx\nimport { ErrorType } from '@searchspring/snap-store-mobx';\nconst errorObject = {\n\tcode: 429,\n\ttype: ErrorType.WARNING,\n\tmessage: 'Too many requests try again later',\n}\n\n<ErrorHandler error={errorObject} onRetryClick={(e) => {\n    // do something\n}}/>\n```\n\n\n## ErrorHandle Types\n\n```typescript\nimport { ErrorType } from '@searchspring/snap-store-mobx';\n\nexport enum ErrorType {\n\tWARNING = 'warning',\n\tINFO = 'info',\n\tERROR = 'error',\n}\n```","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-ErrorHandler","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-ErrorHandler","categoryHierarchy":"Components > Preact > Molecules > ErrorHandler"}
{"name":"Preact Component: FacetGridOptions","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetGridOptions","price":0,"description":"# Facet Grid Options\n\nRenders a grid of facet options.\n\n## Usage\n\n### values\nThe required `values` prop specifies all facet values where the facet type is 'grid'.\n\n```jsx\n<FacetGridOptions values={sizeFacet.values} />\n```\n\n### columns\nThe `columns` prop is the number of columns the grid should contain.\n\n```jsx\n<FacetGridOptions values={sizeFacet.values} columns={3} />\n```\n\n### gapSize\nThe `gapSize` prop is the gap size between rows and columns.\n\n```jsx\n<FacetGridOptions values={sizeFacet.values} gapSize={'10px'} />\n```\n\n### previewOnFocus\nIf using within Autocomplete, the `previewOnFocus` prop will invoke the `value.preview()` method when the value is focused. \n\n```jsx\n<Autocomplete>\n\t...\n\t<FacetGridOptions values={sizeFacet.values} previewOnFocus={true} />\n\t...\n</Autocomplete>\n```\n\n### valueProps\nThe `valueProps` prop will be spread onto each value's `<a>` element. Typical usage would be to provide custom callback functions when used within Autocomplete.\n\n```typescript\nconst valueProps = {\n\tonMouseEnter: (e) => {\n\t\tclearTimeout(delayTimeout);\n\t\tdelayTimeout = setTimeout(() => {\n\t\t\te.target.focus();\n\t\t}, delayTime);\n\t},\n\tonMouseLeave: () => {\n\t\tclearTimeout(delayTimeout);\n\t},\n}\n```\n\n```jsx\n<FacetGridOptions values={sizeFacet.values} valueProps={valueProps} />\n```\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when when a facet value is clicked.\n\n```jsx\n<FacetGridOptions values={sizeFacet.values} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetGridOptions","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetGridOptions","categoryHierarchy":"Components > Preact > Molecules > FacetGridOptions"}
{"name":"Preact Component: FacetHierarchyOptions","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetHierarchyOptions","price":0,"description":"# Facet Hierarchy Options\n\nRenders a list of hierarchy options.\n\n## Usage\n\n### values\nThe required `values` prop specifies all facet values where the facet type is 'hierarchy'.\n\n```jsx\n<FacetHierarchyOptions values={hierarchyFacet.values} />\n```\n\n### hideCount\nThe `hideCount` prop will disable the facet count values.\n\n```jsx\n<FacetHierarchyOptions values={hierarchyFacet.values} hideCount={true} />\n```\n\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when a facet value is clicked.\n\n```jsx\n<FacetHierarchyOptions values={hierarchyFacet.values} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetHierarchyOptions","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetHierarchyOptions","categoryHierarchy":"Components > Preact > Molecules > FacetHierarchyOptions"}
{"name":"Preact Component: FacetListOptions","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetListOptions","price":0,"description":"# Facet List Options\n\nRenders a list of facet options.\n\n## Sub-components\n- Checkbox\n\n## Usage\n\n### values\nThe required `values` prop specifies all facet values where the facet type is 'list'.\n\n```jsx\n<FacetListOptions values={listFacet.values} />\n```\n\n### hideCheckbox\nThe `hideCheckbox` prop will disable the facet checkbox. Typically used if the facet can only have a single value selected at a time.\n\n```jsx\n<FacetListOptions values={listFacet.values} hideCheckbox={true} />\n```\n\n### hideCount\nThe `hideCount` prop will disable the facet count values.\n\n```jsx\n<FacetListOptions values={listFacet.values} hideCount={true} />\n```\n\n### previewOnFocus\nIf using within Autocomplete, the `previewOnFocus` prop will invoke the `value.preview()` method when the value is focused. \n\n```jsx\n<Autocomplete>\n\t...\n\t<FacetGridOptions values={sizeFacet.values} previewOnFocus={true} />\n\t...\n</Autocomplete>\n```\n\n### valueProps\nThe `valueProps` prop will be spread onto each value's `<a>` element. Typical usage would be to provide custom callback functions when used within Autocomplete.\n\n```typescript\nconst valueProps = {\n\tonMouseEnter: (e) => {\n\t\tclearTimeout(delayTimeout);\n\t\tdelayTimeout = setTimeout(() => {\n\t\t\te.target.focus();\n\t\t}, delayTime);\n\t},\n\tonMouseLeave: () => {\n\t\tclearTimeout(delayTimeout);\n\t},\n}\n```\n\n```jsx\n<FacetListOptions values={listFacet.values} valueProps={valueProps} />\n```\n\n### checkbox\nThe `checkbox` prop specifies an object with `Checkbox` component props. See `Checkbox` component documentation for further details.\n\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when a facet value is clicked.\n\n```jsx\n<FacetListOptions values={listFacet.values} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetListOptions","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetListOptions","categoryHierarchy":"Components > Preact > Molecules > FacetListOptions"}
{"name":"Preact Component: FacetPaletteOptions","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetPaletteOptions","price":0,"description":"# Facet Palette Options\n\nRenders a grid of facet palette options. \n\n## Sub-components\n- Icon\n\n## Usage\n\n### values\nThe required `values` prop specifiesall facet values where the facet type is 'palette'.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} />\n```\n\n### hideLabel\nThe `hideLabel` prop will disable the facet label.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} hideLabel={true} />\n```\n\n### columns\nThe `columns` prop is the number of columns the grid should contain.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} columns={3} />\n```\n\n### gapSize\nThe `gapSize` prop is the gap size between rows and columns.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} gapSize={'10px'} />\n```\n\n### hideIcon\nThe `hideIcon` prop will disable the facet icon from being rendered.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} hideIcon={true} />\n```\n\n### previewOnFocus\nIf using within Autocomplete, the `previewOnFocus` prop will invoke the `value.preview()` method when the value is focused. \n\n```jsx\n<Autocomplete>\n\t...\n\t<FacetPaletteOptions values={paletteFacet.values} previewOnFocus={true} />\n\t...\n</Autocomplete>\n```\n\n### valueProps\nThe `valueProps` prop will be spread onto each value's `<a>` element. Typical usage would be to provide custom callback functions when used within Autocomplete.\n\n```typescript\nconst valueProps = {\n\tonMouseEnter: (e) => {\n\t\tclearTimeout(delayTimeout);\n\t\tdelayTimeout = setTimeout(() => {\n\t\t\te.target.focus();\n\t\t}, delayTime);\n\t},\n\tonMouseLeave: () => {\n\t\tclearTimeout(delayTimeout);\n\t},\n}\n```\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} valueProps={valueProps} />\n```\n\n### icon\nThe `icon` prop specifiesan object with `Icon` component props. \n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when a facet value is clicked.\n\n```jsx\n<FacetPaletteOptions values={paletteFacet.values} onClick={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetPaletteOptions","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetPaletteOptions","categoryHierarchy":"Components > Preact > Molecules > FacetPaletteOptions"}
{"name":"Preact Component: FacetSlider","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetSlider","price":0,"description":"# Facet Slider\n\nRenders a slider to be used with any slider facet. Built using [react-ranger](https://github.com/tannerlinsley/react-ranger).\n\n## Usage\n\n### facet\nThe required `facet` prop specifies a reference to a facet within the facets store array. The facet must be a range facet (`display` type of `'slider'`).\n\n```jsx\n<FacetSlider facet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} />\n```\n\n### showTicks\nThe `showTicks` prop will render reference ticks below the slider track.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tshowTicks={true}\n/>\n```\n\n### tickSize\nThe `tickSize` prop specifies the unit number between ticks. Must be used with `showTicks` prop.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tshowTicks={true}\n\ttickSize={20}\n/>\n```\n\n### tickTextColor\nThe `tickTextColor` prop specifies ticks text color. Must be used with `showTicks` prop.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tshowTicks={true}\n\ttickTextColor={'#cccccc'}\n/>\n```\n\n### handleColor\nThe `handleColor` prop specifies the handle color.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\thandleColor={'#0000ff'}\n/>\n```\n\n### stickyHandleLabel\nThe `stickyHandleLabel` prop specifies if the handle value text should display above each handle.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tstickyHandleLabel={true}\n/>\n```\n\n### handleDraggingColor\nThe `handleDraggingColor` prop specifies the handle color while dragging.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\thandleDraggingColor={'0000ff'}\n/>\n```\n\n### valueTextColor\nThe `valueTextColor` prop specifies the value text color.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tvalueTextColor={'#222222'}\n/>\n```\n\n### trackColor\nThe `trackColor` prop specifies the slider track (background) color.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\ttrackColor={'#cccccc'}\n/>\n```\n\n### railColor\nThe `railColor` prop specifies the slider rail (foreground) color.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\trailColor={'#0000ff'}\n/>\n```\n\n### Events\n\n#### onChange\nThe `onChange` prop allows for a custom callback function for when a slider handle has been changed.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tonChange={(values)=>{ console.log(`low: ${values[0]} high: ${values[1]}`) }}\n/>\n```\n\n#### onDrag\nThe `onDrag` prop allows for a custom callback function for when a slider handle is being dragged.\n\n```jsx\n<FacetSlider \n\tfacet={controller.store.facets.filter(facet => facet.display === 'slider').pop()} \n\tonDrag={(values)=>{ console.log(`low: ${values[0]} high: ${values[1]}`) }}\n/>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetSlider","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-FacetSlider","categoryHierarchy":"Components > Preact > Molecules > FacetSlider"}
{"name":"Preact Component: Filter","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Filter","price":0,"description":"# Filter\n\nRenders a facet filter.\n\n## Sub-components\n- Icon\n- Button\n\n## Usage\n\n### facetLabel\nThe `facetLabel` prop specifies the filter label. Typically set to the facet label.\n\n```jsx\n<Filter facetLabel={'Brand'} />\n```\n\n### valueLabel\nThe `valueLabel` prop specifies the filter value. Typically set to the facet value label.\n\n```jsx\n<Filter valueLabel={'Nike'} />\n```\n\n### url\nThe `url` prop specifies a link to clear the filter selection.\n\n```jsx\n<Filter facetLabel={filter.facet.label} valueLabel={filter.value.label} url={filter.url} />\n```\n\n### hideFacetLabel\nThe `hideFacetLabel` prop will disable the filter facet label.\n\n```jsx\n<Filter facetLabel={filter.facet.label} valueLabel={filter.value.label} hideFacetLabel={true} />\n```\n### separator\nThe `separator` prop will specify the separator character between `facetLabel` and `valueLabel`.\n\n```jsx\n<Filter facetLabel={filter.facet.label} valueLabel={filter.value.label} separator={': '} />\n```\n\n### icon\nThe `icon` prop specifies a path within the `Icon` component paths (see Icon Gallery).\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when a filter is clicked.\n\n```jsx\n<Filter onClick={(e)=>{console.log(e)}}/>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Filter","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Filter","categoryHierarchy":"Components > Preact > Molecules > Filter"}
{"name":"Preact Component: Pagination","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Pagination","price":0,"description":"# Pagination\n\nRenders pagination page links for the given search response. \n\n## Sub-components\n- Icon\n\n## Usage\n\n### pagination\nThe required `pagination` prop specifies a reference to the pagination store object.\n\n```jsx\n<Pagination pagination={controller.store.pagination} />\n```\n\n### pages\nThe `pages` prop specifies the number of pages to retrieve. This value is passed to the `store.pagination.getPages()` method.\n\n```jsx\n<Pagination pagination={controller.store.pagination} pages={5} />\n```\n\n### pagesLeft\nThe `pagesLeft` prop specifies the number of pages to retrieve before the current page. This value is passed to the `store.pagination.getPages()` method along with `pagesRight`.\n\n```jsx\n<Pagination pagination={controller.store.pagination} pagesLeft={2} />\n```\n\n### pagesRight\nThe `pagesLeft` prop specifies the number of pages to retrieve after the current page. This value is passed to the `store.pagination.getPages()` method along with `pagesLeft`.\n\n```jsx\n<Pagination pagination={controller.store.pagination} pagesRight={2} />\n```\n\n### hideFirst\nThe `hideFirst` prop disables the first page.\n\n```jsx\n<Pagination pagination={controller.store.pagination} hideFirst={true} />\n```\n\n### hideLast\nThe `hideLast` prop disables the last page.\n\n```jsx\n<Pagination pagination={controller.store.pagination} hideLast={true} />\n```\n\n### hideEllipsis\nThe `hideEllipsis` prop disables the hideEllipsis after the first page, or the last page when applicable. \n\n```jsx\n<Pagination pagination={controller.store.pagination} hideEllipsis={true} />\n```\n\n### hideNext\nThe `hideNext` prop disables the next page.\n\n```jsx\n<Pagination pagination={controller.store.pagination} hideNext={true} />\n```\n\n### hidePrev\nThe `hidePrev` prop disables the previous page.\n\n```jsx\n<Pagination pagination={controller.store.pagination} hidePrev={true} />\n```\n\n### nextButton\nThe `nextButton` prop specifies the next page button content. This can be a string or JSX element.\n\n```jsx\n<Pagination pagination={controller.store.pagination} nextButton={'Next'} />\n```\n\n### prevButton\nThe `prevButton` prop specifies the previous page button content. This can be a string or JSX element.\n\n```jsx\n<Pagination pagination={controller.store.pagination} prevButton={'Prev'} />\n```\n\n### firstButton\nThe `firstButton` prop specifies the first page button content. This can be a string or JSX element.\n\n```jsx\n<Pagination pagination={controller.store.pagination} firstButton={'First'} />\n```\n\n### lastButton\nThe `lastButton` prop specifies the last page button content. This can be a string or JSX element.\n\n```jsx\n<Pagination pagination={controller.store.pagination} lastButton={'Prev'} />\n```","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Pagination","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Pagination","categoryHierarchy":"Components > Preact > Molecules > Pagination"}
{"name":"Preact Component: Result","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Result","price":0,"description":"# Result\n\nRenders a single product card. \n\n## Sub-components\n- Badge\n- Price\n- Image\n\n## Usage\n\n### result\nThe required `result` prop specifies a reference to a product object from the `results` store array.\n\n```jsx\n<Result result={controller.store.results[0]} />\n```\n\n### hideBadge\nThe `hideBadge` prop will prevent the `<Badge />` component from rendering.\n\n```jsx\n<Result result={controller.store.results[0]} hideBadge={true} />\n```\n\n### hideTitle\nThe `hideTitle` prop will prevent to product title from rendering.\n\n```jsx\n<Result result={controller.store.results[0]} hideTitle={true} />\n```\n\n### hidePricing\nThe `hidePricing` prop will prevent the pricing from rendering.\n\n```jsx\n<Result result={controller.store.results[0]} hidePricing={true} />\n```\n\n### hideImage\nThe `hideImage` prop will prevent the image from rendering.\n\n```jsx\n<Result result={controller.store.results[0]} hideImage={true} />\n```\n\n### detailSlot\nThe `detailSlot` prop is a JSX element to used display additional content below the title and pricing sections.\n\n```typescript\nconst productDetails = (props) => {\n\tconst listEntries = props?.product?.attributes?.descriptionList.split('|');\n\treturn (\n\t\tlistEntries && (\n\t\t\t<ul>\n\t\t\t\t{listEntries.map(entry => (\n\t\t\t\t\t<li>{entry}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t)\n\t)\n}\n```\n\n```jsx\n<Result result={controller.store.results[0]} detailSlot={<productDetails product={controller.store.results[0]/>} />\n```\n\n### fallback\nThe `fallback` prop will be passed to the `<Image />` sub-component. If the primary image does not display, this fallback image will be displayed instead. \n\n```jsx\n<Result result={controller.store.results[0]} fallback={'https://www.example.com/imgs/placeholder.jpg'} />\n```\n\n### width\nThe `width` prop sets the width of this Result.\n\n```jsx\n<Result result={controller.store.results[0]} width={'25%'} />\n```\n\n### layout\nThe `layout` prop specifies if this Result will be contained in a `grid` or `list` layout.\n\n```jsx\n<Result result={controller.store.results[0]} layout={'grid'} />\n```\n\n### truncateTitle\nThe `truncateTitle` prop utililizes the truncate filter from the snap-toolbox to allow you truncate the product title at a certain character length, and optionally append an additional string such as \"...\"\n\n```jsx\n<Result result={controller.store.results[0]} truncateTitle={ limit: 5, append: '...' } />\n```","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Result","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Result","categoryHierarchy":"Components > Preact > Molecules > Result"}
{"name":"Preact Component: Select","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Select","price":0,"description":"# Select\n\nRenders a native or custom select dropdown.\n\n## Sub-components\n- Button\n- Dropdown \n- Icon\n\n## Usage\n\n### options\nThe required `options` prop specifies an array of Option Objects to be rendered.\n\n```jsx\n<Select options={controller.store.sorting.options} native={true} />\n```\n\n#### Option Object\n\n```typescript\n{\n\tlabel: 'Price',\n\tvalue: 'asc'\n}\n```\n\n### native\nThe `native` prop will use a native html `<select>` element.\n\n```jsx\n<Select options={controller.store.sorting.options} native />\n```\n\n### disabled\nThe `disabled` prop will disable the select from being toggled or invoking the `onSelect` callback.\n\n```jsx\n<Select options={controller.store.sorting.options} disabled />\n```\n\n### label\nThe `label` prop specifies the label for this select. This can be a string or JSX element.\n\n```jsx\n<Select options={controller.store.sorting.options} label={'Sort By'} />\n```\n\n### separator\nThe `separator` prop is rendered between the `label` prop and the select dropdown. This can be a string or JSX element.\n\n```jsx\n<Select options={controller.store.sorting.options} label={'Sort By'} separator={': '} />\n```\n\n### selected\nThe `selected` prop specifies the currently selected Option object. Specifying this prop relies on external state management.\n\n```jsx\n<Select options={controller.store.sorting.options} selected={controller.store.sorting.options[0]} />\n```\n\n### startOpen\nThe `startOpen` prop will render the dropdown in an open state on the initial render.\n\n```jsx\n<Select options={controller.store.sorting.options} startOpen={true} />\n```\n\n### stayOpenOnSelection\nThe `stayOpenOnSelection` prop will not close the dropdown upon making a selection.\n\n```jsx\n<Select options={controller.store.sorting.options} stayOpenOnSelection={true} />\n```\n\n### hideLabelOnSelection\nThe `hideLabelOnSelection` prop will prevent the `label` and `separator` from being rendered upon making a selection.\n\n```jsx\n<Select options={controller.store.sorting.options} label={'Sort By'} separator={': '} hideLabelOnSelection={true} />\n```\n\n### clearSelection\nThe `clearSelection` prop accepts a string value to display as the option that will clear the current selection.\n\n```jsx\n<Select options={controller.store.sorting.options} clearSelection={'clear'} />\n```\n\n### disableClickOutside\nThe `disableClickOutside` prop by default is `false`. Setting this to `true` will not close the dropdown if a click event was registered outside the dropdown content.\n\n```jsx\n<Select options={controller.store.sorting.options} disableClickOutside={true} />\n```\n\n### color\nThe `color` prop sets the dropdown border, text, button, and icon colors.\n\n```jsx\n<Select options={controller.store.sorting.options} color={'#222222'} />\n```\n\n### borderColor\nThe `borderColor` prop overwrites the `color` prop for the dropdown and button border color.\n\n```jsx\n<Select options={controller.store.sorting.options} color={'#222222'} borderColor={'#cccccc'} />\n```\n\n### backgroundColor\nThe `backgroundColor` prop sets the background color of the dropdown and button.\n\n```jsx\n<Select options={controller.store.sorting.options} backgroundColor={'#ffffff'} />\n```\n\n### iconColor\nThe `iconColor` prop sets the icon color and overwrites the `color` prop.\n\n```jsx\n<Select options={controller.store.sorting.options} iconColor={'#222222'} />\n```\n\n### iconClose\nThe `iconClose` prop is the name of the icon to render when the dropdown is in its open state.\n\n```jsx\n<Select options={controller.store.sorting.options} iconClose={'angle-up'} />\n```\n\n### iconOpen\nThe `iconOpen` prop is the name of the icon to render when the dropdown is in its closed state.\n\n```jsx\n<Select options={controller.store.sorting.options} iconOpen={'angle-down'} />\n```\n\n### Events\n\n#### onSelect\nThe `onSelect` prop allows for a custom callback function for when a selection has been made.\n\n```jsx\n<Select options={controller.store.sorting.options} onSelect={(e)=>{console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Select","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Select","categoryHierarchy":"Components > Preact > Molecules > Select"}
{"name":"Preact Component: Slideout","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Slideout","price":0,"description":"# Slideout\n\nRenders a slideout with a background overlay. Typically used for a mobile menu slideout. \n\n## Sub-components\n- Overlay\n\n## Usage\n\n### children\nThe children provided to the component will be displayed within the slideout. \n\n```jsx\n<Slideout active={true}>\n\t<span>slideout content (children)</span>\n</Slideout>\n```\n### active\nThe required `active` prop specifies the state of when the slideout is rendered.\n\n```jsx\n<Slideout active={true}>\n\t<div>Hello World</div>\n</Slideout>\n```\n\n### buttonContent\nThe `buttonContent` prop accepts a string or JSX element to render a clickable button that toggles the slideout visibility. \n\nWhen using the custom `buttonContent` prop, render the component where you want the button to render. The slideout menu's position is fixed, therefore the location of the component is only for the render location of the button. \n\n```jsx\n<Slideout active={true} buttonContent={'Show Filters'}>\n\t<div>slideout content</div>\n</Slideout>\n```\n\n### width\nThe `width` prop is the width of the slideout.\n\n```jsx\n<Slideout active={true} width={'300px'}>\n\t<div>slideout content</div>\n</Slideout>\n```\n\n### displayAt\nThe `displayAt` prop specifies a CSS media query for when the component will render. By default, the component will always render. \n\n```jsx\n<Slideout active={true} displayAt={'(max-width: 600px)'}>\n\t<div>slideout content</div>\n</Slideout>\n```\n\n### transitionSpeed\nThe `transitionSpeed` prop changes the CSS transition speed animation for the slideout and overlay.\n\n```jsx\n<Slideout active={true} transitionSpeed={'0.5s'}>\n\t<div>slideout content</div>\n</Slideout>\n```\n\n\n### overlayColor\nThe `overlayColor` prop sets the overlay color.\n\n```jsx\n<Slideout active={true} overlayColor={'rgba(0,0,0,0.7)'}>\n\t<div>slideout content</div>\n</Slideout>\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Slideout","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FMolecules-Slideout","categoryHierarchy":"Components > Preact > Molecules > Slideout"}
{"name":"Preact Component: Autocomplete","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Autocomplete","price":0,"description":"# Autocomplete\n\nRenders an autocomplete popup that binds to an `<input>` element.\n\nThe autocomplete layout renders terms, facets, banners, and results.\n\n## Components Used\n- Facets\n- Banner\n- Results\n- Icon\n\n## Usage\n\n### input\nThe required `input` prop expects either:\n\n- a string CSS selector that targets `<input>` element(s) to bind to\n\n- an `<input>` element to bind to\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} />\n```\n\n### controller\nThe required `controller` prop specifies a reference to the autocomplete controller.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} />\n```\n\n### width\nThe `width` prop specifies a width for the overall component. The default value is '100%'.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} width=\"800px\" />\n```\n\n### horizontalTerms\nThe `horizontalTerms` prop will alter autocomplete's CSS to display terms horizontally.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} horizontalTerms={true} />\n```\n\n### vertical\nThe `vertical` prop will alter autocomplete's CSS to display in a vertical layout.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} vertical={true} />\n```\n\n### termsTitle\nThe `termsTitle` prop will display the given text above the autocomplete terms area. The default value is blank and does not affect the trending terms title `trendingTitle`.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} termsTitle={'Terms'} />\n```\n\n### trendingTitle\nThe `trendingTitle` prop will display the given text above the autocomplete terms area when trending terms are displayed. The default value is 'Popular Searches' and does not affect non-trending terms title `termsTitle`. Also requires `controller.config.settings.trending.limit` to be configured)\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} trendingTitle={'Trending'} />\n```\n\n### facetsTitle\nThe `facetsTitle` prop will display the given text above the autocomplete facets area. (default is blank)\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} facetsTitle={'Filter By'} />\n```\n\n### contentTitle\nThe `contentTitle` prop will display the given text above the autocomplete content area. (default is blank)\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} contentTitle={'Results'} />\n```\n\n### viewportMaxHeight\nThe `viewportMaxHeight` prop will restrict autocomplete from overflowing the viewport. The max height of autocomplete will always be visible in the viewport. \n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} viewportMaxHeight={true} />\n```\n\n### termsSlot\nThe `termsSlot` prop accepts a custom JSX element to render instead of the default terms section. This will also replace the trending terms.\n\nThe following props are available to be used within your custom component: `terms`, `trending`, `termsTitle`, `trendingTitle`, `showTrending`, `valueProps`, `emIfy`, `controller`\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} termsSlot={<CustomTermsComponent />} />\n```\n\n### facetsSlot\nThe `facetsSlot` prop accepts a custom JSX element to render instead of the default facets section. \n\nThe following props are available to be used within your custom component: `facets`, `merchandising`, `facetsTitle`, `hideBanners`, `controller`, `valueProps`\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} facetsSlot={<CustomFacetsComponent />} />\n```\n\n### contentSlot\nThe `contentSlot` prop accepts a custom JSX element to render instead of the default content section. \n\nThe following props are available to be used within your custom component: `results`, `merchandising`, `search`, `pagination`, `filters`, `controller`\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} contentSlot={<CustomContentComponent />} />\n```\n\n### resultsSlot\nThe `resultsSlot` prop accepts a custom JSX element to render instead of the default results section. \n\nThe following props are available to be used within your custom component: `results`, `contentTitle`, `controller`\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} resultsSlot={<CustomResultsComponent />} />\n```\n\n### noResultsSlot\nThe `noResultsSlot` prop accepts a custom JSX element to render instead of the default no results section. \n\nThe following props are available to be used within your custom component: `search`, `pagination`, `controller`\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} noResultsSlot={<CustomNoResultsComponent />} />\n```\n\n### linkSlot\nThe `linkSlot` prop accepts a custom JSX element to render instead of the default \"see n results for keyword\" link section. \n\nThe following props are available to be used within your custom component: `search`, `results`, `pagination`, `filters`, `controller`\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} linkSlot={<CustomLinkComponent />} />\n```\n\n### hideFacets\nThe `hideFacets` prop specifies if the facets within autocomplete should be rendered.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} hideFacets={true} />\n```\n\n### hideTerms\nThe `hideTerms` prop specifies if the terms within autocomplete should be rendered.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} hideTerms={true} />\n```\n\n### hideContent\nThe `hideContent` prop specifies if the content area within autocomplete should be rendered.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} hideContent={true} />\n```\n\n### hideBanners\nThe `hideBanners` prop specifies if the banners within autocomplete should be rendered. (inline banners not affected)\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} hideBanners={true} />\n```\n\n### hideLink\nThe `hideLink` prop specifies if the \"see n results for keyword\" text within autocomplete should be rendered.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} hideLink={true} />\n```\n\n### breakpoints\nThe `breakpoints` prop contains a breakpoints object that is passed to the `<Results />` sub-component.\nWhen the viewport is between the Object's key value, those props will be merged with any exisiting Autocomplete component props.\n\nDefault Autocomplete `breakpoints` object:\n\n```typescript\nconst breakpoints = {\n    0: {\n        columns: 2,\n        rows: 1,\n        hideFacets: true,\n        vertical: true,\n    },\n    540: {\n        columns: 3,\n        rows: 1,\n        vertical: true,\n    },\n    768: {\n        columns: 2,\n        rows: 3,\n    },\n};\n```\n\nSee `<Results />` component documentation for further details.\n\n```jsx\n<Autocomplete controller={controller} input={'#searchInput'} breakpoints={breakpoints} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Autocomplete","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Autocomplete","categoryHierarchy":"Components > Preact > Organisms > Autocomplete"}
{"name":"Preact Component: Facet","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facet","price":0,"description":"# Facet\n\nRenders a single complete facet. This includes determining the correct options type, a collapsable header, and overflow options. \n\n## Sub-components\n- Dropdown\n- FacetHierarchyOptions\n- FacetGridOptions\n- FacetListOptions\n- FacetPaletteOptions\n- Slider\n- Icon\n\n## Usage\n\n### facet\nThe required `facet` prop specifies a reference to any single facet object within the facets store array. \n\n```jsx\n<Facet facet={controller.store.facets[0]} />\n```\n\n### disableCollapse\nThe `disableCollapse` prop prevents the facet from toggling its collapse state. \n\n```jsx\n<Facet facet={controller.store.facets[0]} disableCollapse={true} />\n```\n\n### color\nThe `color` prop sets the facet name and icon color.\n\n```jsx\n<Facet facet={controller.store.facets[0]} color={'#222222'} />\n```\n\n### limit\nThe `limit` prop sets the number of options to display before the remaining options overflow and a show more/less button is displayed. \n\n```jsx\n<Facet facet={controller.store.facets[0]} limit={10} />\n```\n\n### previewOnFocus\nIf using within Autocomplete, the `previewOnFocus` prop will invoke the `value.preview()` method when the value is focused. \n\n```jsx\n<Facet facet={controller.store.facets[0]} previewOnFocus={true} />\n```\n\n### valueProps\nThe `valueProps` prop will be spread onto each value's `<a>` element. Typical usage would be to provide custom callback functions when used within Autocomplete.\n\n```typescript\nconst valueProps = {\n\tonMouseEnter: (e) => {\n\t\tclearTimeout(delayTimeout);\n\t\tdelayTimeout = setTimeout(() => {\n\t\t\te.target.focus();\n\t\t}, delayTime);\n\t},\n\tonMouseLeave: () => {\n\t\tclearTimeout(delayTimeout);\n\t},\n}\n```\n\n```jsx\n<Facet facet={controller.store.facets[0]} valueProps={valueProps} />\n```\n\n### iconExpand\nThe `iconExpand` prop is the name of the icon to render when the facet is in its collapsed state.\n\n```jsx\n<Facet facet={controller.store.facets[0]} iconExpand={'angle-down'} />\n```\n\n### iconCollapse\nThe `iconCollapse` prop is the name of the icon to render when the facet is in its open state.\n\n```jsx\n<Facet facet={controller.store.facets[0]} iconCollapse={'angle-up'} />\n```\n\n### showMoreText\nThe `showMoreText` prop contains the text to display in the facet overflow button when collapsed. Default is `'Show More'`\n\n```jsx\n<Facet facet={controller.store.facets[0]} showMoreText={'Show More'} />\n```\n\n### showLessText\nThe `showLessText` prop contains the text to display in the facet overflow button when expanded. Default is `'Show Less'`\n\n```jsx\n<Facet facet={controller.store.facets[0]} showLessText={'Show Less'} />\n```\n\n### iconOverflowMore\nThe `iconOverflowMore` prop contains the icon name of the facet overflow button when collapsed. Default is `'plus'`\n\n```jsx\n<Facet facet={controller.store.facets[0]} iconOverflowMore={'plus'} />\n```\n\n### iconOverflowLess\nThe `iconOverflowLess` prop contains the icon name of the facet overflow button when expanded. Default is `'minus'`\n\n```jsx\n<Facet facet={controller.store.facets[0]} iconOverflowLess={'minus'} />\n```\n\n### overflowSlot\nThe `overflowSlot` prop is a JSX element used to change the display of the show more/less toggle.\n\n```typescript\nconst Overflow = (props) => {\n\tconst facet = props.facet;\n\treturn (\n\t\t<div>Show { facet.overflow.remaining > 0 ? `${facet.overflow.remaining} ` : ''}{facet.overflow.remaining > 0 ? 'more' : 'less'}...</div>\n\t)\n}\n```\n\n```jsx\n<Facet facet={controller.store.facets[0]} overflowSlot={<Overflow/>} />\n```\n\n\n### fields\nThe `fields` prop allows you to manually change prop values on a per-facet level, sorted by the facet field.\n\n```typescript\nconst fieldsProp = {\n\tColor: {\n\t\tlimit: 6,\n\t},\n\tSize: { \n\t\tdisableOverflow: true,\n\t\tdisableCollapse: true,\n\t}\n},\n```\n\n```jsx\n<Facet facet={controller.store.facets[0]} fields={fieldsProp} />\n```\n\n\n### optionsSlot\nThe `optionsSlot` prop is a JSX element used to manually set the options component used, regardless of the facet.display type. Returns the facet,valueProps, limit, & previewOnFocus prop values.\n\n```typescript\nconst CustomFacetOptions = (props) => {\n\tconst facet = props.facet;\n\treturn (\n\t\t<div>\n\t\t\t{facet && facet.values.map(value => <span>{value.label}</span>)}\n\t\t</div>\n\t)\n}\n```\n\n```jsx\n<Facet facet={controller.store.facets[0]} optionsSlot={<CustomFacetOptions/>} />\n```\n\n\n### iconColor\nThe `iconColor` prop sets the facet icon color.\n\n```jsx\n<Facet facet={controller.store.facets[0]} iconColor={'#222222'} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facet","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facet","categoryHierarchy":"Components > Preact > Organisms > Facet"}
{"name":"Preact Component: Facets","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facets","price":0,"description":"# Facets\n\nRenders all facets utilizing the `<Facet />` component.\n\n## Sub-components\n- Facet\n\n## Usage\n\n### controller\nThe `controller` prop specifies a reference to the search controller.\n\n```jsx\n<Facets controller={controller} />\n```\n\n### facets\nThe optional`facets` prop specifies a reference to the facets store array. If no facets prop is passed in, the component will default to using the facets in controller.store. \n\n```jsx\n<Facets controller={controller} facets={facets} />\n```\n\n### limit\nThe `limit` prop will limit the maximum number of facets to display.\n\n```jsx\n<Facets controller={controller} facets={facets} limit={3}/>\n```","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facets","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Facets","categoryHierarchy":"Components > Preact > Organisms > Facets"}
{"name":"Preact Component: FilterSummary","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-FilterSummary","price":0,"description":"# Filter Summary\n\nRenders all selected filters including a wrapper with a title and a 'clear all' button. \n\n## Components Used\n- Filter\n## Usage\n\n\n### controller\nThe `controller` prop specifies a reference to the search controller.\n\n```jsx\n<FilterSummary controller={controller} />\n```\n\n### filters\nThe `filters` prop specifies a reference to the filters store array. If no filters prop is passed in, the component will default to using the filters in controller.store. \n\n```jsx\n<FilterSummary filters={controller.store.filters} />\n```\n\n### title\nThe `title` prop specifies the title of the filter summary wrapper. The default is `'Current Filters'`.\n\n```jsx\n<FilterSummary filters={controller.store.filters} title={'Current Filters'} />\n```\n\n### filterIcon\nThe `filterIcon` prop is the name of the icon to render for each filter. \n\n```jsx\n<FilterSummary filters={controller.store.filters} filterIcon={'close-thin'} />\n```\n\n### clearAllIcon\nThe `clearAllIcon` prop is the name of the icon to render for the 'clear all' button. \n\n```jsx\n<FilterSummary filters={controller.store.filters} clearAllIcon={'close-thin'} />\n```\n\n### separator\nThe `separator` prop will specify the separator character between `facetLabel` and `valueLabel` of the `<Filter />` sub-component.\n\n```jsx\n<FilterSummary filters={controller.store.filters} separator={': '} />\n```\n\n### hideFacetLabel\nThe `hideFacetLabel` prop prevents the filter label (selected facet name) from displaying. Only the value selected will be displayed. Use of this prop will nullify the `separator` prop.\n\n```jsx\n<FilterSummary filters={controller.store.filters} hideFacetLabel={true} />\n```\n\n### clearAllLabel\nThe `clearAllLabel` prop is the 'clear all' button text. This is passed to the `<Filter />` sub-component `valueLabel` prop. The default value is `'Clear All'`.\n\n```jsx\n<FilterSummary filters={controller.store.filters} clearAllLabel={'Clear All'} />\n```\n\n### hideClearAll\nThe `hideClearAll` prop prevents the 'clear all' button from rendering.\n\n```jsx\n<FilterSummary filters={controller.store.filters} hideClearAll={true} />\n```\n\n### Events\n\n#### onClick\nThe `onClick` prop allows for a custom callback function for when any of the selected filters are clicked.\n\n```jsx\n<FilterSummary filters={controller.store.filters} onClick={(e, filter) => {console.log(e, filter)}} />\n```\n\n#### onClearAllClick\nThe `onClearAllClick` prop allows for a custom callback function for when the 'clear all' button is clicked.\n\n```jsx\n<FilterSummary filters={controller.store.filters} onClearAllClick={(e) => {console.log(e)}} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-FilterSummary","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-FilterSummary","categoryHierarchy":"Components > Preact > Organisms > FilterSummary"}
{"name":"Preact Component: Recommendation","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Recommendation","price":0,"description":"# Recommendation\n\nRenders a carousel of product recommendations, built using the Carousel Component.\n\nIf using children, the provided children elements array length and order must match the results stored in the `controller.store.results` to avoid unexpected tracking behaviour.\n\nAny modification to the results array and data are recommended to be made using an `afterSearch` and/or `afterStore` event via the Controller instead of making modifications in the component.\n\n\n## Sub-components\n- Carousel\n- Result (default)\n- Icon\n\n## Usage\n\nAdditional [Swiper API parameters](https://swiperjs.com/swiper-api#parameters) can be specified as props, but may need to be camelCased where appropriate.\n\n### controller\nThe required `controller` prop specifies a reference to the RecommendationController\n\n```jsx\n<Recommendation controller={controller} />\n```\n### loop\nThe `loop` prop enables 'infinite' looping through the result set when swiping or using the arrow buttons.\n\n```jsx\n<Recommendation controller={controller} loop={true} />\n```\n\n### title\nThe `title` prop specifies the carousel title\n\n```jsx\n<Recommendation controller={controller} title={'Recommended Products'} />\n```\n\n### pagination\nThe `pagination` prop specifies if the carousel should display pagination dots. \n\n```jsx\n<Recommendation controller={controller} pagination={true} />\n```\n\n### vertical\nThe `vertical` prop sets the carousel scroll direction to vertical.\n\n```jsx\n<Recommendation vertical>{children}<Recommendation/>\n```\n\n### hideButtons\nThe `hideButtons` prop specifies if the carousel should hide prev/next buttons.\n\n```jsx\n<Recommendation hideButtons>{children}<Recommendation/>\n```\n\n### prevButton\nThe `prevButton` prop specifies the previous button element of the carousel. This can be a string or JSX element. \n\n```jsx\n<Recommendation controller={controller} prevButton={'<'} />\n```\n\n### nextButton\nThe `nextButton` prop specifies the next button element of the carousel. This can be a string or JSX element. \n\n```jsx\n<Recommendation controller={controller} nextButton={'>'} />\n```\n\n### breakpoints\nAn object that modifies the responsive behavior of the carousel at various viewports. \n\nThe object key specified the viewport for when the parameters will be applied. \n\nThe default configuration contains the following properties, however any [Swiper API parameters](https://swiperjs.com/swiper-api#parameters) can also be specified. \n\n`slidesPerView` - number of products to display per page\n\n`slidesPerGroup` - number of products to scroll by when next/previous button is clicked\n\n`spaceBetween` - spacing between each product\n\n```typescript\nconst defaultRecommendationBreakpoints = {\n\t0: {\n\t\tslidesPerView: 1,\n\t\tslidesPerGroup: 1,\n\t\tspaceBetween: 0,\n\t},\n\t480: {\n\t\tslidesPerView: 2,\n\t\tslidesPerGroup: 2,\n\t\tspaceBetween: 10,\n\t},\n\t768: {\n\t\tslidesPerView: 3,\n\t\tslidesPerGroup: 3,\n\t\tspaceBetween: 10,\n\t},\n\t1024: {\n\t\tslidesPerView: 4,\n\t\tslidesPerGroup: 4,\n\t\tspaceBetween: 10,\n\t},\n\t1200: {\n\t\tslidesPerView: 5,\n\t\tslidesPerGroup: 5,\n\t\tspaceBetween: 10,\n\t},\n};\n```\n\n```jsx\n<Recommendation controller={controller} breakpoints={defaultRecommendationBreakpoints} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Recommendation","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Recommendation","categoryHierarchy":"Components > Preact > Organisms > Recommendation"}
{"name":"Preact Component: Results","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Results","price":0,"description":"# Results\n\nRenders a page of results utilizing `<Result />` components.\n\n## Sub-components\n- Result\n\n- InlineBanner\n\n## Usage\n\n### controller\nThe `controller` prop specifies a reference to the search controller.\n\n```jsx\n<Results controller={controller.store.results} />\n```\n\n### results\nThe `results` prop specifies a reference to the results store array. If no results prop is passed in, the component will default to using the results in controller.store. \n\n```jsx\n<Results results={controller.store.results} />\n```\n\n### layout\nThe `layout` prop specifies if this result will be rendered in a `grid` or `list` layout.\n\n```jsx\n<Results results={controller.store.results} layout={'grid'} />\n```\n\n### columns\nThe `columns` prop specifies the number of columns to display in a grid layout.\n\n```jsx\n<Results results={controller.store.results} columns={4} />\n```\n\n### rows\nThe `rows` prop specifies the number of rows to display in a grid layout.\n\n```jsx\n<Results results={controller.store.results} rows={2} />\n```\n\n### gapSize\nThe `gapSize` prop specifies the gap size between each result within a grid layout.\n\n```jsx\n<Results results={controller.store.results} gapSize={'10px'} />\n```\n\n### breakpoints\nAn object that modifies the responsive behavior of the `<Result />` component.\n\nEach entry within the breakpoints object contains a numeric key of the viewport when the sub-object of props will take effect. Any props listed above can be specified. (ie. columns, rows, layout, gapSize)\n\nTypically used to adjust the layout and how many products are shown at any screen size. There is no limit to how many breakpoints settings you can pass in.\n\n\nDefault Results `breakpoints` object:\n\n```typescript\nconst breakpoints = {\n\t0: {\n\t\tcolumns: 1,\n\t},\n\t540: {\n\t\tcolumns: 2,\n\t},\n\t768: {\n\t\tcolumns: 3,\n\t},\n\t991: {\n\t\tcolumns: 4,\n\t},\n};\n```\n\n```jsx\n<Results results={controller.store.results} breakpoints={breakpoints} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Results","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2FOrganisms-Results","categoryHierarchy":"Components > Preact > Organisms > Results"}
{"name":"Preact: About","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-About","price":0,"description":"Welcome to the Snap React Component Library! \nThis collection of ecommerce components allows you to quickly build and theme a layout for use with Searchspring's Snap SDK.\n\n\n### Installation\n\n```sh\nnpm install --save @searchspring/snap-preact-components\n```\n\n## Atomic Design Methodology\nSnap components follow the Atomic design methodology. Components are organized into three levels:\n\n### Atoms\nAtom level components are the basic building blocks of an ecommerce layout. This includes components such as Badge, Button, and Icon.\n\nLike atoms in nature they’re fairly abstract and often not terribly useful on their own. However, they’re good as a reference in the context of a pattern library as you can see all your global styles laid out at a glance.\n\n### Molecules\nMolecule level components utilize one or more atom components to start building the contents of a layout. This includes components such as Pagination, Select, and Slider.\n\nThings start getting more interesting and tangible when we start combining atoms together. Molecules are groups of atoms bonded together and are the smallest fundamental units of a compound. These molecules take on their own properties and serve as the backbone of our design systems.\n\n### Organisms\nOrganisms level components utilize one or more molecule components to start building complex sections of a layout. This includes components such as Autocomplete, Facets, and Results.\n\nMolecules give us some building blocks to work with, and we can now combine them together to form organisms. Organisms are groups of molecules joined together to form a relatively complex, distinct section of an interface.","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-About","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-About","categoryHierarchy":"Components > Preact > About"}
{"name":"Preact: Theme","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Theme","price":0,"description":"Snap components allows for theming at both the global and component level.\n\n### Theme object\nA theme object contains a `components` object with one or more objects where the key is the name of the component (lowercase), and the value is an object containing prop keys and values.\n\nFor example, this `globalTheme` theme object will apply the prop `color={'blue'}` for all `<Button />` components and `hideCount={false}` for all `<facetListOptions />` components.\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tcolor: 'blue',\n\t\t},\n\t\tfacetListOptions: {\n\t\t\thideCount: false,\n\t\t},\n\t},\n};\n```\n\nIf a component contains multiple sub-components (ie. Molecule or Organisms), it is also possible to provide sub-component props as follows:\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tfacetListOptions: {\n\t\t\thideCount: false,\n\t\t\ttheme: {\n\t\t\t\tcomponents: {\n\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\tnative: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n```\n\nThe theme object also contains colors used throughout components:\n\n```typescript\nconst globalTheme = {\n\tcolors: {\n\t\tprimary: '#3A23AD',\n\t\tsecondary: '#00cee1',\n\t\thover: '#f8f6fd',\n\t\ttext: {\n\t\t\tsecondary: '#ffffff'  \n\t\t}\n\t},\n\tcomponents: {}\n}\n```\n\n`theme.colors.primary` - primary color used throughout components\n\n`theme.colors.secondary` - secondary color used to accent components\n\n`theme.colors.hover` - background color for element hover state\n\n`theme.colors.text.secondary` - text color when element background is `theme.colors.primary`\n\n\n### ThemeProvider\nUsing a ThemeProvider applies a global theme to all its children components\n\n```typescript\nimport { ThemeProvider, Button } from '@searchspring/snap-preact-components'\n```\n\n```jsx\n<ThemeProvider theme={globalTheme}>\n\t<Button content={'click me!'} />\n</ThemeProvider>\n```\n\n### Component Theme\nThe `theme` prop is available on all components and allows for theming of a single component. \n\nThe component `theme` is merged with the global theme, therefore component theme props will overwrite any common props on the global theme object.\n\nIn the following example, the `<Button />` component will contain `color={'green'}` from `propTheme` and `native={true}` from `globalTheme`\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tcolor: 'blue',\n\t\t\tnative: true\n\t\t},\n\t},\n};\nconst propTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tcolor: 'green',\n\t\t},\n\t},\n};\n```\n\n```jsx\n\n<ThemeProvider theme={globalTheme}>\n    <Button content={'click me!'} theme={propTheme} />\n</ThemeProvider>\n```\n\n\n### Component Style\nThe `style` prop is available on all components and allows for styling of components at the global (via the `theme` prop) or the component level (via the `style` prop)\n\nStyles are applied to the root element of the component and uses CSS object syntax.\n\nStandard CSS:\n```css\n{\n\tbackground-color: red;\n\tcolor: #cccccc;\n}\n```\n\nIn CSS object syntax, properties are camel case and `'-'` are removed:\n```typescript\n{ \n\tbackgroundColor: '#ffff00',\n\tcolor: '#cccccc',\n}\n```\n\n<!-- TODO: once classnames are standardized, document how to target sub elements -->\n\nGlobal level styling via `theme` prop:\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tstyle: {\n\t\t\t\tbackgroundColor: '#ffff00',\n\t\t\t\tcolor: '#cccccc'\n\t\t\t}\n\t\t},\n\t},\n};\n```\n\n```jsx\n<ThemeProvider theme={globalTheme}>\n    <Button content={'click me!'} />\n</ThemeProvider>\n```\n\nComponent level styling via `style` prop:\n\n```typescript\nconst buttonStyles = {\n\tbackgroundColor: '#ffff00',\n\tcolor: '#cccccc'\n};\n```\n\n```jsx\n<Button content={'click me!'} style={buttonStyles} />\n```\n\n### Disable Component Styles\nThe `disableStyles` prop is available on all components and allows for disabling all styles of the component, including any styles being applied at the global or component level. \n\nThis can be done at the global level:\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tdisableStyles: true,\n\t},\n};\n```\n\n```jsx\n<ThemeProvider theme={globalTheme}>\n    <Button content={'click me!'} />\n</ThemeProvider>\n```\n\nOr at the component level:\n\n```jsx\n<Button content={'click me!'} disableStyles={true} />\n```\n\n\n### Component Class Names\nThe `className` prop is available on all components and allows for adding a class to the root level class list of a component. \n\nBy default, all components will contain a class name of `ss-${componentname}`, for example `'ss-button'`\n\nThis can be done at the global level:\n\n```typescript\nconst globalTheme = {\n\tcomponents: {\n\t\tbutton: {\n\t\t\tclassName: 'my-btn-class',\n\t},\n};\n```\n\n```jsx\n<ThemeProvider theme={globalTheme}>\n    <Button content={'click me!'} />\n</ThemeProvider>\n```\n\nOr at the component level:\n\n```jsx\n<Button content={'click me!'} className={'my-btn-class'} />\n```\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Theme","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Theme","categoryHierarchy":"Components > Preact > Theme"}
{"name":"Preact: Usage","route":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Usage","price":0,"description":"Snap Preact components are designed to be used with the Snap MobX store package `@searchspring/snap-store-mobx` .\n\nSnap stores are a dependency for Snap controllers `@searchspring/snap-controller`. Snap controllers such as `SearchController` contain a reference to the `SearchStore` that was provided in the `ControllerServices` object named `searchControllerServices` below.\n\nMany component props are tied to the design of the store for ease of use:\n\nIn this example, the `store.pagination` property is provided to the `pagination` prop of the `<Pagination />` component.\n\n\n```typescript\nimport { SearchController } from '@searchspring/snap-controller';\n\nconst searchController = new SearchController(searchConfig, searchControllerServices);\n\nconsole.log(searchController.store)\n```\n\n```typescript\nimport { Pagination } from '@searchspring/snap-preact-components';\n```\n\n```jsx\n<Pagination pagination={searchController.store.pagination} />\n```\n\n<br/>\n\n**Usage examples for each component can be seen in the component's 'Docs' tab.**\n","image":"","sku":"sku/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Usage","id":"/components-preact?params=%3Fpath%3D%2Fdocs%2Fdocumentation-Usage","categoryHierarchy":"Components > Preact > Usage"}
